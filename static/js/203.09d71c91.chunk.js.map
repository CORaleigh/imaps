{"version":3,"sources":["Components/Overview/utils/overview.ts","Components/Overview/Overview.tsx"],"names":["setGraphicSymbol","overview","scheme","type","basemap","map","geometryType","basemapTheme","SimpleFillSymbol","color","r","g","b","Panel","props","ref","useRef","useEffect","view","expand","ArcGISMap","MapView","navigation","browserTouchPanEnabled","mouseWheelZoomEnabled","gamepad","enabled","container","on","event","stopPropagation","ui","remove","createOverview","current","content","when","then","mainView","constraints","extent","clone","graphicLayer","GraphicsLayer","listMode","opacity","add","Graphic","symbol","watch","graphics","getItemAt","geometry","goTo","target","duration","easing","rotation","configureOverview","console","log","className"],"mappings":"oPAOO,MAqBDA,EAAoBC,IACxB,MAAMC,EAASC,IAAgB,CAAEC,QAASH,EAASI,IAAID,QAASE,aAAc,YAC9E,MAA4B,UAAxBJ,EAAOK,aACF,IAAIC,IAAiB,CAAEC,MAAO,CAAEC,EAAG,EAAGC,EAAG,EAAGC,EAAG,KAE5B,SAAxBV,EAAOK,aACF,IAAIC,IAAiB,CAAEC,MAAO,CAAEC,EAAG,IAAKC,EAAG,IAAKC,EAAG,YAD5D,G,WC3BK,MAAMC,EAASC,IACpB,MAAMC,EAAMC,iBAAuB,MAiBnC,OAfAC,qBAAU,KACR,GAAIH,EAAMI,MAAQJ,EAAMK,OAAQ,CAC9B,MAAMlB,EDJmBiB,KAC7B,MAAMb,EAAiB,IAAIe,IAAU,CAAEhB,QAASc,EAAKb,IAAID,UACnDH,EAAW,IAAIoB,IAAQ,CAC3BhB,IAAKA,EACLiB,WAAY,CACVC,wBAAwB,EACxBC,uBAAuB,EACvBC,QAAS,CACPC,SAAS,IAGbC,UAAW,gBAQb,OALA1B,EAAS2B,GAAG,QAAQ,SAAUC,GAC5BA,EAAMC,qBAER7B,EAAS8B,GAAGC,OAAO,QACnB/B,EAAS8B,GAAGC,OAAO,eACZ/B,GCfcgC,CAAenB,EAAMI,MACtCjB,EAAS0B,UAAYZ,EAAImB,QACxBpB,EAAMK,OAAyBgB,QAAUpB,EAAImB,QAC9CjC,EAASmC,OAAOC,MAAK,KDuBM,EAACpC,EAA0BqC,KAC1DrC,EAASI,IAAID,QAAUkC,EAASjC,IAAID,QACpCH,EAASsC,YAAcD,EAASC,YAChC,IAAIC,EAASF,EAASE,OAAOC,QAC7BD,EAAOrB,OAAO,GACdlB,EAASuC,OAASA,EAClB,MAAME,EAAe,IAAIC,IAAc,CAAEC,SAAU,OAAQC,QAAS,KACpEH,EAAaI,IAAI,IAAIC,IAAQ,CAAEC,OAAQhD,EAAiBC,MACxDA,EAASI,IAAIyC,IAAIJ,GACjBJ,EAASW,MAAM,CAAC,eAAe,KAC7BP,EAAaQ,SAASC,UAAU,GAAGC,SAAWd,EAASE,OACvDA,EAASF,EAASE,OAAOC,QACzBD,EAAOrB,OAAO,GACdlB,EAASoD,KAAK,CAAEC,OAAQd,GAAU,CAAEe,SAAU,IAAMC,OAAQ,YAE9DlB,EAASjC,IAAI4C,MAAM,WAAY7C,IAC7BH,EAASI,IAAID,QAAUA,EACvBsC,EAAaQ,SAASC,UAAU,GAAGH,OAAShD,EAAiBC,MAE/DqC,EAASW,MAAM,YAAaQ,IACzBxD,EAAiBwD,SAAWA,MC1CzBC,CAAkBzD,EAAUa,EAAMI,SAItC,MAAO,KACLyC,QAAQC,IAAI,eAEb,IAEI,qBAAKC,UAAU,eAAe9C,IAAKA,KAE7BF","file":"static/js/203.09d71c91.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport ArcGISMap from '@arcgis/core/Map';\nimport MapView from '@arcgis/core/views/MapView';\nimport GraphicsLayer from '@arcgis/core/layers/GraphicsLayer';\nimport Graphic from '@arcgis/core/Graphic';\nimport SimpleFillSymbol from '@arcgis/core/symbols/SimpleFillSymbol';\nimport * as type from '@arcgis/core/smartMapping/symbology/type';\nexport const createOverview = (view: __esri.MapView): __esri.MapView => {\n  const map: ArcGISMap = new ArcGISMap({ basemap: view.map.basemap });\n  const overview = new MapView({\n    map: map,\n    navigation: {\n      browserTouchPanEnabled: false,\n      mouseWheelZoomEnabled: false,\n      gamepad: {\n        enabled: false,\n      },\n    },\n    container: 'overviewMap',\n  });\n\n  overview.on('drag', function (event) {\n    event.stopPropagation();\n  });\n  overview.ui.remove('zoom');\n  overview.ui.remove('attribution');\n  return overview;\n};\nconst setGraphicSymbol = (overview: __esri.MapView): SimpleFillSymbol | undefined => {\n  const scheme = type.getSchemes({ basemap: overview.map.basemap, geometryType: 'polygon' });\n  if (scheme.basemapTheme === 'light') {\n    return new SimpleFillSymbol({ color: { r: 0, g: 0, b: 0 } as __esri.Color });\n  }\n  if (scheme.basemapTheme === 'dark') {\n    return new SimpleFillSymbol({ color: { r: 255, g: 255, b: 255 } as __esri.Color });\n  }\n};\nexport const configureOverview = (overview: __esri.MapView, mainView: __esri.MapView): void => {\n  overview.map.basemap = mainView.map.basemap;\n  overview.constraints = mainView.constraints;\n  let extent = mainView.extent.clone();\n  extent.expand(4);\n  overview.extent = extent;\n  const graphicLayer = new GraphicsLayer({ listMode: 'hide', opacity: 0.5 });\n  graphicLayer.add(new Graphic({ symbol: setGraphicSymbol(overview) }));\n  overview.map.add(graphicLayer);\n  mainView.watch(['stationary'], () => {\n    graphicLayer.graphics.getItemAt(0).geometry = mainView.extent;\n    extent = mainView.extent.clone();\n    extent.expand(4);\n    overview.goTo({ target: extent }, { duration: 1000, easing: 'ease' });\n  });\n  mainView.map.watch('basemap', (basemap) => {\n    overview.map.basemap = basemap;\n    graphicLayer.graphics.getItemAt(0).symbol = setGraphicSymbol(overview) as __esri.SimpleFillSymbol;\n  });\n  mainView.watch('rotation', (rotation) => {\n    (overview as any).rotation = rotation;\n  });\n};\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useEffect, useRef } from 'react';\n\nimport './Overview.scss';\nimport { configureOverview, createOverview } from './utils/overview';\nexport const Panel = (props: any) => {\n  const ref = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (props.view && props.expand) {\n      const overview = createOverview(props.view);\n      overview.container = ref.current as HTMLDivElement;\n      (props.expand as __esri.Expand).content = ref.current as HTMLDivElement;\n      overview.when().then(() => {\n        configureOverview(overview, props.view);\n      });\n    }\n\n    return () => {\n      console.log('clean up');\n    };\n  }, []); // only after initial render\n\n  return <div className=\"overview-map\" ref={ref}></div>;\n};\nexport default Panel;\n"],"sourceRoot":""}