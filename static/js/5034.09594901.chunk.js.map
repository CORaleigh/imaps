{"version":3,"file":"static/js/5034.09594901.chunk.js","mappings":"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","sources":["components/Panels/Basemaps/utils/basemaps.ts","components/Panels/Basemaps/utils/tips.ts","components/Panels/Basemaps/utils/useBasemaps.ts","components/Panels/Basemaps/Basemaps.tsx"],"sourcesContent":["import * as geometryEngine from '@arcgis/core/geometry/geometryEngine';\nimport BasemapGallery from '@arcgis/core/widgets/BasemapGallery';\nimport MapView from '@arcgis/core/views/MapView';\nimport PortalBasemapsSource from '@arcgis/core/widgets/BasemapGallery/support/PortalBasemapsSource';\nimport request from '@arcgis/core/request';\nimport Polygon from '@arcgis/core/geometry/Polygon';\nimport Basemap from '@arcgis/core/Basemap';\nimport Color from '@arcgis/core/Color';\nimport * as reactiveUtils from '@arcgis/core/core/reactiveUtils';\nimport FeatureLayer from '@arcgis/core/layers/FeatureLayer';\nimport VectorTileLayer from '@arcgis/core/layers/VectorTileLayer';\nimport { Alert } from '../../../Shell/utils/alert';\n\nexport const initializeBasemaps = async (view: MapView, ref: HTMLDivElement, id: string) => {\n  const gallery = new BasemapGallery({\n    container: ref,\n    view: view,\n    source: {\n      query: `id: ${id}`,\n    },\n  });\n  await reactiveUtils.whenOnce(() => gallery.source.basemaps.length > 0);\n\n  // const basemap = gallery.source.basemaps.find((basemap) => {\n  //   return basemap.portalItem.title === view.map.basemap.title;\n  // });\n  // if (basemap) {\n  //   gallery.activeBasemap = basemap;\n  // }\n};\n\nlet images: BasemapGallery;\nexport const initializeImageMaps = async (\n  view: MapView,\n  ref: HTMLDivElement,\n  id: string,\n  alertSet: Function | undefined,\n  setShowBlend: Function\n) => {\n  images = new BasemapGallery({\n    container: ref,\n    view: view,\n    source: new PortalBasemapsSource({\n      query: `id: ${id}`,\n      filterFunction: filterBasemaps,\n      updateBasemapsCallback: (items: Basemap[]) => {\n        return items.reverse();\n      },\n    }),\n  });\n  images.watch('activeBasemap', (activeBasemap) => {\n    setShowBlend(activeBasemap.portalItem.tags.includes(\"imagery\"))\n\n  });\n  await reactiveUtils.whenOnce(() => images.source.basemaps.length > 0);\n\n\n  // if (basemap) {\n  //   images.activeBasemap = basemap;\n  // }\n\n  await images.when();\n  setTimeout( () => {\n    debugger\n    const basemap = images.source.basemaps.find((basemap) => {\n      return basemap.portalItem.title === view.map.basemap.title;\n    });\n    const item = (images.container as HTMLDivElement).querySelector(`.esri-basemap-gallery__item[title=\"${basemap.portalItem.title}\"]`);\n    if (item) {\n      item.classList.add('esri-basemap-gallery__item--selected');\n    }\n  },500);\n  images.source.basemaps.reverse();\n\n\n  if (!imageryBoundary) {\n    const boundary = await getBoundary(view);\n    imageryBoundary = boundary;\n    inRaleigh = checkBoundary(view.extent);\n    (images.source as PortalBasemapsSource).refresh();\n  }\n  view.watch('extent', (extent: __esri.Extent) => viewExtentChanged(extent, view, alertSet));\n\n  view.map.watch('basemap', async (basemap: Basemap) => {\n    const isLight = await checkBasemapTheme(basemap, view);\n    setPropertyColor(view, isLight);\n  });\n};\n\nexport const initializeEsriMaps = async (view: MapView, ref: HTMLDivElement) => {\n  const esri = new BasemapGallery({\n    container: ref,\n    view: view,\n  });\n  await reactiveUtils.whenOnce(() => esri.source.basemaps.length > 0);\n\n  const basemap = esri.source.basemaps.find((basemap) => {\n    return basemap.portalItem.title === view.map.basemap.title;\n  });\n  // if (basemap) {\n  //   esri.activeBasemap = basemap;\n  // }\n};\n\nlet imageryBoundary: Polygon;\nlet inRaleigh: Boolean;\nlet wasRaleigh: Boolean;\nconst checkBoundary = (extent: __esri.Extent): Boolean => {\n  return geometryEngine.intersects(extent, imageryBoundary);\n};\n\nexport const filterBasemaps = (item: __esri.Basemap): boolean => {\n  if (inRaleigh) {\n    return true;\n  } else {\n    return item.portalItem.tags.includes('countywide');\n  }\n};\n\nconst getBoundary = async (view: __esri.MapView): Promise<Polygon> => {\n    const response = await request(\n      'https://maps.raleighnc.gov/images/rest/services/Orthos2020/ImageServer/queryBoundary?outSR=102100&f=json',\n      { responseType: 'json' });\n      return Polygon.fromJSON(response.data.shape);\n};\n\nconst viewExtentChanged = (extent: __esri.Extent, view: MapView, alertSet: Function | undefined) => {\n  if (imageryBoundary && images.source.basemaps.find((basemap) => images.activeBasemap.title === basemap.title)) {\n    wasRaleigh = inRaleigh;\n    inRaleigh = checkBoundary(view.extent);\n    if (wasRaleigh !== inRaleigh) {\n      (images.source as PortalBasemapsSource).refresh();\n      setTimeout(() => {\n        const match = images.source.basemaps.find((basemap) => view.map.basemap.title === basemap.title);\n        if (!match) {\n          const from = images.activeBasemap.title;\n          images.activeBasemap = images.source.basemaps.at(0);\n          const to = images.activeBasemap.title;\n          if (alertSet) {\n            const alert: Alert = {\n              show: true,\n              autoClose: true,\n              duration: 'medium',\n              kind: 'warning',\n              title: 'Imagery Year Changed',\n              message: `Imagery for ${from} only available inside Raleigh, base map has changed to ${to}`,\n            };\n            alertSet(alert);\n          }\n        } else {\n          images.activeBasemap = match;\n        }\n      }, 1000);\n    }\n  }\n};\n\nexport const updateBlendOpacity = (\n  opacityValue: number,\n  view: __esri.MapView,\n  streetMapId: string,\n  opacity: number,\n) => {\n  const layer = view.map.basemap.baseLayers.find((layer) => {\n    if (layer.type === 'vector-tile') {\n      return (layer as VectorTileLayer).portalItem.id === streetMapId;\n    } else {\n      return false;\n    }\n  });\n\n  if (layer) {\n    layer.opacity = opacity;\n  }\n};\nexport const blendBasemap = (switched: boolean, view: __esri.MapView, streetMapId: string, opacity: number) => {\n  const streetMap = new VectorTileLayer({ portalItem: { id: streetMapId } });\n  if (switched) {\n    streetMap.opacity = opacity;\n    view.map.basemap.baseLayers.add(streetMap);\n  } else {\n    view.map.basemap.baseLayers.remove(streetMap);\n    const layer = view.map.basemap.baseLayers.find((layer) => {\n      if (layer.type === 'vector-tile') {\n        return (layer as VectorTileLayer).portalItem.id === streetMap.portalItem.id;\n      } else {\n        return false;\n      }\n    });\n\n    if (layer) {\n      view.map.basemap.baseLayers.remove(layer);\n    }\n  }\n  images.watch('activeBasemap', (activeBasemap) => {\n\n    if (switched) {\n      const layer = activeBasemap.baseLayers.find((layer: __esri.Layer) => {\n        if (layer.type === 'vector-tile') {\n          return (layer as VectorTileLayer).portalItem.id === streetMap.portalItem.id;\n        } else {\n          return false;\n        }\n      });\n      if (!layer) {\n        activeBasemap.baseLayers.add(streetMap);\n      }\n    }\n  });\n};\n\nconst checkBasemapTheme = async (basemap: Basemap, view: MapView): Promise<boolean> => {\n    if (basemap.baseLayers.length) {\n      const baseLayer = basemap.baseLayers.find((layer) => {\n        return layer.type === 'vector-tile';\n      });\n      if (baseLayer?.type === 'vector-tile') {\n        await reactiveUtils.whenOnce(() => baseLayer.loaded);\n\n            const background = (baseLayer as __esri.VectorTileLayer).getStyleLayer('background');\n            if (background) {\n              const color: Color = new Color(background.paint['background-color']);\n              view.background = { color: color } as __esri.ColorBackground;\n              return (color as any).isBright;\n            } else {\n              return true;\n            }\n\n      } else if (!baseLayer && basemap.baseLayers.getItemAt(0).type === 'imagery') {\n        return false;\n      } else {\n        return true;\n      }\n    } else {\n      return false;\n    }\n};\n\nconst setPropertyColor = (view: MapView, isLight: boolean) => {\n  const layer = view.map.allLayers.find((layer) => {\n    return layer.title.includes('Property') && layer.type === 'feature';\n  });\n  if (layer) {\n    const renderer = ((layer as FeatureLayer)?.renderer as __esri.SimpleRenderer).clone();\n    if (isLight) {\n      (renderer.symbol as __esri.SimpleFillSymbol).outline.color.r = 0;\n      (renderer.symbol as __esri.SimpleFillSymbol).outline.color.g = 0;\n      (renderer.symbol as __esri.SimpleFillSymbol).outline.color.b = 0;\n    } else {\n      (renderer.symbol as __esri.SimpleFillSymbol).outline.color.r = 255;\n      (renderer.symbol as __esri.SimpleFillSymbol).outline.color.g = 255;\n      (renderer.symbol as __esri.SimpleFillSymbol).outline.color.b = 255;\n    }\n    (layer as FeatureLayer).renderer = renderer;\n  }\n};\n","export const tips = {\n  title: \"Basemap Tips\",\n  tips: [\n    {\n      title: \"Imagery Basemap\",\n      text: \"The lastest years of imagery are available in the Imagery basemap under the base maps option.  We recommend using this base map for imagery, unless you need to access historic imagery.\",\n    },\n    {\n      title: \"Esri Basemaps\",\n      text: \"You now have access to all basemaps created by Esri by select the Esri Basemaps option from the dropdown.\",\n    },\n    {\n      title: \"Property Color\",\n      text: \"If you switch to a dark themed basemap or an imagery basemap, the property lines will change to white for better visibility.  They will change back to black when on a light themed basemap.\",\n    },\n    {\n      title: \"Available Imagery\",\n      text: \"If you go to an area outside of Raleigh, the list of available imagery will change to show you what is available in your area.  Also it will switch to the latest year available and warn you the the imagery has changed.\",\n    },\n  ],\n};\n","import MapView from \"@arcgis/core/views/MapView\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport { PanelProps } from \"../../utils/PanelProps\";\nimport {\n  blendBasemap,\n  initializeBasemaps,\n  initializeEsriMaps,\n  initializeImageMaps,\n  updateBlendOpacity,\n} from \"./basemaps\";\nimport { tips } from \"./tips\";\n\nconst useBasemaps = (props: PanelProps) => {\n  const [view, setView] = useState<MapView>();\n  const [isActive, setIsActive] = useState(false);\n  const [blendActive, setBlendActive] = useState(false);\n  const [showBlend, setShowBlend] = useState(false);\n  const loaded = useRef(false);\n  const basemapRef = useRef(null);\n  const imagesRef = useRef(null);\n  const esriRef = useRef(null);\n  const opacity = useRef(0.5);\n  const mapGroup = \"f6329364e80c438a958ce74aadc3a89f\";\n  const imageGroup = \"492386759d264d49948bf7f83957ddb9\";\n  const streetMapId = \"02d50d24991747538e218e0a5806e9b3\";\n  useEffect(() => {\n    setView(props.view);\n    if (!loaded.current) {\n      loaded.current = true;\n      initializeBasemaps(props.view, basemapRef.current as any, mapGroup);\n      initializeImageMaps(\n        props.view,\n        imagesRef.current as any,\n        imageGroup,\n        props.alertSet,\n        setShowBlend\n      );\n      initializeEsriMaps(props.view, esriRef.current as any);\n      setTimeout(() => {\n        document\n          .querySelector(\".basemaps calcite-tab-nav\")\n          ?.shadowRoot?.querySelector(\".tab-nav\")\n          ?.setAttribute(\"style\", \"overflow: hidden\");\n      }, 100);\n    }\n  }, [props.view]);\n  useEffect(() => {\n    setIsActive(props.isActive);\n  }, [props.isActive]);\n  const panelDismissed = useCallback((e: any) => {\n    props.panelDismissed();\n  }, []);\n  const tipsClicked = useCallback((e: any) => {\n    props.showTips(tips);\n  }, []);\n  const blendUpdated = useCallback((e: any) => {\n    setBlendActive(e.currentTarget.checked);\n    blendBasemap(\n      e.currentTarget.checked,\n      props.view,\n      streetMapId,\n      opacity.current\n    );\n  }, []);\n  const blendOpacityChanged = useCallback((e: any) => {\n    opacity.current = 1 - e.target.value / 100;\n    updateBlendOpacity(\n      e.target.value / 100,\n      props.view,\n      streetMapId,\n      opacity.current\n    );\n  }, []);\n  return {\n    basemapRef,\n    imagesRef,\n    esriRef,\n    mapGroup,\n    imageGroup,\n    view,\n    isActive,\n    panelDismissed,\n    tipsClicked,\n    blendUpdated,\n    blendOpacityChanged,\n    blendActive,\n    showBlend\n  };\n};\nexport default useBasemaps;\n","import {\n  CalciteAlert,\n  CalciteTab,\n  CalciteTabNav,\n  CalciteTabs,\n  CalciteTabTitle,\n  CalcitePanel,\n  CalciteAction,\n  CalciteTooltip,\n  CalciteSwitch,\n  CalciteLabel,\n  CalciteSlider,\n} from \"@esri/calcite-components-react\";\nimport React from \"react\";\nimport { PanelProps } from \"../utils/PanelProps\";\n// import Blend from \"./Blend/Blend\";\n\nimport \"./Basemaps.css\";\nimport useBasemaps from \"./utils/useBasemaps\";\nfunction Basemaps(props: PanelProps) {\n  const {\n    basemapRef,\n    imagesRef,\n    esriRef,\n    isActive,\n    panelDismissed,\n    tipsClicked,\n    blendUpdated,\n    blendOpacityChanged,\n    blendActive,\n    showBlend\n  } = useBasemaps(props);\n  return (\n    <CalcitePanel\n      id=\"basemaps-panel\"\n      heading=\"Basemaps\"\n      hidden={!isActive}\n      closed={!isActive ? true : undefined}\n      closable\n      onCalcitePanelClose={panelDismissed}\n    >\n      <CalciteAction\n        id=\"tip\"\n        icon=\"lightbulb\"\n        text=\"Tips\"\n        slot=\"header-actions-end\"\n        onClick={tipsClicked}\n      ></CalciteAction>\n      <CalciteTooltip label=\"Show Tip\" referenceElement=\"tip\" closeOnClick>\n        Show Tip\n      </CalciteTooltip>\n      <div className=\"basemaps\">\n        <CalciteTabs position=\"bottom\" layout=\"center\" scale=\"l\">\n          <CalciteTabNav slot=\"title-group\">\n            <CalciteTabTitle>Maps</CalciteTabTitle>\n            <CalciteTabTitle>Images</CalciteTabTitle>\n            <CalciteTabTitle>Esri</CalciteTabTitle>\n            {/* <CalciteTabTitle>Blend</CalciteTabTitle> */}\n          </CalciteTabNav>\n          <CalciteTab>\n            <div ref={basemapRef}></div>\n          </CalciteTab>\n          <CalciteTab>\n            <br />\n            <CalciteLabel hidden={showBlend ? undefined : true} layout=\"inline\" alignment=\"end\">\n              <CalciteSwitch\n                onCalciteSwitchChange={blendUpdated}\n              ></CalciteSwitch>\n              Blend\n            </CalciteLabel>\n            <CalciteSlider\n              hidden={blendActive && showBlend ? undefined : true}\n              max={100}\n              min={0}\n              value={50}\n              onCalciteSliderInput={blendOpacityChanged}\n            ></CalciteSlider>\n            <div ref={imagesRef}></div>\n          </CalciteTab>\n          <CalciteTab>\n            <div ref={esriRef}></div>\n          </CalciteTab>\n        </CalciteTabs>\n      </div>\n    </CalcitePanel>\n  );\n}\n\nexport default React.memo(Basemaps);\n"],"names":["images","imageryBoundary","inRaleigh","wasRaleigh","checkBoundary","extent","geometryEngine","intersects","filterBasemaps","item","portalItem","tags","includes","getBoundary","async","response","request","responseType","Polygon","data","shape","viewExtentChanged","view","alertSet","source","basemaps","find","basemap","activeBasemap","title","refresh","setTimeout","match","map","from","at","to","show","autoClose","duration","kind","message","checkBasemapTheme","baseLayers","length","baseLayer","layer","type","reactiveUtils","loaded","background","getStyleLayer","color","Color","paint","isBright","getItemAt","setPropertyColor","isLight","allLayers","renderer","clone","symbol","outline","r","g","b","tips","text","props","setView","useState","isActive","setIsActive","blendActive","setBlendActive","showBlend","setShowBlend","useRef","basemapRef","imagesRef","esriRef","opacity","mapGroup","imageGroup","streetMapId","useEffect","current","ref","id","gallery","BasemapGallery","container","query","initializeBasemaps","PortalBasemapsSource","filterFunction","updateBasemapsCallback","items","reverse","watch","when","querySelector","classList","add","boundary","initializeImageMaps","esri","initializeEsriMaps","document","shadowRoot","setAttribute","panelDismissed","useCallback","e","tipsClicked","showTips","blendUpdated","currentTarget","checked","switched","streetMap","VectorTileLayer","remove","blendBasemap","blendOpacityChanged","target","value","opacityValue","updateBlendOpacity","Basemaps","useBasemaps","heading","hidden","closed","undefined","closable","onCalcitePanelClose","icon","slot","onClick","label","referenceElement","closeOnClick","className","position","layout","scale","alignment","onCalciteSwitchChange","max","min","onCalciteSliderInput","React"],"sourceRoot":""}