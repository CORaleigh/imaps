{"version":3,"file":"static/js/5182.18878341.chunk.js","mappings":"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","sources":["../node_modules/@arcgis/core/node_modules/@stencil/core/internal/client|lazy|/^/.//.*/.entry/.js.*$/|include: //.entry/.js$/|exclude: //.system/.entry/.js$/|groupOptions: {}|namespace object","Components/PropertyPanel/PropertyList/utils/propertylist.ts","Components/PropertyPanel/PropertyList/PropertyList.tsx"],"sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(() => {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = () => ([]);\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 67435;\nmodule.exports = webpackEmptyAsyncContext;","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n\nimport FeatureTable from '@arcgis/core/widgets/FeatureTable';\nimport FieldColumnTemplate from '@arcgis/core/widgets/FeatureTable/support/FieldColumnTemplate';\nimport TableTemplate from '@arcgis/core/widgets/FeatureTable/support/TableTemplate';\nimport ButtonMenuItem from '@arcgis/core/widgets/FeatureTable/Grid/support/ButtonMenuItem';\nconst getTableTemplate = (layer: __esri.FeatureLayer): TableTemplate => {\n  const tableTemplate: TableTemplate = new TableTemplate({ columnTemplates: [] });\n\n  const ignoreFields = ['OBJECTID', 'PARCELPK', 'GlobalID'];\n  const showColumns = ['SITE_ADDRESS', 'OWNER', 'REID', 'PIN_NUM', 'PIN_EXT'];\n  showColumns.forEach((columnName) => {\n    const field = layer.popupTemplate.fieldInfos.find((column) => {\n      return column.fieldName === columnName;\n    }) as __esri.FieldInfo;\n    console.log(field);\n    const columnTemplate = new FieldColumnTemplate({\n      label: field.label,\n      fieldName: field.fieldName,\n      visible: showColumns.includes(field.fieldName),\n      editable: false,\n    } as any);\n    tableTemplate.columnTemplates.push(columnTemplate);\n  });\n  layer.popupTemplate.fieldInfos.forEach((field) => {\n    if (!ignoreFields.includes(field.fieldName) && !showColumns.includes(field.fieldName)) {\n      tableTemplate.columnTemplates.push(\n        new FieldColumnTemplate({\n          label: field.label,\n          fieldName: field.fieldName,\n          visible: showColumns.includes(field.fieldName),\n          editable: false,\n        } as any),\n      );\n    }\n  });\n  return tableTemplate;\n};\n\nconst exportTable = (layer: __esri.FeatureLayer): void => {\n  layer.queryFeatures({ where: layer.definitionExpression, outFields: ['*'] }).then((result) => {\n    let csv = '';\n    result.fields.forEach((field) => {\n      csv += `${field.alias},`;\n    });\n    csv += '\\r\\n';\n    result.features.forEach((feature) => {\n      for (const key in feature.attributes) {\n        if (feature.attributes[key]) {\n          if (key.toLowerCase().includes('date')) {\n            csv += `\"${new Date(feature.attributes[key]).toDateString()}\",`;\n          } else if (key.toLowerCase().includes('acres')) {\n            csv += `\"${parseFloat(feature.attributes[key]).toFixed(2)}\",`;\n          } else {\n            csv += `\"${feature.attributes[key]}\",`;\n          }\n        } else {\n          csv += `\"\",`;\n        }\n      }\n      csv += '\\r\\n';\n    });\n    let datestr = new Date().toISOString();\n    datestr = datestr.replaceAll(':', '').replaceAll('-', '');\n    const exportedFilenmae = `imaps_export_${datestr}.csv`;\n\n    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    if (link.download !== undefined) {\n      const url = URL.createObjectURL(blob);\n      link.setAttribute('href', url);\n      link.setAttribute('download', exportedFilenmae);\n      link.style.visibility = 'hidden';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  });\n};\n\nexport const createFeatureTable = async (\n  ref: any,\n  view: __esri.MapView,\n  layer: __esri.FeatureLayer,\n): Promise<FeatureTable> => {\n  await layer.load();\n  layer.customParameters = { maxRecordCountFactor: 2 };\n  const table = new FeatureTable({\n    layer: layer,\n    container: ref.current as HTMLDivElement,\n    // fieldConfigs: getColumns(layer),\n    tableTemplate: getTableTemplate(layer),\n    view: view,\n    editingEnabled: false,\n    visibleElements: {\n      header: true,\n      menu: true,\n      menuItems: {\n        clearSelection: false,\n        refreshData: true,\n        toggleColumns: true,\n      },\n      selectionColumn: false,\n    },\n    menuConfig: {\n      items: [\n        new ButtonMenuItem({\n          label: 'Export',\n          iconClass: 'esri-icon-download',\n          clickFunction: () => {\n            exportTable(layer);\n          },\n        }),\n      ],\n    },\n  });\n\n  return table;\n};\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport React, { useEffect, useRef, useState } from 'react';\nimport FeatureTable from '@arcgis/core/widgets/FeatureTable';\nimport { createFeatureTable } from './utils/propertylist';\nimport './PropertyList.scss';\nexport const PropertyList = (props: any) => {\n  const listRef = useRef<HTMLDivElement>(null);\n  const [loaded, setLoaded] = useState(false);\n  const [table, setTable] = useState<FeatureTable>();\n  useEffect(() => {\n    if (table) {\n      setTimeout(() => {\n        const grid = (table?.container as HTMLElement).querySelector('vaadin-grid');\n        grid?.render();\n        grid?.recalculateColumnWidths();\n        grid?.notifyResize();\n\n        grid?.focus();\n        const items = grid?.selectedItems;\n        if (items) {\n          const item = items[0];\n          if (item) {\n            //const index = table.viewModel.getObjectIdIndex((item as any).objectId);\n            //table.viewModel.scrollToIndex(index);\n          }\n        }\n      }, 1000);\n    }\n  }, [props.reloadTable]);\n  useEffect(() => {\n    if (!loaded) {\n      createFeatureTable(listRef, props.view, props.layer).then((table) => {\n        setTable(table);\n        setLoaded(true);\n        if (props.filter) {\n          table.layer.definitionExpression = props.filter;\n        } else {\n          table.layer.definitionExpression = 'OBJECTID IS NOT NULL';\n        }\n        table.tableTemplate.columnTemplates.forEach(\n          (template: __esri.FieldColumnTemplate | __esri.GroupColumnTemplate) => {\n            template = template as __esri.FieldColumnTemplate;\n            if (template.fieldName.includes('PIN')) {\n              template.direction = 'asc';\n            }\n          },\n        );\n\n        setTimeout(() => {\n          table.menu.items.reverse();\n          table.editingEnabled = false;\n          const grid = (table.container as HTMLElement).querySelector('vaadin-grid');\n          const title = (table.container as HTMLElement).querySelector('.esri-feature-table__title');\n          if (title) {\n            title.textContent = 'Selected Properties: ' + grid?.items?.length;\n          }\n          title?.setAttribute('style', 'display: block');\n          table.viewModel.watch('state', (state) => {\n            if (state === 'ready') {\n              requestAnimationFrame(() => {\n                const title = (table.container as HTMLElement).querySelector('.esri-feature-table__title');\n                if (title) {\n                  if (grid?.items) {\n                    title.textContent = 'Selected Properties: ' + grid?.items?.length;\n                  } else {\n                    title.textContent = 'Selected Properties: 0';\n                  }\n                }\n              });\n            }\n          });\n          grid?.addEventListener('click', (e) => {\n            if ((e.target as HTMLElement).nodeName === 'VAADIN-GRID-CELL-CONTENT') {\n              //grid.selectItem((grid.getEventContext(e) as any)?.item);\n\n              table.clearSelection();\n              const item = (grid.getEventContext(e) as any)?.item;\n              const feature = item.feature;\n              table.selectRows(feature);\n              //grid.scrollToIndex(item.index);\n              props.featureSelected(feature);\n              requestAnimationFrame(() => {\n                const title = (table.container as HTMLElement).querySelector('.esri-feature-table__title');\n                if (title) {\n                  title.textContent = 'Selected Properties: ' + grid?.items?.length;\n                }\n              });\n              //grid.selectedItems = [(grid.getEventContext(e) as any)?.item];\n            }\n          });\n        }, 2000);\n        //   const grid = (table.container as HTMLElement).querySelector('vaadin-grid');\n\n        //   if (state === 'ready' && grid) {\n\n        //   }\n        //   if (state === 'loading' && grid) {\n        //     grid?.removeEventListener('click', (e) => {\n        //       console.log((grid.getEventContext(e) as any)?.item);\n        //       grid.selectedItems = [(grid.getEventContext(e) as any)?.item];\n        //     });\n        //   }\n        // });\n\n        // table.on('selection-change', (event: __esri.FeatureTableSelectionChangeEvent) => {\n        //   if (event.added.length) {\n        //     //table.clearSelection();\n        //     //\n        //     props.featureSelected(event.added[0].feature);\n        //   }\n        // });\n      });\n    }\n\n    return () => {\n      table && table.destroy();\n    };\n  }, []); // only after initial render\n  useEffect(() => {\n    if (table) {\n      table.layer.definitionExpression = props.filter;\n    }\n  }, [props.filter]);\n  return <div ref={listRef}></div>;\n};\n\nexport default PropertyList;\n"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","id","module","exports","getTableTemplate","layer","tableTemplate","TableTemplate","columnTemplates","ignoreFields","showColumns","forEach","columnName","field","popupTemplate","fieldInfos","find","column","fieldName","console","log","columnTemplate","FieldColumnTemplate","label","visible","includes","editable","push","createFeatureTable","async","ref","view","load","customParameters","maxRecordCountFactor","table","FeatureTable","container","current","editingEnabled","visibleElements","header","menu","menuItems","clearSelection","refreshData","toggleColumns","selectionColumn","menuConfig","items","ButtonMenuItem","iconClass","clickFunction","queryFeatures","where","definitionExpression","outFields","result","csv","fields","alias","features","feature","key","attributes","toLowerCase","Date","toDateString","parseFloat","toFixed","datestr","toISOString","replaceAll","exportedFilenmae","blob","Blob","type","link","document","createElement","undefined","download","url","URL","createObjectURL","setAttribute","style","visibility","body","appendChild","click","removeChild","exportTable","PropertyList","props","listRef","useRef","loaded","setLoaded","useState","setTable","useEffect","setTimeout","grid","querySelector","render","recalculateColumnWidths","notifyResize","focus","selectedItems","reloadTable","filter","template","direction","reverse","title","textContent","length","viewModel","watch","state","requestAnimationFrame","addEventListener","target","nodeName","getEventContext","item","selectRows","featureSelected","destroy"],"sourceRoot":""}