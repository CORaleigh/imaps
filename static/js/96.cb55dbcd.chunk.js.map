{"version":3,"file":"static/js/96.cb55dbcd.chunk.js","mappings":"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","sources":["../node_modules/@arcgis/core/node_modules/@stencil/core/internal/client|lazy|/^/.//.*/.entry/.js.*$/|include: //.entry/.js$/|exclude: //.system/.entry/.js$/|groupOptions: {}|namespace object","Components/Sketch/utils/sketch.ts","Components/Sketch/SketchSettings.tsx","Components/Sketch/utils/notes.ts","Components/Sketch/Sketch.tsx"],"sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(() => {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = () => ([]);\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 67435;\nmodule.exports = webpackEmptyAsyncContext;","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n\nimport Sketch from '@arcgis/core/widgets/Sketch';\nimport Color from '@arcgis/core/Color';\n\nimport GraphicsLayer from '@arcgis/core/layers/GraphicsLayer';\nimport FeatureLayer from '@arcgis/core/layers/FeatureLayer';\nimport LabelClass from '@arcgis/core/layers/support/LabelClass';\nexport const sketchHandles: any[] = [];\n\nconst labelClass = new LabelClass({\n  labelExpressionInfo: { expression: '$feature.label' },\n  symbol: {\n    type: 'text',\n    color: 'black',\n    haloSize: 1,\n    haloColor: 'white',\n  } as any,\n});\nexport const points = new FeatureLayer({\n  source: [],\n  fields: [\n    { type: 'oid', name: 'OBJECTID' },\n    { type: 'string', name: 'label' },\n  ],\n  objectIdField: 'OBJECTID',\n  geometryType: 'point',\n  listMode: 'hide',\n  legendEnabled: false,\n  id: 'sketch-points',\n  renderer: { type: 'simple', symbol: { type: 'simple-marker', color: [255, 255, 255, 1] } } as any,\n  labelingInfo: [labelClass],\n});\nexport const lines = new FeatureLayer({\n  source: [],\n  fields: [\n    { type: 'oid', name: 'OBJECTID' },\n    { type: 'string', name: 'label' },\n  ],\n  objectIdField: 'OBJECTID',\n  geometryType: 'polyline',\n  legendEnabled: false,\n  listMode: 'hide',\n  id: 'sketch-lines',\n  labelingInfo: [labelClass],\n});\nexport const polygons = new FeatureLayer({\n  source: [],\n  fields: [\n    { type: 'oid', name: 'OBJECTID' },\n    { type: 'string', name: 'label' },\n  ],\n  objectIdField: 'OBJECTID',\n  geometryType: 'polygon',\n  listMode: 'hide',\n  legendEnabled: false,\n  id: 'sketch-polygons',\n  renderer: {\n    type: 'simple',\n    symbol: {\n      type: 'simple-fill',\n      color: [255, 255, 255, 0.5],\n      outline: {\n        type: 'simple-line',\n        color: [255, 255, 255, 1],\n      },\n    },\n  } as any,\n\n  labelingInfo: [labelClass],\n});\nconst graphics = new GraphicsLayer({ listMode: 'hide', opacity: 0 });\n\nconst sketchOnCreate = (event: __esri.SketchCreateEvent, view: __esri.MapView) => {\n  if (event.state === 'start') {\n    view.popup.autoOpenEnabled = false;\n  }\n  if (event.state === 'complete') {\n    const graphic: __esri.Graphic = event.graphic;\n    const labelText = document.getElementById('labelInput')?.getAttribute('value');\n    graphic.setAttribute('label', labelText);\n    if (graphic.geometry.type === 'point') {\n      points.applyEdits({ addFeatures: [graphic] }).then(() => {\n        points.refresh();\n      });\n    }\n    if (graphic.geometry.type === 'polyline') {\n      lines.applyEdits({ addFeatures: [graphic] }).then(() => {\n        lines.refresh();\n      });\n    }\n    if (graphic.geometry.type === 'polygon') {\n      polygons.applyEdits({ addFeatures: [graphic] }).then(() => {\n        polygons.refresh();\n      });\n    }\n    view.popup.autoOpenEnabled = true;\n  }\n};\n\nconst sketchOnUpdate = (event: __esri.SketchUpdateEvent) => {\n  if (event.state === 'start') {\n    graphics.opacity = 0.5;\n  }\n  if (event.state === 'complete') {\n    graphics.opacity = 0;\n    if (event.graphics[0].geometry.type === 'point') {\n      points.applyEdits({ updateFeatures: event.graphics }).then(() => {\n        points.refresh();\n      });\n    }\n    if (event.graphics[0].geometry.type === 'polyline') {\n      lines.applyEdits({ updateFeatures: event.graphics }).then(() => {\n        lines.refresh();\n      });\n    }\n    if (event.graphics[0].geometry.type === 'polygon') {\n      polygons.applyEdits({ updateFeatures: event.graphics }).then(() => {\n        polygons.refresh();\n      });\n    }\n  }\n};\n\nconst sketchOnDelete = (event: __esri.SketchDeleteEvent) => {\n  const pointFeatures: __esri.Graphic[] = [];\n  const lineFeatures: __esri.Graphic[] = [];\n  const polygonFeatures: __esri.Graphic[] = [];\n  event.graphics.forEach((graphic) => {\n    if (graphic.geometry.type === 'point') {\n      pointFeatures.push(graphic);\n    }\n    if (graphic.geometry.type === 'polyline') {\n      lineFeatures.push(graphic);\n    }\n    if (graphic.geometry.type === 'polygon') {\n      polygonFeatures.push(graphic);\n    }\n  });\n  points.applyEdits({ deleteFeatures: pointFeatures }).then(() => {\n    points.refresh();\n  });\n  lines.applyEdits({ deleteFeatures: lineFeatures }).then(() => {\n    lines.refresh();\n  });\n  polygons.applyEdits({ deleteFeatures: polygonFeatures }).then(() => {\n    polygons.refresh();\n  });\n};\n\nexport const getInitialSettings = (): any => {\n  return {\n    pointSize: 10,\n    pointFillEnabled: true,\n    pointFillColor: '#FF0000',\n    pointOutlineColor: '#000000',\n    pointFillOpacity: 0.5,\n    pointOutlineOpacity: 1,\n    pointOutlineWidth: 1,\n    lineOutlineOpacity: 1,\n    lineWidth: 2,\n    lineColor: '#FF0000',\n\n    polygonFillEnabled: true,\n    polygonFillOpacity: 0.5,\n    polygonOutlineOpacity: 1,\n    polygonOutlineWidth: 2,\n    polygonOutlineColor: '#000000',\n    polygonFillColor: '#FF0000',\n    fontSize: 12,\n    fontFamily: 'Arial',\n    fontWeight: 'normal',\n    fontStyle: 'normal',\n    fontColor: '#000000',\n    haloColor: '#FFFFFF',\n  };\n};\n\nconst updatePointRenderer = (settings: any) => {\n  const pointRenderer = (points.renderer as __esri.SimpleRenderer).clone();\n  const symbol: __esri.SimpleMarkerSymbol = pointRenderer.symbol as __esri.SimpleMarkerSymbol;\n\n  symbol.color = Color.fromHex(settings.pointFillColor);\n  if (!settings.pointFillEnabled) {\n    symbol.color.a = 0;\n  } else {\n    symbol.color.a = settings.pointFillOpacity;\n  }\n  symbol.outline.color = Color.fromHex(settings.pointOutlineColor);\n  symbol.outline.color.a = settings.pointOutlineOpacity;\n  symbol.outline.width = settings.pointOutlineWidth;\n  symbol.size = settings.pointSize;\n  points.renderer = pointRenderer;\n};\n\nconst updatePolygonRenderer = (settings: any) => {\n  const polygonRenderer = (polygons.renderer as __esri.SimpleRenderer).clone();\n  const symbol: __esri.SimpleFillSymbol = polygonRenderer.symbol as __esri.SimpleFillSymbol;\n  if (settings.polygonFillEnabled) {\n    symbol.style = 'solid';\n  } else {\n    symbol.style = 'none';\n  }\n  symbol.color = Color.fromHex(settings.polygonFillColor);\n  symbol.color.a = settings.polygonFillOpacity;\n  symbol.outline.color = Color.fromHex(settings.polygonOutlineColor);\n  symbol.outline.color.a = settings.polygonOutlineOpacity;\n  symbol.outline.width = settings.polygonOutlineWidth;\n  polygons.renderer = polygonRenderer;\n};\n\nconst updateLineRenderer = (settings: any) => {\n  const lineRenderer = (lines.renderer as __esri.SimpleRenderer).clone();\n  const symbol: __esri.SimpleLineSymbol = lineRenderer.symbol as __esri.SimpleLineSymbol;\n  symbol.color = Color.fromHex(settings.lineColor);\n  symbol.color.a = settings.lineOutlineOpacity;\n  symbol.width = settings.lineWidth;\n  lines.renderer = lineRenderer;\n};\n\nexport const settingsChanged = (settings: any, geometryType: string) => {\n  if (geometryType === 'point') {\n    updatePointRenderer(settings);\n  }\n  if (geometryType === 'polygon') {\n    updatePolygonRenderer(settings);\n  }\n  if (geometryType === 'line') {\n    updateLineRenderer(settings);\n  }\n};\nexport const createSketchWidget = (ref: any, view: __esri.MapView): Sketch => {\n  view.map.addMany([points, lines, polygons, graphics]);\n  const sketch = new Sketch({\n    container: ref.current as HTMLDivElement,\n    view: view,\n    layer: graphics,\n  });\n  sketch.on('create', (event: __esri.SketchCreateEvent) => {\n    sketchOnCreate(event, view);\n  });\n  sketch.on('update', sketchOnUpdate);\n  sketch.on('delete', sketchOnDelete);\n  return sketch;\n};\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { getInitialSettings } from './utils/sketch';\n//import { fonts } from './utils/fonts';\nexport const SketchSettings = (props: any) => {\n  const [geometryType, setGeometryType] = useState(null);\n  const ref = useRef<HTMLDivElement>(null);\n  //const family = useRef<HTMLDivElement>(null);\n  //const [selectedFont, setSelectedFont] = useState<any>();\n  const settings = useRef(getInitialSettings());\n  // const [settings, setSettings] = useState<any>(() => {\n  //     const initialSettings = getInitialSettings();\n  //     return initialSettings;\n  // });\n  const sliderChanged = (event: any) => {\n    const attribute = (event.target as HTMLElement).getAttribute('name');\n    if (attribute) {\n      settings.current = { ...settings.current, ...{ [attribute]: parseFloat(event.target.value) } };\n      requestAnimationFrame(() => {\n        props.settingsChanged(settings.current);\n      });\n    }\n  };\n  const colorChanged = (event: any) => {\n    const attribute = (event.target as HTMLElement).getAttribute('name');\n    if (attribute) {\n      settings.current = { ...settings.current, ...{ [attribute]: event.target.value } };\n      requestAnimationFrame(() => {\n        props.settingsChanged(settings.current);\n      });\n    }\n  };\n  const switchChanged = (event: any) => {\n    const attribute = (event.target as HTMLElement).getAttribute('name');\n    if (attribute) {\n      settings.current = { ...settings.current, ...{ [attribute]: (event as any).detail.switched } };\n      requestAnimationFrame(() => {\n        props.settingsChanged(settings.current);\n      });\n    }\n  };\n\n  useEffect(() => {\n    setGeometryType(props.geometryType);\n\n    requestAnimationFrame(() => {\n      // if (props.geometryType === 'text') {\n      //   const font = fonts.find((font) => {\n      //     return font.active;\n      //   });\n      //   setSelectedFont(font);\n\n      //   family.current?.addEventListener('calciteDropdownSelect', (e) => {\n      //     requestAnimationFrame(() => {\n      //       const item = family.current?.querySelector('calcite-dropdown-item[active]');\n\n      //       if (item) {\n      //         const selected = fonts.find((font) => {\n      //           return font.name === item.innerHTML;\n      //         });\n      //         const active = fonts.find((font) => {\n      //           return font.active;\n      //         }) as any;\n      //         if (active) {\n      //           active.selected = false;\n      //         }\n      //         if (selected) {\n      //           selected.active = true;\n      //         }\n      //         console.log(selected);\n      //         setSelectedFont(selected);\n      //         settings.current = {\n      //           ...settings.current,\n      //           ...{\n      //             fontFamily: selected?.font.family,\n      //             fontStyle: selected?.font.style,\n      //             fontWeight: selected?.font.weight,\n      //           },\n      //         };\n      //         props.settingsChanged(settings.current);\n      //       }\n      //     });\n      //   });\n      // } else {\n      //   family.current?.removeEventListener('calciteDropdownSelect', (e) => {\n      //     console.log(e);\n      //   });\n      // }\n      ref.current?.querySelectorAll('calcite-slider').forEach((element: Element) => {\n        element.addEventListener('calciteSliderChange', sliderChanged);\n      });\n      ref.current?.querySelectorAll('calcite-color-picker').forEach((element: Element) => {\n        element.addEventListener('calciteColorPickerChange', colorChanged);\n      });\n      ref.current?.querySelectorAll('calcite-switch').forEach((element: Element) => {\n        element.addEventListener('calciteSwitchChange', switchChanged);\n      });\n    });\n\n    return () => {\n      ref.current?.querySelectorAll('calcite-slider').forEach((slider: Element) => {\n        slider.removeEventListener('calciteSliderChange', sliderChanged);\n      });\n      ref.current?.querySelectorAll('calcite-slider').forEach((picker: Element) => {\n        picker.removeEventListener('calciteColorPickerChange', colorChanged);\n      });\n      ref.current?.querySelectorAll('calcite-switch').forEach((element: Element) => {\n        element.addEventListener('calciteSwitchChange', switchChanged);\n      });\n    };\n  }, [props.geometryType]);\n  return (\n    <div ref={ref} className=\"panel\">\n      {geometryType === 'point' ? (\n        <div>\n          <calcite-block key=\"point-symbol\" heading=\"Symbol\" open collapsible>\n            <calcite-block-section text=\"Size\">\n              <calcite-slider\n                min=\"0\"\n                max=\"30\"\n                value={settings.current.pointSize}\n                step=\"0.1\"\n                label=\"Size\"\n                label-handles=\"\"\n                ticks=\"0\"\n                page-step=\"5\"\n                name=\"pointSize\"\n                snap=\"\"\n              ></calcite-slider>\n            </calcite-block-section>\n          </calcite-block>\n          <calcite-block key=\"point-fill\" heading=\"Fill\" open collapsible>\n            <calcite-label\n              layout=\"inline-space-between\"\n              class=\"sc-calcite-label-h sc-calcite-label-s\"\n              dir=\"ltr\"\n              alignment=\"start\"\n              status=\"idle\"\n              scale=\"m\"\n              calcite-hydrated=\"\"\n            >\n              <label className=\"sc-calcite-label-h sc-calcite-label-s sc-calcite-label\">\n                Enable fill\n                <calcite-switch\n                  name=\"pointFillEnabled\"\n                  value=\"enabled\"\n                  switched={settings.current.pointFillEnabled}\n                  bind={this}\n                  aria-checked=\"true\"\n                  dir=\"ltr\"\n                  tabindex=\"0\"\n                  scale=\"m\"\n                  calcite-hydrated=\"\"\n                ></calcite-switch>\n              </label>\n            </calcite-label>\n            {settings.current.pointFillEnabled ? (\n              <div>\n                <calcite-block-section key=\"point-fill-color\" text=\"Color\">\n                  <calcite-color-picker\n                    dir=\"ltr\"\n                    hide-channels=\"\"\n                    hide-saved=\"\"\n                    scale=\"m\"\n                    value={settings.current.pointFillColor}\n                    appearance=\"default\"\n                    name=\"pointFillColor\"\n                    calcite-hydrated=\"\"\n                    id=\"pointFill\"\n                  ></calcite-color-picker>\n                </calcite-block-section>\n                <calcite-block-section key=\"point-fill-transparency\" text=\"Fill transparency\">\n                  <calcite-slider\n                    min=\"0\"\n                    max=\"1\"\n                    value={settings.current.pointFillOpacity}\n                    bind={this}\n                    step=\"0.1\"\n                    label=\"Opacity\"\n                    label-handles=\"\"\n                    ticks=\"0\"\n                    page-step=\"5\"\n                    name=\"fill-opacity\"\n                    id=\"pointFillOpacity\"\n                    snap=\"\"\n                  ></calcite-slider>\n                </calcite-block-section>{' '}\n              </div>\n            ) : (\n              ''\n            )}\n          </calcite-block>\n          <calcite-block key=\"outline\" heading=\"Outline\" open collapsible>\n            <calcite-block-section text=\"Color\">\n              <calcite-color-picker\n                dir=\"ltr\"\n                hide-channels=\"\"\n                hide-saved=\"\"\n                scale=\"m\"\n                value={settings.current.pointOutlineColor}\n                appearance=\"default\"\n                name=\"pointOutlineColor\"\n                calcite-hydrated=\"\"\n              ></calcite-color-picker>\n            </calcite-block-section>\n            <calcite-block-section text=\"Outline transparency\">\n              <calcite-slider\n                min=\"0\"\n                max=\"1\"\n                value={settings.current.pointOutlineOpacity}\n                bind={this}\n                step=\"0.1\"\n                label=\"Opacity\"\n                label-handles=\"\"\n                ticks=\"0\"\n                page-step=\"5\"\n                name=\"pointOutlineOpacity\"\n                snap=\"\"\n              ></calcite-slider>\n            </calcite-block-section>\n            <calcite-block-section text=\"Stroke\">\n              <calcite-slider\n                min=\"0\"\n                max=\"10\"\n                value={settings.current.pointOutlineWidth}\n                step=\"0.1\"\n                label=\"Width\"\n                label-handles=\"\"\n                ticks=\"0\"\n                page-step=\"5\"\n                name=\"pointOutlineWidth\"\n                snap=\"\"\n              ></calcite-slider>\n            </calcite-block-section>\n          </calcite-block>\n        </div>\n      ) : (\n        ''\n      )}\n      {geometryType === 'polyline' ? (\n        <div>\n          <calcite-block key=\"line\" heading=\"Line\" open collapsible>\n            <calcite-block-section text=\"Color\">\n              <calcite-color-picker\n                dir=\"ltr\"\n                hide-channels=\"\"\n                hide-saved=\"\"\n                scale=\"m\"\n                value={settings.current.lineColor}\n                appearance=\"default\"\n                name=\"lineColor\"\n                calcite-hydrated=\"\"\n              ></calcite-color-picker>\n            </calcite-block-section>\n\n            <calcite-block-section text=\"Line transparency\">\n              <calcite-slider\n                min=\"0\"\n                max=\"1\"\n                value={settings.current.lineOutlineOpacity}\n                bind={this}\n                step=\"0.1\"\n                label=\"Opacity\"\n                label-handles=\"\"\n                ticks=\"0\"\n                page-step=\"5\"\n                name=\"lineOutlineOpacity\"\n                snap=\"\"\n              ></calcite-slider>\n            </calcite-block-section>\n            <calcite-block-section text=\"Stroke\">\n              <calcite-slider\n                min=\"0\"\n                max=\"10\"\n                value={settings.current.lineWidth}\n                bind={this}\n                step=\"0.1\"\n                label=\"Width\"\n                label-handles=\"\"\n                ticks=\"0\"\n                page-step=\"5\"\n                name=\"lineWidth\"\n                snap=\"\"\n              ></calcite-slider>\n            </calcite-block-section>\n          </calcite-block>\n        </div>\n      ) : (\n        ''\n      )}\n      {geometryType === 'polygon' ? (\n        <div>\n          <calcite-block key=\"polygon-fill\" heading=\"Fill\" open collapsible>\n            <calcite-label\n              layout=\"inline-space-between\"\n              class=\"sc-calcite-label-h sc-calcite-label-s\"\n              dir=\"ltr\"\n              alignment=\"start\"\n              status=\"idle\"\n              scale=\"m\"\n              calcite-hydrated=\"\"\n            >\n              <label className=\"sc-calcite-label-h sc-calcite-label-s sc-calcite-label\">\n                Enable fill\n                <calcite-switch\n                  name=\"polygonFillEnabled\"\n                  value=\"enabled\"\n                  switched={settings.current.polygonFillEnabled}\n                  bind={this}\n                  aria-checked=\"true\"\n                  dir=\"ltr\"\n                  tabindex=\"0\"\n                  scale=\"m\"\n                  calcite-hydrated=\"\"\n                ></calcite-switch>\n              </label>\n            </calcite-label>\n            {settings.current.polygonFillEnabled ? (\n              <div>\n                <calcite-block-section key=\"polygon-fill-color\" text=\"Color\">\n                  <calcite-color-picker\n                    dir=\"ltr\"\n                    hide-channels=\"\"\n                    hide-saved=\"\"\n                    scale=\"m\"\n                    value={settings.current.polygonFillColor}\n                    appearance=\"default\"\n                    name=\"polygonFillColor\"\n                    calcite-hydrated=\"\"\n                  ></calcite-color-picker>\n                </calcite-block-section>\n                <calcite-block-section key=\"polygon-fill-transparency\" text=\"Fill transparency\">\n                  <calcite-slider\n                    min=\"0\"\n                    max=\"1\"\n                    value={settings.current.polygonFillOpacity}\n                    bind={this}\n                    step=\"0.1\"\n                    label=\"Opacity\"\n                    label-handles=\"\"\n                    ticks=\"0\"\n                    page-step=\"5\"\n                    name=\"polygonFillOpacity\"\n                    snap=\"\"\n                  ></calcite-slider>\n                </calcite-block-section>\n              </div>\n            ) : (\n              ''\n            )}\n          </calcite-block>\n          <calcite-block key=\"outline\" heading=\"Outline\" open collapsible>\n            <calcite-block-section text=\"Color\">\n              <calcite-color-picker\n                dir=\"ltr\"\n                hide-channels=\"\"\n                hide-saved=\"\"\n                scale=\"m\"\n                value={settings.current.polygonOutlineColor}\n                appearance=\"default\"\n                name=\"polygonOutlineColor\"\n                calcite-hydrated=\"\"\n              ></calcite-color-picker>\n            </calcite-block-section>\n            <calcite-block-section text=\"Outline transparency\">\n              <calcite-slider\n                min=\"0\"\n                max=\"1\"\n                value={settings.current.polygonOutlineOpacity}\n                bind={this}\n                step=\"0.1\"\n                label=\"Opacity\"\n                label-handles=\"\"\n                ticks=\"0\"\n                page-step=\"5\"\n                name=\"polygonOutlineOpacity\"\n                snap=\"\"\n              ></calcite-slider>\n            </calcite-block-section>\n            <calcite-block-section text=\"Stroke\">\n              <calcite-slider\n                min=\"0\"\n                max=\"10\"\n                value={settings.current.polygonOutlineWidth}\n                bind={this}\n                step=\"0.1\"\n                label=\"Width\"\n                label-handles=\"\"\n                ticks=\"0\"\n                page-step=\"5\"\n                name=\"polygonOutlineWidth\"\n                snap=\"\"\n              ></calcite-slider>\n            </calcite-block-section>\n          </calcite-block>\n        </div>\n      ) : (\n        ''\n      )}\n      {geometryType === 'text' ? (\n        <div>\n          <calcite-block key=\"text-symbol\" heading=\"Symbol\" open collapsible>\n            {/* <calcite-block-section key=\"font-color\" text=\"Font Family\" open>\n              <calcite-dropdown ref={family} label=\"Dropdown label\">\n                <calcite-button slot=\"dropdown-trigger\" color=\"clear\">\n                  {selectedFont?.name}\n                </calcite-button>\n                <calcite-dropdown-group>\n                  {fonts.map((font: any) => {\n                    return <calcite-dropdown-item key={font.name}>{font.name}</calcite-dropdown-item>;\n                  })}\n                </calcite-dropdown-group>\n              </calcite-dropdown>\n            </calcite-block-section> */}\n            <calcite-block-section text=\"Font Size\" open>\n              <calcite-slider\n                min=\"6\"\n                max=\"30\"\n                value={settings.current.fontSize}\n                step=\"1\"\n                label=\"Size\"\n                label-handles=\"\"\n                ticks=\"0\"\n                page-step=\"5\"\n                name=\"fontSize\"\n                snap=\"\"\n              ></calcite-slider>\n            </calcite-block-section>\n\n            <calcite-block-section key=\"font-color\" text=\"Font Color\" open>\n              <calcite-label>\n                Font Color\n                <calcite-color-picker\n                  dir=\"ltr\"\n                  hide-channels=\"\"\n                  hide-saved=\"\"\n                  scale=\"m\"\n                  value={settings.current.fontColor}\n                  appearance=\"default\"\n                  name=\"fontColor\"\n                  calcite-hydrated=\"\"\n                  id=\"fontColor\"\n                ></calcite-color-picker>\n              </calcite-label>\n            </calcite-block-section>\n          </calcite-block>\n        </div>\n      ) : (\n        ''\n      )}\n    </div>\n  );\n};\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n\nimport Graphic from '@arcgis/core/Graphic';\nimport MapNotesLayer from '@arcgis/core/layers/MapNotesLayer';\nimport SketchViewModel from '@arcgis/core/widgets/Sketch/SketchViewModel';\nimport TextSymbol from '@arcgis/core/symbols/TextSymbol';\nimport SimpleMarkerSymbol from '@arcgis/core/symbols/SimpleMarkerSymbol';\nimport SimpleFillSymbol from '@arcgis/core/symbols/SimpleFillSymbol';\nimport SimpleLineSymbol from '@arcgis/core/symbols/SimpleLineSymbol';\n\nimport Color from '@arcgis/core/Color';\nexport let pointSketchViewModel: SketchViewModel;\n\nexport let polylineSketchViewModel: SketchViewModel;\n\nexport let polygonSketchViewModel: SketchViewModel;\n\nexport let textSketchViewModel: SketchViewModel;\nlet count = 0;\nconst pointSymbol = new SimpleMarkerSymbol({\n  size: 10,\n  color: new Color([255, 0, 0, 1]),\n  style: 'circle',\n  outline: new SimpleLineSymbol({\n    color: new Color([0, 0, 0, 1]),\n    width: 1,\n  }),\n});\nconst lineSymbol = new SimpleLineSymbol({\n  color: new Color([255, 0, 0, 1]),\n  width: 2,\n});\n\nconst fillSymbol = new SimpleFillSymbol({\n  color: new Color([255, 0, 0, 0.5]),\n  style: 'solid',\n  outline: new SimpleLineSymbol({\n    color: new Color([255, 0, 0, 1]),\n    width: 2,\n  }),\n});\n\nexport const textSymbol = new TextSymbol({\n  text: '',\n  color: [0, 0, 0],\n  haloColor: [255, 255, 255],\n  haloSize: 2,\n  font: {\n    family: 'Arial Unicode MS',\n    size: 14,\n  },\n});\n// use this counter for new map notes title purposes\n\nconst sketchLayer = new MapNotesLayer({ listMode: 'hide' });\n\nconst pointLayer = sketchLayer.pointLayer;\nconst polylineLayer = sketchLayer.polylineLayer;\nconst polygonLayer = sketchLayer.polygonLayer;\nconst textLayer = sketchLayer.textLayer;\n\nconst updatePointRenderer = (settings: any) => {\n  pointSymbol.color = Color.fromHex(settings.pointFillColor);\n  if (!settings.pointFillEnabled) {\n    pointSymbol.color.a = 0;\n  } else {\n    pointSymbol.color.a = settings.pointFillOpacity;\n  }\n  pointSymbol.outline.color = Color.fromHex(settings.pointOutlineColor);\n  pointSymbol.outline.color.a = settings.pointOutlineOpacity;\n  pointSymbol.outline.width = settings.pointOutlineWidth;\n  pointSymbol.size = settings.pointSize;\n};\n\nconst updatePolygonRenderer = (settings: any) => {\n  if (settings.polygonFillEnabled) {\n    fillSymbol.style = 'solid';\n  } else {\n    fillSymbol.style = 'none';\n  }\n  fillSymbol.color = Color.fromHex(settings.polygonFillColor);\n  fillSymbol.color.a = settings.polygonFillOpacity;\n  fillSymbol.outline.color = Color.fromHex(settings.polygonOutlineColor);\n  fillSymbol.outline.color.a = settings.polygonOutlineOpacity;\n  fillSymbol.outline.width = settings.polygonOutlineWidth;\n};\n\nconst updateLineRenderer = (settings: any) => {\n  lineSymbol.color = Color.fromHex(settings.lineColor);\n  lineSymbol.color.a = settings.lineOutlineOpacity;\n  lineSymbol.width = settings.lineWidth;\n};\n\nconst updateTextRenderer = (settings: any) => {\n  textSymbol.color = Color.fromHex(settings.fontColor);\n  textSymbol.haloColor = Color.fromHex(settings.haloColor);\n  textSymbol.font.size = settings.fontSize;\n  // textSymbol.font.family = settings.fontFamily;\n  // textSymbol.font.weight = settings.fontWeight;\n  // textSymbol.font.style = settings.fontStyle;\n};\n\nexport const settingsChanged = (settings: any, geometryType: string): void => {\n  if (geometryType === 'point') {\n    updatePointRenderer(settings);\n  }\n  if (geometryType === 'polygon') {\n    updatePolygonRenderer(settings);\n  }\n  if (geometryType === 'polyline') {\n    updateLineRenderer(settings);\n  }\n  if (geometryType === 'text') {\n    updateTextRenderer(settings);\n  }\n};\n\nconst addGraphic = (event: any) => {\n  if (event.state === 'complete') {\n    switch (event.tool) {\n      case 'point':\n        count++;\n        const elemental = document.querySelector('.sketchTools calcite-action[active]');\n        if (elemental?.getAttribute('text') == 'Point') {\n          pointLayer.remove(event.graphic);\n          const newPointGraphic = new Graphic({\n            geometry: event.graphic.geometry,\n            symbol: pointSymbol.clone(),\n            attributes: {\n              title: 'point map note #' + count,\n            },\n          });\n          pointLayer.add(newPointGraphic);\n        } else if (elemental?.getAttribute('text') == 'Text') {\n          count++;\n          textLayer.remove(event.graphic);\n          const newTextGraphic = new Graphic({\n            geometry: event.graphic.geometry,\n            symbol: textSymbol.clone(),\n            attributes: {\n              title: 'text map note #' + count,\n            },\n          });\n          textLayer.add(newTextGraphic);\n        } else {\n          console.log('point logic error occurred');\n          break;\n        }\n        break;\n\n      case 'polyline':\n        count++;\n        polylineLayer.remove(event.graphic);\n        const newPolylineGraphic = new Graphic({\n          geometry: event.graphic.geometry,\n          symbol: lineSymbol.clone(),\n          attributes: {\n            title: 'polyline map note #' + count,\n          },\n        });\n        polylineLayer.add(newPolylineGraphic);\n        break;\n\n      case 'polygon':\n        count++;\n        polygonLayer.remove(event.graphic);\n        const newPolygonGraphic = new Graphic({\n          geometry: event.graphic.geometry,\n          symbol: fillSymbol.clone(),\n          attributes: {\n            title: 'polygon map note #' + count,\n          },\n        });\n        polygonLayer.add(newPolygonGraphic);\n        break;\n\n      default:\n        console.log('geometry type not found: ', event);\n    }\n  }\n};\nexport const setupViewModels = (view: __esri.MapView): void => {\n  view.map.add(sketchLayer);\n  pointSketchViewModel = createSketchViewModels(pointLayer, view);\n  polylineSketchViewModel = createSketchViewModels(polylineLayer, view);\n  polygonSketchViewModel = createSketchViewModels(polygonLayer, view);\n  textSketchViewModel = createSketchViewModels(textLayer, view);\n};\nconst createSketchViewModels = (layer: __esri.GraphicsLayer, view: __esri.MapView): SketchViewModel => {\n  const sketchVM = new SketchViewModel({\n    view,\n    layer,\n    updateOnGraphicClick: true,\n    defaultCreateOptions: {\n      mode: 'hybrid',\n    },\n  });\n  sketchVM.on('create', addGraphic);\n  return sketchVM;\n};\n\nexport const textClicked = (): void => {\n  // Listen to update event to modify a graphic to view\n  textSketchViewModel?.on('update', function (event: any) {\n    const currentGraphic = event.graphics[0];\n    if (event.state === 'complete') {\n      currentGraphic.symbol = textSymbol.clone();\n    }\n  });\n};\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { SketchSettings } from './SketchSettings';\n\nimport './Sketch.scss';\nimport {\n  pointSketchViewModel,\n  polygonSketchViewModel,\n  polylineSketchViewModel,\n  settingsChanged,\n  setupViewModels,\n  textSketchViewModel,\n  textSymbol,\n} from './utils/notes';\nimport SketchViewModel from '@arcgis/core/widgets/Sketch/SketchViewModel';\nimport { getInitialSettings } from './utils/sketch';\nexport const Sketch = (props: any) => {\n  const ref = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLCalciteInputElement>(null);\n  const pointAction = useRef<HTMLCalciteActionElement>(null);\n  const lineAction = useRef<HTMLCalciteActionElement>(null);\n  const polygonAction = useRef<HTMLCalciteActionElement>(null);\n  const textAction = useRef<HTMLCalciteActionElement>(null);\n  const settings = useRef();\n  const [selectedGraphics, setSelectedGraphics] = useState<__esri.Graphic[]>([]);\n  const graphicsRef = useRef<any[]>([]);\n  const handles = useRef<any[]>([]);\n\n  const [geometryType, setGeometryType] = useState<string | null>(null);\n\n  const sketchCreated = (e: any) => {\n    if (e.state === 'cancel') {\n      toolSelected('');\n    }\n    if (e.state === 'complete') {\n      const action = [pointAction, lineAction, polygonAction, textAction].find((action) => {\n        return action.current?.active;\n      });\n      if (action?.current === pointAction.current) {\n        toolSelected('point');\n        //settingsChanged(settings.current, 'point');\n      }\n      if (action?.current === lineAction.current) {\n        toolSelected('polyline');\n        //settingsChanged(settings.current, 'polyline');\n      }\n      if (action?.current === polygonAction.current) {\n        toolSelected('polygon');\n        //settingsChanged(settings.current, 'polygon');\n      }\n      if (action?.current === textAction.current) {\n        toolSelected('text');\n        //settingsChanged(settings.current, 'text');\n      }\n      //setGeometryType(null);\n      // [pointAction, lineAction, polygonAction, textAction].forEach((action) => {\n      //   if (action.current) {\n      //     action.current.active = false;\n      //   }\n      // });\n      // const action = [pointAction, lineAction, polygonAction, textAction].find((action) => {\n      //   return action.current?.active;\n      // });\n      // if (action === pointAction.current)\n    }\n  };\n  // const stateChanged = (state: string) => {\n  //   if (state === 'ready' && ref.current?.parentElement?.hidden) {\n  //     [pointAction, lineAction, polygonAction, textAction].forEach((action) => {\n  //       if (action.current) {\n  //         action.current.active = false;\n  //         setGeometryType(null);\n  //       }\n  //     });\n  //   }\n  // };\n  const activateViewModel = (\n    geometryType: 'circle' | 'polygon' | 'polyline' | 'point' | 'multipoint' | 'rectangle',\n    vm: SketchViewModel,\n  ) => {\n    [textSketchViewModel, pointSketchViewModel, polylineSketchViewModel, polygonSketchViewModel].forEach((vm) => {\n      vm.cancel();\n    });\n    vm.create(geometryType);\n    props.toolActivated(vm);\n    //handles.current.push(vm?.watch('state', stateChanged));\n  };\n  const toolSelected = (geometryType: string) => {\n    let deactivateActions: React.RefObject<HTMLCalciteActionElement>[] = [];\n    if (geometryType === 'point') {\n      activateViewModel(geometryType, pointSketchViewModel);\n      deactivateActions = [polygonAction, lineAction, textAction];\n      if (pointAction.current) {\n        pointAction.current.active = true;\n      }\n    }\n    if (geometryType === 'polyline') {\n      activateViewModel(geometryType, polylineSketchViewModel);\n\n      deactivateActions = [pointAction, polygonAction, textAction];\n      if (lineAction.current) {\n        lineAction.current.active = true;\n      }\n    }\n    if (geometryType === 'polygon') {\n      activateViewModel(geometryType, polygonSketchViewModel);\n\n      deactivateActions = [pointAction, lineAction, textAction];\n      if (polygonAction.current) {\n        polygonAction.current.active = true;\n      }\n    }\n    if (geometryType === 'text') {\n      activateViewModel('point', textSketchViewModel);\n      deactivateActions = [pointAction, lineAction, polygonAction];\n      if (textAction.current) {\n        textAction.current.active = true;\n      }\n    }\n\n    if (geometryType === '') {\n      deactivateActions = [pointAction, lineAction, polygonAction, textAction];\n\n      deactivateActions.forEach((action) => {\n        if (action.current) {\n          action.current.active = false;\n        }\n      });\n    }\n    setGeometryType(geometryType);\n  };\n\n  const disableTool = (vm: SketchViewModel, action: HTMLCalciteActionElement) => {\n    vm.cancel();\n    setGeometryType(null);\n    action.active = false;\n    action.blur();\n    pointSketchViewModel.view.popup.autoOpenEnabled = true;\n  };\n\n  useEffect(() => {\n    setupViewModels(props.view);\n    settings.current = { ...getInitialSettings() };\n    [pointSketchViewModel, polylineSketchViewModel, polygonSketchViewModel, textSketchViewModel].forEach((sketchVM) => {\n      handles.current.push(sketchVM?.on('create', sketchCreated));\n      handles.current.push(sketchVM?.on('create', sketchCreated));\n      handles.current.push(\n        sketchVM?.watch('activeTool', (activeTool) => {\n          if (!activeTool) {\n            //setGeometryType(null);\n          }\n        }),\n      );\n\n      handles.current.push(\n        sketchVM?.on('update', (e) => {\n          if ((e.state === 'start' && graphicsRef.current.length === 0) || e.state === 'active') {\n            setSelectedGraphics([...e.graphics]);\n            graphicsRef.current = [...e.graphics];\n          }\n\n          if (e.state === 'complete') {\n            e.graphics.forEach((graphic: __esri.Graphic) => {\n              const i = graphicsRef.current.indexOf(graphic);\n              setSelectedGraphics([...selectedGraphics, ...selectedGraphics.slice(i)]);\n              graphicsRef.current = [...selectedGraphics, ...selectedGraphics.slice(i)];\n            });\n          }\n        }),\n      );\n    });\n    return () => {\n      handles.current.forEach((handle) => {\n        handle.remove();\n      });\n    };\n  }, []);\n\n  return (\n    <div className=\"panel\" ref={ref}>\n      <calcite-tooltip-manager>\n        <calcite-tooltip label=\"Tooltip label\" reference-element=\"pointAction\" placement=\"bottom\">\n          Select graphics\n        </calcite-tooltip>\n        <calcite-tooltip label=\"Tooltip label\" reference-element=\"pointAction\" placement=\"bottom\">\n          Sketch a point\n        </calcite-tooltip>\n        <calcite-tooltip label=\"Tooltip label\" reference-element=\"lineAction\" placement=\"bottom\">\n          Sketch a line\n        </calcite-tooltip>\n        <calcite-tooltip label=\"Tooltip label\" reference-element=\"polygonAction\" placement=\"bottom\">\n          Sketch a polygon\n        </calcite-tooltip>\n        <calcite-tooltip label=\"Tooltip label\" reference-element=\"textAction\" placement=\"bottom\">\n          Add text label\n        </calcite-tooltip>\n        <calcite-tooltip label=\"Tooltip label\" reference-element=\"clearAction\" placement=\"bottom\">\n          Clear all sketch graphics\n        </calcite-tooltip>\n        <div className=\"sketchTools\">\n          <calcite-action\n            text=\"Select\"\n            icon=\"cursor\"\n            id=\"selectAction\"\n            onClick={() => {\n              setGeometryType(null);\n              [pointAction, lineAction, polygonAction, textAction].forEach((action) => {\n                setGeometryType(null);\n                if (action.current) {\n                  action.current.active = false;\n                }\n              });\n              pointSketchViewModel?.cancel();\n              polylineSketchViewModel?.cancel();\n              polygonSketchViewModel?.cancel();\n              textSketchViewModel?.cancel();\n              pointSketchViewModel.view.popup.autoOpenEnabled = true;\n            }}\n          ></calcite-action>\n          <calcite-action\n            ref={pointAction}\n            text=\"Point\"\n            icon=\"pins\"\n            id=\"pointAction\"\n            onClick={(event: any) => {\n              if (event.target.active) {\n                disableTool(pointSketchViewModel, event.target);\n              } else {\n                toolSelected('point');\n              }\n            }}\n          ></calcite-action>\n          <calcite-action\n            ref={lineAction}\n            text=\"Line\"\n            icon=\"line\"\n            id=\"lineAction\"\n            onClick={(event: any) => {\n              if (event.target.active) {\n                disableTool(polylineSketchViewModel, event.target);\n              } else {\n                toolSelected('polyline');\n              }\n            }}\n          ></calcite-action>\n          <calcite-action\n            ref={polygonAction}\n            text=\"Polygon\"\n            icon=\"freehand-area\"\n            id=\"polygonAction\"\n            onClick={(event: any) => {\n              if (event.target.active) {\n                disableTool(polygonSketchViewModel, event.target);\n              } else {\n                toolSelected('polygon');\n              }\n            }}\n          ></calcite-action>\n          <calcite-action\n            ref={textAction}\n            text=\"Text\"\n            icon=\"speech-bubble\"\n            id=\"textAction\"\n            onClick={(event: any) => {\n              if (event.target.active) {\n                disableTool(polygonSketchViewModel, event.target);\n              } else {\n                toolSelected('text');\n              }\n            }}\n          ></calcite-action>\n          <calcite-action\n            text=\"Clear\"\n            icon=\"trash\"\n            id=\"clearAction\"\n            onClick={() => {\n              setGeometryType(null);\n              [pointAction, lineAction, polygonAction, textAction].forEach((action) => {\n                if (action.current) {\n                  action.current.active = false;\n                }\n              });\n\n              pointSketchViewModel?.layer.graphics.removeAll();\n              polylineSketchViewModel?.layer.graphics.removeAll();\n              polygonSketchViewModel?.layer.graphics.removeAll();\n              textSketchViewModel?.layer.graphics.removeAll();\n            }}\n          ></calcite-action>\n          <calcite-action\n            text=\"Undo\"\n            icon=\"undo\"\n            id=\"undoAction\"\n            onClick={() => {\n              if (pointAction.current?.active) {\n                pointSketchViewModel.undo();\n              }\n              if (lineAction.current?.active) {\n                polylineSketchViewModel.undo();\n              }\n              if (polygonAction.current?.active) {\n                polygonSketchViewModel.undo();\n              }\n              if (textAction.current?.active) {\n                textSketchViewModel.undo();\n              }\n            }}\n          ></calcite-action>\n        </div>\n      </calcite-tooltip-manager>\n\n      {selectedGraphics?.length > 0 && (\n        <calcite-action\n          icon=\"trash\"\n          text-enabled\n          text={`Delete ${selectedGraphics.length} selected graphic${selectedGraphics.length > 1 ? 's' : ''} `}\n          onClick={() => {\n            [pointSketchViewModel, polylineSketchViewModel, polygonSketchViewModel, textSketchViewModel].forEach(\n              (sketchVM) => {\n                sketchVM?.delete();\n                setSelectedGraphics([...[]]);\n              },\n            );\n          }}\n        ></calcite-action>\n      )}\n\n      {geometryType === 'text' && (\n        <calcite-label>\n          Text Label\n          <calcite-input\n            ref={inputRef}\n            id=\"labelInput\"\n            placeholder=\"Label\"\n            type=\"textarea\"\n            value={textSymbol.text}\n            onInput={(e: any) => {\n              textSymbol.text = e.target.value;\n            }}\n          ></calcite-input>\n        </calcite-label>\n      )}\n      <SketchSettings\n        settingsChanged={(settings: any) => {\n          if (geometryType) {\n            settingsChanged(settings, geometryType);\n            settings.current = { ...settings };\n          }\n        }}\n        geometryType={geometryType}\n      />\n    </div>\n  );\n};\nexport default Sketch;\n"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","id","module","exports","labelClass","LabelClass","labelExpressionInfo","expression","symbol","type","color","haloSize","haloColor","FeatureLayer","source","fields","name","objectIdField","geometryType","listMode","legendEnabled","renderer","labelingInfo","outline","GraphicsLayer","opacity","SketchSettings","props","setGeometryType","useState","ref","useRef","settings","pointSize","pointFillEnabled","pointFillColor","pointOutlineColor","pointFillOpacity","pointOutlineOpacity","pointOutlineWidth","lineOutlineOpacity","lineWidth","lineColor","polygonFillEnabled","polygonFillOpacity","polygonOutlineOpacity","polygonOutlineWidth","polygonOutlineColor","polygonFillColor","fontSize","fontFamily","fontWeight","fontStyle","fontColor","sliderChanged","event","attribute","target","getAttribute","current","parseFloat","value","requestAnimationFrame","settingsChanged","colorChanged","switchChanged","detail","switched","useEffect","querySelectorAll","forEach","element","addEventListener","slider","removeEventListener","picker","className","heading","open","collapsible","text","min","max","step","label","ticks","snap","layout","class","dir","alignment","status","scale","bind","tabindex","appearance","pointSketchViewModel","polylineSketchViewModel","polygonSketchViewModel","textSketchViewModel","count","pointSymbol","SimpleMarkerSymbol","size","Color","style","SimpleLineSymbol","width","lineSymbol","fillSymbol","SimpleFillSymbol","textSymbol","TextSymbol","font","family","sketchLayer","MapNotesLayer","pointLayer","polylineLayer","polygonLayer","textLayer","a","updatePointRenderer","updatePolygonRenderer","updateLineRenderer","updateTextRenderer","addGraphic","state","tool","elemental","document","querySelector","remove","graphic","newPointGraphic","Graphic","geometry","clone","attributes","title","add","console","log","newTextGraphic","newPolylineGraphic","newPolygonGraphic","createSketchViewModels","layer","view","sketchVM","SketchViewModel","updateOnGraphicClick","defaultCreateOptions","mode","on","Sketch","inputRef","pointAction","lineAction","polygonAction","textAction","selectedGraphics","setSelectedGraphics","graphicsRef","handles","sketchCreated","toolSelected","action","find","active","activateViewModel","vm","cancel","create","toolActivated","deactivateActions","disableTool","blur","popup","autoOpenEnabled","map","push","watch","activeTool","length","graphics","i","indexOf","slice","handle","placement","icon","onClick","undo","delete","placeholder","onInput"],"sourceRoot":""}