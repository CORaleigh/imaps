{"version":3,"file":"static/js/4402.5bef7b1b.chunk.js","mappings":"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","sources":["components/Panels/Layers/DevPlanFilter.tsx","components/Panels/Layers/utils/layers.tsx","components/Panels/Layers/utils/tips.ts","components/Panels/Layers/utils/useLayers.ts","components/Panels/Layers/Layers.tsx"],"sourcesContent":["import { CalciteSlider } from '@esri/calcite-components-react';\nimport React from 'react';\nimport { useEffect, useRef, useState } from 'react';\nimport './Layers.css';\ninterface Props {\n  datefield: string;\n  layer: __esri.FeatureLayer;\n}\nexport const DevPlanFilter = (props: Props) => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const loaded = useRef(false);\n  const [maxYear, setMaxYear] = useState<number>(0);\n  const [minYear, setMinYear] = useState<number>(0);\n\n  const getMinMax = async (layer: __esri.FeatureLayer, datefield: string) => {\n    const stats = await (props.layer as __esri.FeatureLayer).queryFeatures({\n      where: `EXTRACT(YEAR,${datefield}) >= 2010`,\n      returnGeometry: false,\n      outStatistics: [\n        {\n          statisticType: 'max',\n          onStatisticField: datefield,\n          outStatisticFieldName: 'MAX_DATE',\n        },\n        {\n          statisticType: 'min',\n          onStatisticField: datefield,\n          outStatisticFieldName: 'MIN_DATE',\n        },\n      ],\n      outFields: ['MAX_DATE', 'MIN_DATE'],\n    });\n\n    if (stats?.features.length) {\n      const max = new Date(stats.features[0].getAttribute('MAX_DATE')).getFullYear();\n      const min = new Date(stats.features[0].getAttribute('MIN_DATE')).getFullYear();\n      layer.definitionExpression = `EXTRACT(YEAR FROM ${props.datefield}) >= ${min}\n            AND EXTRACT(YEAR FROM ${props.datefield}) <= ${max}\n            `;\n      layer.refresh();\n      setMaxYear(max);\n      setMinYear(min);\n    }\n  };\n  useEffect(() => {\n    if (props.layer && props.datefield && !loaded.current) {\n      loaded.current = true;\n      getMinMax(props.layer, props.datefield);\n    }\n  }, []); // only after first render\n\n  return (\n    <div>\n      {/* <CalciteInputDatePicker overlay-positioning=\"fixed\" scale=\"m\" max={`2022-11-11`}\n        onCalciteInputDatePickerChange={e => {\n            console.log(e.detail);\n        }}\n        ></CalciteInputDatePicker> */}\n      <CalciteSlider\n        labelHandles\n        labelTicks\n        min={minYear}\n        max={maxYear}\n        maxValue={maxYear}\n        minValue={maxYear - 1}\n        minLabel={minYear.toString()}\n        maxLabel={maxYear.toString()}\n        onCalciteSliderChange={(e) => {\n          props.layer.definitionExpression = `EXTRACT(YEAR FROM ${props.datefield}) >= ${e.target.minValue}\n            AND EXTRACT(YEAR FROM ${props.datefield}) <= ${e.target.maxValue}\n            `;\n          props.layer.refresh();\n        }}\n      ></CalciteSlider>\n    </div>\n  );\n};\nexport default DevPlanFilter;\n","import MapView from '@arcgis/core/views/MapView';\nimport WebMap from '@arcgis/core/WebMap';\nimport Collection from '@arcgis/core/core/Collection';\nimport ActionToggle from '@arcgis/core/support/actions/ActionToggle';\nimport LayerList from '@arcgis/core/widgets/LayerList';\nimport { lazy, Suspense } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport FeatureLayer from '@arcgis/core/layers/FeatureLayer';\nimport DevPlanFilter from '../DevPlanFilter';\nimport { saveMap } from '../../../WebMap/utils/map';\nconst OpacitySlider = lazy(() => import('../OpacitySlider'));\n\nexport const initializeLayers = async (ref: HTMLDivElement, view: MapView): Promise<LayerList> => {\n\n  await addLayersFromWebmap(view);\n  const url = new URL(window.location as any);\n  if (url.searchParams.get('config')) {\n    if (url.searchParams.get('config') === 'puma') {\n      await addUtilitiesLayers(view, 'a07528d1d37542b79fade50370f2305f');\n    }\n  }\n  const layers = new LayerList({\n    view: view,\n    container: ref,\n    listItemCreatedFunction: layerListItemCreated,\n  });\n  layers.watch('selectedItems', () => {\n    saveMap(view);\n  });\n  layers.on('trigger-action', (event: __esri.LayerListTriggerActionEvent) => {\n    if (event.item.layer.title === 'Property') {\n      togglePropertyLabels(event);\n    }\n  });\n  return layers;\n};\n\nconst addUtilitiesLayers = async (view: MapView, id: string) => {\n  const map = new WebMap({\n    portalItem: {\n      id: 'a07528d1d37542b79fade50370f2305f',\n    },\n  });\n\n  await map.loadAll().catch((error) => {\n    console.log(error);\n  }).then(async () => {\n    if (map.layers.length) {\n      const group = view.map.layers.find(layer => {\n        return layer.id === map.layers.getItemAt(0)?.id;\n      });\n      if (group) {\n        await (map.layers.getItemAt(0) as __esri.GroupLayer).load();\n        const match = map.allLayers.find((layer) => {\n          return layer.type === 'group' && layer.title === group.title;\n        }) as __esri.GroupLayer;\n        if (match) {\n          const matchlayers = match.layers.slice();\n          const layers = match.layers.filter((layer) => {\n            const found = (group as __esri.GroupLayer).findLayerById(layer.id);\n            //attempting to update stored layer if updated in webmap (popup and renderer)\n            if (found !== undefined) {\n              if (found.type === 'feature') {\n                (found as __esri.FeatureLayer).popupTemplate = (layer as __esri.FeatureLayer).popupTemplate;\n                (found as __esri.FeatureLayer).renderer = (layer as __esri.FeatureLayer).renderer;\n              }\n            }\n      \n            return (group as __esri.GroupLayer).findLayerById(layer.id) === undefined;\n          });\n          (group as __esri.GroupLayer).addMany(layers.toArray());\n      \n          (group as __esri.GroupLayer).layers.forEach((layer1) => {\n            let index = matchlayers.findIndex((layer2) => {\n              return layer1.id === layer2.id;\n            });\n            (group as __esri.GroupLayer).reorder(layer1, index);\n          });\n          matchlayers.destroy();\n        }\n      } else {\n        view.map.addMany(map.layers.toArray());\n      }\n    }\n\n  })\n\n}\n\nconst addLayersFromWebmap = async (view: MapView) => {\n  const map = new WebMap({\n    portalItem: {\n      id: '95092428774c4b1fb6a3b6f5fed9fbc4',\n    },\n  });\n\n  await map.loadAll().catch(error => {\n    console.log(error);\n  }).then(() => {\n    const groups = view.map.allLayers\n    .filter((layer) => {\n      return layer.type === 'group';\n    })\n    .toArray();\n  groups.forEach((group) => {\n    const match = map.allLayers.find((layer) => {\n      return layer.type === 'group' && layer.title === group.title;\n    }) as __esri.GroupLayer;\n    if (match) {\n      const matchlayers = match.layers.slice();\n      const layers = match.layers.filter((layer) => {\n        const found = (group as __esri.GroupLayer).findLayerById(layer.id);\n        //attempting to update stored layer if updated in webmap (popup and renderer)\n        if (found !== undefined) {\n          if (found.type === 'feature') {\n            (found as __esri.FeatureLayer).popupTemplate = (layer as __esri.FeatureLayer).popupTemplate;\n            (found as __esri.FeatureLayer).renderer = (layer as __esri.FeatureLayer).renderer;\n          }\n        }\n  \n        return (group as __esri.GroupLayer).findLayerById(layer.id) === undefined;\n      });\n      (group as __esri.GroupLayer).addMany(layers.toArray());\n  \n      (group as __esri.GroupLayer).layers.forEach((layer1) => {\n        let index = matchlayers.findIndex((layer2) => {\n          return layer1.id === layer2.id;\n        });\n        (group as __esri.GroupLayer).reorder(layer1, index);\n      });\n      matchlayers.destroy();\n    }\n\n  });\n  return true;\n  });\n  \n};\nconst setPropertyColor = (layer: FeatureLayer, light: boolean) => {\n  const renderer = (layer.renderer as __esri.SimpleRenderer).clone();\n  if (light) {\n    (renderer.symbol as __esri.SimpleFillSymbol).outline.color.r = 0;\n    (renderer.symbol as __esri.SimpleFillSymbol).outline.color.g = 0;\n    (renderer.symbol as __esri.SimpleFillSymbol).outline.color.b = 0;\n  } else {\n    (renderer.symbol as __esri.SimpleFillSymbol).outline.color.r = 255;\n    (renderer.symbol as __esri.SimpleFillSymbol).outline.color.g = 255;\n    (renderer.symbol as __esri.SimpleFillSymbol).outline.color.b = 255;\n  }\n  layer.renderer = renderer;\n};\nconst togglePropertyColor = (layer: FeatureLayer, sections: any) => {\n  if (sections.length > 1) {\n    setPropertyColor(layer, !sections.getItemAt(1).getItemAt(0).value);\n  }\n};\nexport const togglePropertyLabels = (event: __esri.LayerListTriggerActionEvent) => {\n  if (event.item.layer.title === 'Property') {\n    togglePropertyColor(event.item.layer as FeatureLayer, event.item.actionsSections);\n    if (!(event.item.layer as __esri.FeatureLayer).labelsVisible) {\n      (event.item.layer as __esri.FeatureLayer).labelsVisible = true;\n    }\n    const selected = event.item.actionsSections.getItemAt(0).filter((section) => {\n      return (section as ActionToggle).value;\n    });\n\n    const selectedTitles = selected.map((section) => {\n      return (section as ActionToggle).title;\n    });\n\n    const selectedExpressions = propertyLabelExpressions.filter((expression) => {\n      return selectedTitles.includes(expression.title);\n    });\n    const expressions = selectedExpressions.map((expression) => {\n      return expression.expression;\n    });\n    const expression = expressions.join('+ TextFormatting.NewLine+');\n    (event.item.layer as __esri.FeatureLayer).labelingInfo = [];\n\n    //if ((event.action as ActionToggle).value) {\n    (event.item.layer as __esri.FeatureLayer).labelingInfo = [\n      {\n        // autocasts as new LabelClass()\n        symbol: {\n          type: 'text', // autocasts as new TextSymbol()\n          color: 'black',\n          haloColor: 'white',\n          haloSize: 1,\n          font: {\n            family: 'AvenirNext LT Pro Regular',\n            style: 'normal',\n            weight: 'bold',\n          },\n        },\n        labelExpressionInfo: {\n          expression: expression,\n        },\n        maxScale: 0,\n        minScale: 5000,\n      } as any,\n    ];\n    // }\n    // } else {\n    //   (event.item.layer as __esri.FeatureLayer).labelingInfo = (\n    //     event.item.layer as __esri.FeatureLayer\n    //   ).labelingInfo.filter((info) => {\n    //     return info.labelExpressionInfo.expression != expression.expression;\n    //   });\n    // }\n  }\n};\nconst propertyLabelExpressions: any[] = [\n  {\n    expression: `First(Split($feature['SITE_ADDRESS'], ' '))`,\n    title: 'Address',\n  },\n  {\n    expression: `$feature['PIN_NUM']`,\n    title: 'PIN',\n  },\n  {\n    expression: `$feature['REID']`,\n    title: 'REID',\n  },\n  {\n    expression: `When(IsEmpty($feature[\"SALE_DATE\"]),null, Concatenate(Month($feature[\"SALE_DATE\"])+1, '/',Day($feature[\"SALE_DATE\"]), '/',Year($feature[\"SALE_DATE\"])))`,\n    title: 'Sale Date',\n  },\n  {\n    expression: `Text($feature.TOTSALPRICE,'$#,###')`,\n    title: 'Sale Price',\n  },\n];\n\nconst addPropertyLabelToggles = (item: any) => {\n  if (item.layer.title === 'Property' && item.layer.type !== 'group' && item.actionsSections.length === 0) {\n    let toggles: Collection = new Collection();\n    toggles.addMany(\n      propertyLabelExpressions.map((expression) => {\n        return new ActionToggle({\n          value: item.layer.labelingInfo?.find((info: any) => {\n            return info.labelExpressionInfo?.expression.includes(expression.expression) && item.layer.labelsVisible;\n          }),\n          title: expression.title,\n          visible: true,\n        });\n      }),\n    );\n    (item as __esri.ListItem).actionsSections.push(toggles);\n\n    toggles = new Collection();\n    toggles.add(\n      new ActionToggle({\n        value: item.layer.renderer.symbol.outline.color.isBright,\n        title: 'Light Outline',\n        visible: true,\n      }) as any,\n    );\n    (item as __esri.ListItem).actionsSections.push(toggles);\n\n    (item as __esri.ListItem).actionsOpen = true;\n    setTimeout(() => {\n      const title = document.createElement('h4');\n      title.id = 'labels-actions-title';\n      title.textContent = 'Labels';\n      title.setAttribute('style', 'padding: 0.5em;margin: 0;');\n      const actions = document.querySelector('.esri-layer-list__item-actions');\n      if (actions?.parentElement && !document.getElementById('labels-actions-title')) {\n        actions.prepend(title);\n      }\n    }, 500);\n  }\n};\n\nconst addDevPlanFilters = (item: any) => {\n  if (\n    item.layer.title.includes('Development Plans') &&\n    item.layer.type !== 'group' &&\n    item.actionsSections.length === 0\n  ) {\n    const filter = document.createElement('filter-container');\n    const root = createRoot(filter as HTMLDivElement);\n    root.render(\n      <Suspense fallback={''}>\n        <DevPlanFilter datefield={'apply_date'} layer={item.layer} />\n      </Suspense>,\n    );\n    ((item as __esri.ListItem).panel.content as any[]).push(filter);\n  }\n};\n\nconst createPanel = (item: __esri.ListItem) => {\n  if (item.visible && !item.panel && item.layer.type !== 'group' && item.layer.type !== undefined) {\n    const slider = document.createElement('slider-container');\n    const root = createRoot(slider as HTMLDivElement);\n    root.render(\n      <Suspense fallback={''}>\n        <OpacitySlider value={item.layer.opacity} layer={item.layer} />\n      </Suspense>,\n    );\n\n    item.panel = {\n      content: [slider, 'legend'],\n      open: false,\n    } as __esri.ListItemPanel;\n    addDevPlanFilters(item);\n  }\n};\n\nconst layerListItemCreated = (event: any): void => {\n  const item = event.item;\n  createPanel(item);\n  item.open = item.layer.visible;\n  item.layer.watch('visible', (visible: boolean) => {\n    // if (item.panel) {\n    //   item.panel.open = visible;\n    // }\n    item.open = visible;\n    createPanel(item);\n\n    if (visible) {\n      if (item.layer.parent) {\n        if (item.layer.parent.type === 'group') {\n          item.layer.parent.visible = true;\n        }\n      }\n      if (item.layer.parent.parent) {\n        if (item.layer.parent.parent.type === 'group') {\n          item.layer.parent.parent.visible = true;\n        }\n      }\n    }\n  });\n  addPropertyLabelToggles(item);\n};\n\nexport const filterLayers = (value: string, layerList: __esri.LayerList): void => {\n  if (!value) {\n    value = '';\n  }\n  layerList.operationalItems.forEach((item: __esri.ListItem) => {\n    if (item.layer.type === 'group') {\n      let open = false;\n      (item.layer as __esri.GroupLayer).layers.forEach((layer) => {\n        if (layer.title.toLowerCase().includes(value.toLowerCase())) {\n          layer.listMode = 'show';\n          open = true;\n        } else {\n          layer.listMode = 'hide';\n        }\n        //handle second level group layers\n        if (layer.type === 'group') {\n          (layer as __esri.GroupLayer).layers.forEach((sublayer) => {\n            if (sublayer.title.toLowerCase().includes(value.toLowerCase())) {\n              layer.listMode = 'show';\n              sublayer.listMode = 'show';\n              open = true;\n            } else {\n              sublayer.listMode = 'hide';\n            }\n          });\n        }\n      });\n      item.open = value.length > 0 && open;\n      if (!value.length || open) {\n        document\n          .getElementById(`${(layerList as any).id}_${(item as any).uid}__title`)\n          ?.parentElement?.parentElement?.parentElement?.removeAttribute('hidden');\n      }\n      if (!open) {\n        document\n          .getElementById(`${(layerList as any).id}_${(item as any).uid}__title`)\n          ?.parentElement?.parentElement?.parentElement?.setAttribute('hidden', '');\n      }\n    }\n  });\n};\n\nexport const resetLayers = (list: __esri.LayerList) => {\n  const groups: Collection<__esri.GroupLayer> = list?.view.map.allLayers.filter((layer) => {\n    return layer.type === 'group';\n  }) as Collection<__esri.GroupLayer>;\n  groups.forEach((group) => {\n    group.visible = group.title === 'Property';\n    group.layers.forEach((layer) => {\n      layer.visible = layer.title === 'Property';\n    });\n  });\n};\n","export const tips = {\n  title: \"Layer List Tips\",\n  tips: [\n    {\n      title: \"Group Layers\",\n      text: \"Layers in the layer list are now grouped based on category, making it easier to find layers.\",\n    },\n  ],\n};\n","import { useCallback, useEffect, useRef, useState } from \"react\";\nimport { PanelProps } from \"../../utils/PanelProps\";\nimport { initializeLayers } from \"./layers\";\nimport { tips } from \"./tips\";\n\nconst useLayers = (props: PanelProps) => {\n  const ref = useRef() as any;\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const loaded = useRef(false);\n  const [layerList, setLayerList] = useState<__esri.LayerList>();\n  const [isLoading, setIsLoading] = useState(true);\n  const [isActive, setIsActive] = useState(false);\n\n  useEffect(() => {\n    if (!loaded.current) {\n      loaded.current = true;\n      initializeLayers(ref.current, props.view).then(\n        (layerList: __esri.LayerList) => {\n          setLayerList(layerList);\n          layerList.when(() => {\n            setIsLoading(false);\n          });\n        }\n      );\n    }\n    return () => {\n      layerList && layerList?.destroy();\n    };\n  }, []); // only after first render\n\n  useEffect(() => {\n    setIsActive(props.isActive);\n  }, [props.isActive]);\n  const panelDismissed = useCallback((e: any) => {\n    props.panelDismissed();\n  }, []);\n  const tipsClicked = useCallback((e: any) => {\n    props.showTips(tips);\n  }, []);\n  return {\n    ref,\n    layerList,\n    isLoading,\n    isActive,\n    panelDismissed,\n    tipsClicked,\n  };\n};\nexport default useLayers;\n","import {\n  CalciteAction,\n  CalciteInput,\n  CalciteScrim,\n  CalcitePanel,\n  CalciteTooltip,\n} from \"@esri/calcite-components-react\";\nimport React from \"react\";\nimport { filterLayers, resetLayers } from \"./utils/layers\";\nimport \"./Layers.css\";\nimport useLayers from \"./utils/useLayers\";\nimport { PanelProps } from \"../utils/PanelProps\";\nexport const Layers = (props: PanelProps) => {\n  const { ref, layerList, isLoading, isActive, panelDismissed, tipsClicked } =\n    useLayers(props);\n\n  return (\n    <CalcitePanel\n      id=\"layers-panel\"\n      heading=\"Layers\"\n      hidden={!isActive}\n      closed={!isActive ? true : undefined}\n      closable\n      onCalcitePanelClose={panelDismissed}\n    >\n      <CalciteAction\n        id=\"tip\"\n        icon=\"lightbulb\"\n        text=\"Tips\"\n        slot=\"header-actions-end\"\n        onClick={tipsClicked}\n      ></CalciteAction>\n      <CalciteTooltip label=\"Show Tip\" referenceElement=\"tip\" closeOnClick>\n        Show Tip\n      </CalciteTooltip>\n      <div className=\"layers\">\n        {layerList && (\n          <div className=\"row sticky\">\n            <CalciteInput\n              clearable\n              placeholder=\"Filter by layer name\"\n              scale=\"m\"\n              onCalciteInputInput={(e) => {\n                if (layerList) {\n                  filterLayers(e.target.value, layerList);\n                }\n              }}\n            ></CalciteInput>\n            <CalciteAction\n              text=\"clear\"\n              icon=\"viewHide\"\n              scale=\"s\"\n              onClick={() => resetLayers(layerList)}\n            ></CalciteAction>\n          </div>\n        )}\n        <div ref={ref}></div>\n        <CalciteScrim\n          loading\n          hidden={isLoading ? undefined : true}\n        ></CalciteScrim>\n      </div>\n    </CalcitePanel>\n  );\n};\nexport default Layers;\n"],"names":["props","loaded","useRef","maxYear","setMaxYear","useState","minYear","setMinYear","useEffect","layer","datefield","current","async","stats","queryFeatures","where","returnGeometry","outStatistics","statisticType","onStatisticField","outStatisticFieldName","outFields","features","length","max","Date","getAttribute","getFullYear","min","definitionExpression","refresh","getMinMax","labelHandles","labelTicks","maxValue","minValue","minLabel","toString","maxLabel","onCalciteSliderChange","e","target","OpacitySlider","lazy","addUtilitiesLayers","view","id","map","WebMap","portalItem","loadAll","catch","error","console","log","then","layers","group","find","getItemAt","load","match","allLayers","type","title","matchlayers","slice","filter","found","findLayerById","undefined","popupTemplate","renderer","addMany","toArray","forEach","layer1","index","findIndex","layer2","reorder","destroy","addLayersFromWebmap","togglePropertyLabels","event","item","sections","actionsSections","light","clone","symbol","outline","color","r","g","b","setPropertyColor","value","labelsVisible","selectedTitles","section","selectedExpressions","propertyLabelExpressions","expression","includes","expressions","join","labelingInfo","haloColor","haloSize","font","family","style","weight","labelExpressionInfo","maxScale","minScale","createPanel","visible","panel","slider","document","createElement","createRoot","render","Suspense","fallback","opacity","content","open","push","addDevPlanFilters","layerListItemCreated","watch","parent","toggles","Collection","ActionToggle","info","add","isBright","actionsOpen","setTimeout","textContent","setAttribute","actions","querySelector","parentElement","getElementById","prepend","addPropertyLabelToggles","tips","text","ref","layerList","setLayerList","isLoading","setIsLoading","isActive","setIsActive","url","URL","window","location","searchParams","get","LayerList","container","listItemCreatedFunction","saveMap","on","initializeLayers","when","panelDismissed","useCallback","tipsClicked","showTips","Layers","useLayers","heading","hidden","closed","closable","onCalcitePanelClose","icon","slot","onClick","label","referenceElement","closeOnClick","className","clearable","placeholder","scale","onCalciteInputInput","operationalItems","toLowerCase","listMode","sublayer","uid","removeAttribute","filterLayers","list","loading"],"sourceRoot":""}