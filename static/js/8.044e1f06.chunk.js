(this.webpackJsonpimaps=this.webpackJsonpimaps||[]).push([[8],{373:function(e,t,n){"use strict";function a(){return new Float32Array(4)}function i(e){var t=new Float32Array(4);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}function o(e,t,n,a){var i=new Float32Array(4);return i[0]=e,i[1]=t,i[2]=n,i[3]=a,i}function r(){return a()}function l(){return o(1,1,1,1)}function s(){return o(1,0,0,0)}function c(){return o(0,1,0,0)}function u(){return o(0,0,1,0)}function f(){return o(0,0,0,1)}n.d(t,"a",(function(){return i})),n.d(t,"b",(function(){return a})),n.d(t,"c",(function(){return o}));var v=r(),d=l(),m=s(),_=c(),p=u(),g=f();Object.freeze({__proto__:null,create:a,clone:i,fromValues:o,createView:function(e,t){return new Float32Array(e,t,4)},zeros:r,ones:l,unitX:s,unitY:c,unitZ:u,unitW:f,ZEROS:v,ONES:d,UNIT_X:m,UNIT_Y:_,UNIT_Z:p,UNIT_W:g})},399:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return s})),n.d(t,"c",(function(){return c})),n.d(t,"d",(function(){return l}));Number.POSITIVE_INFINITY;var a=Math.PI,i=128/a,o=1/Math.LN2;function r(e,t){return(e%=t)>=0?e:e+t}function l(e){return r(e*i,256)}function s(e){return r(.7111111111111111*e,256)}function c(e){return Math.log(e)*o}function u(e,t,n){return e>=t&&e<=n||e>=n&&e<=t}},510:function(e,t,n){"use strict";var a=n(91),i=(n(80),n(89)),o=n(127),r=n(492),l=n(636),s=n(81),c=n(93),u=n(326),f=n(415),v=n(178),d=n(168),m=n(202),_=n(536),p=n(135),g=n(325),x=n(164),h=s.a.getLogger("esri.views.2d.engine.webgl.Mesh2D"),b=(e,t,n,a)=>{for(var i=0,o=1;o<n;o++){var r=e[2*(t+o-1)],l=e[2*(t+o-1)+1];i+=(e[2*(t+o)]-r)*(e[2*(t+o)+1]+l)}return a?i>0:i<0},y=({coords:e,lengths:t},n)=>{for(var a=[],i=0,o=0;i<t.length;o+=t[i],i+=1){for(var r=o,l=[];i<t.length-1&&b(e,o+t[i],t[i+1],n);o+=t[i+=1])l.push(o+t[i]-r);var s=e.slice(2*r,2*(o+t[i])),c=Object(_.b)(s,l,2);for(var u of c)a.push(u+r)}return a};class S{constructor(e,t,n,a=!1){this._cache={},this.vertices=e,this.indices=t,this.primitiveType=n,this.isMapSpace=a}static fromRect({x:e,y:t,width:n,height:a}){var i=e,o=t,r=i+n,l=o+a;return S.fromScreenExtent({xmin:i,ymin:o,xmax:r,ymax:l})}static fromPath(e){for(var t=Object(d.f)(new v.a,e.path,!1,!1),n=t.coords,a=new Uint32Array(y(t,!0)),i=new Uint32Array(n.length/2),o=0;o<i.length;o++)i[o]=Object(x.a)(Math.floor(n[2*o]),Math.floor(n[2*o+1]));return new S({geometry:i},a,4)}static fromGeometry(e,t){var n=t.geometry.type;switch(n){case"polygon":return S.fromPolygon(e,t.geometry);case"extent":return S.fromMapExtent(e,t.geometry);default:return h.error(new c.a("mapview-bad-type","Unable to create a mesh from type ".concat(n),t)),S.fromRect({x:0,y:0,width:1,height:1})}}static fromPolygon(e,t){for(var n=Object(d.g)(new v.a,t,!1,!1),a=n.coords,i=new Uint32Array(y(n,!1)),o=new Uint32Array(a.length/2),r=Object(m.a)(),l=Object(m.a)(),s=0;s<o.length;s++)Object(p.r)(r,a[2*s],a[2*s+1]),e.toScreen(l,r),o[s]=Object(x.a)(Math.floor(l[0]),Math.floor(l[1]));return new S({geometry:o},i,4,!0)}static fromScreenExtent({xmin:e,xmax:t,ymin:n,ymax:a}){var i={geometry:new Uint32Array([Object(x.a)(e,n),Object(x.a)(t,n),Object(x.a)(e,a),Object(x.a)(e,a),Object(x.a)(t,n),Object(x.a)(t,a)])},o=new Uint32Array([0,1,2,3,4,5]);return new S(i,o,4)}static fromMapExtent(e,t){var[n,a]=e.toScreen([0,0],[t.xmin,t.ymin]),[i,o]=e.toScreen([0,0],[t.xmax,t.ymax]),r={geometry:new Uint32Array([Object(x.a)(n,a),Object(x.a)(i,a),Object(x.a)(n,o),Object(x.a)(n,o),Object(x.a)(i,a),Object(x.a)(i,o)])},l=new Uint32Array([0,1,2,3,4,5]);return new S(r,l,4)}destroy(){for(var e in Object(i.k)(this._cache.indexBuffer)&&this._cache.indexBuffer.dispose(),this._cache.vertexBuffers)Object(i.k)(this._cache.vertexBuffers[e])&&this._cache.vertexBuffers[e].dispose()}get elementType(){return(e=>{switch(e.BYTES_PER_ELEMENT){case 1:return 5121;case 2:return 5123;case 4:return 5125;default:throw new c.a("Cannot get DataType of array")}})(this.indices)}getIndexBuffer(e,t=35044){return this._cache.indexBuffer||(this._cache.indexBuffer=g.a.createIndex(e,t,this.indices)),this._cache.indexBuffer}getVertexBuffers(e,t=35044){return this._cache.vertexBuffers||(this._cache.vertexBuffers=Object.keys(this.vertices).reduce(((n,i)=>Object(a.a)(Object(a.a)({},n),{},{[i]:g.a.createVertex(e,t,this.vertices[i])})),{})),this._cache.vertexBuffers}}var C=S,T=s.a.getLogger("esri.views.2d.engine.webgl.ClippingInfo"),O=e=>parseFloat(e)/100;class z extends f.a{constructor(e,t){super(),this._clip=t,this._cache={},this.stage=e,this._handle=t.watch("version",(()=>this._invalidate())),this.ready()}static fromClipArea(e,t){return new z(e,t)}_destroyGL(){Object(i.k)(this._cache.mesh)&&(this._cache.mesh.destroy(),this._cache.mesh=null),Object(i.k)(this._cache.vao)&&(this._cache.vao.dispose(),this._cache.vao=null)}destroy(){this._destroyGL(),this._handle.remove()}getVAO(e,t,n,a){var[o,r]=t.size;if("geometry"!==this._clip.type&&this._lastWidth===o&&this._lastHeight===r||(this._lastWidth=o,this._lastHeight=r,this._destroyGL()),Object(i.j)(this._cache.vao)){var l=this._createMesh(t,this._clip),s=l.getIndexBuffer(e),c=l.getVertexBuffers(e);this._cache.mesh=l,this._cache.vao=new u.a(e,n,a,c,s)}return this._cache.vao}_invalidate(){this._destroyGL(),this.requestRender()}_createScreenRect(e,t){var[n,a]=e.size,i="string"==typeof t.left?O(t.left)*n:t.left,o="string"==typeof t.right?O(t.right)*n:t.right,r="string"==typeof t.top?O(t.top)*a:t.top,l="string"==typeof t.bottom?O(t.bottom)*a:t.bottom,s=i,c=r;return{x:s,y:c,width:Math.max(n-o-s,0),height:Math.max(a-l-c,0)}}_createMesh(e,t){switch(t.type){case"rect":return C.fromRect(this._createScreenRect(e,t));case"path":return C.fromPath(t);case"geometry":return C.fromGeometry(e,t);default:return T.error(new c.a("mapview-bad-type","Unable to create ClippingInfo mesh from clip of type: ${clip.type}")),C.fromRect({x:0,y:0,width:1,height:1})}}}var V=z;class D extends r.a{constructor(){super(...arguments),this.name=this.constructor.name}set clips(e){this._clips=e,this.children.forEach((t=>t.clips=e)),this._updateClippingInfo()}doRender(e){var t=this.createRenderParams(e),{painter:n,globalOpacity:a,profiler:i,drawPhase:r}=t,l=r===o.c.LABEL?1:a*this.computedOpacity;i.recordContainerStart(this.name),n.beforeRenderLayer(t,this._clippingInfos?255:0,l),this.updateTransforms(e.state),this.renderChildren(t),n.compositeLayer(t,l),i.recordContainerEnd()}renderChildren(e){for(var t of(Object(i.j)(this._renderPasses)&&(this._renderPasses=this.prepareRenderPasses(e.painter)),this.children))t.beforeRender(e);for(var n of this._renderPasses)try{n.render(e)}catch(o){}for(var a of this.children)a.afterRender(e)}createRenderParams(e){return Object(a.a)(Object(a.a)({},e),{},{requireFBO:this.requiresDedicatedFBO})}prepareRenderPasses(e){return[e.registerRenderPass({name:"clip",brushes:[l.a.clip],target:()=>this._clippingInfos,drawPhase:o.c.MAP|o.c.LABEL|o.c.LABEL_ALPHA|o.c.DEBUG|o.c.HIGHLIGHT})]}updateTransforms(e){for(var t of this.children)t.setTransform(e)}onAttach(){super.onAttach(),this._updateClippingInfo()}onDetach(){super.onDetach(),this._updateClippingInfo()}_updateClippingInfo(){if(Object(i.k)(this._clippingInfos)&&(this._clippingInfos.forEach((e=>e.destroy())),this._clippingInfos=null),this.stage){var e=this._clips;Object(i.k)(e)&&e.length&&(this._clippingInfos=e.items.map((e=>V.fromClipArea(this.stage,e)))),this.requestRender()}}}t.a=D},536:function(e,t,n){"use strict";function a(e,t,n){var a,o,l,s,c,u=t&&t.length,f=u?t[0]*n:e.length,d=i(e,0,f,n,!0),m=new Array;if(!d||d.next===d.prev)return m;if(u&&(d=v(e,t,d,n)),e.length>80*n){a=l=e[0],o=s=e[1];for(var _=n;_<f;_+=n){var p=e[_],g=e[_+1];a=Math.min(a,p),o=Math.min(o,g),l=Math.max(l,p),s=Math.max(s,g)}c=0!==(c=Math.max(l-a,s-o))?1/c:0}return r(d,m,n,a,o,c),m}function i(e,t,n,a,i){var o;if(i===x(e,t,n,a)>0)for(var r=t;r<n;r+=a)o=c(r,e[r],e[r+1],o);else for(var l=n-a;l>=t;l-=a)o=c(l,e[l],e[l+1],o);return o&&S(o,o.next)&&(u(o),o=o.next),o}function o(e,t=e){if(!e)return e;var n,a=e;do{if(n=!1,a.steiner||!S(a,a.next)&&0!==p(a.prev,a,a.next))a=a.next;else{if(u(a),(a=t=a.prev)===a.next)break;n=!0}}while(n||a!==t);return t}function r(e,t,n,a,i,c,f=0){if(e){!f&&c&&(e=m(e,a,i,c));for(var v=e;e.prev!==e.next;){var d=e.prev,_=e.next;if(c?s(e,a,i,c):l(e))t.push(d.index/n),t.push(e.index/n),t.push(_.index/n),u(e),e=_.next,v=_.next;else if((e=_)===v){f?1===f?r(e=T(e,t,n),t,n,a,i,c,2):2===f&&O(e,t,n,a,i,c):r(o(e),t,n,a,i,c,1);break}}}}function l(e){var t=e.prev,n=e,a=e.next;if(p(t,n,a)>=0)return!1;for(var i=e.next.next,o=i,r=0;i!==e.prev&&(0===r||i!==o);){if(r++,h(t.x,t.y,n.x,n.y,a.x,a.y,i.x,i.y)&&p(i.prev,i,i.next)>=0)return!1;i=i.next}return!0}function s(e,t,n,a){var i=e.prev,o=e,r=e.next;if(p(i,o,r)>=0)return!1;for(var l=i.x<o.x?i.x<r.x?i.x:r.x:o.x<r.x?o.x:r.x,s=i.y<o.y?i.y<r.y?i.y:r.y:o.y<r.y?o.y:r.y,c=i.x>o.x?i.x>r.x?i.x:r.x:o.x>r.x?o.x:r.x,u=i.y>o.y?i.y>r.y?i.y:r.y:o.y>r.y?o.y:r.y,f=y(l,s,t,n,a),v=y(c,u,t,n,a),d=e.prevZ,m=e.nextZ;d&&d.z>=f&&m&&m.z<=v;){if(d!==e.prev&&d!==e.next&&h(i.x,i.y,o.x,o.y,r.x,r.y,d.x,d.y)&&p(d.prev,d,d.next)>=0)return!1;if(d=d.prevZ,m!==e.prev&&m!==e.next&&h(i.x,i.y,o.x,o.y,r.x,r.y,m.x,m.y)&&p(m.prev,m,m.next)>=0)return!1;m=m.nextZ}for(;d&&d.z>=f;){if(d!==e.prev&&d!==e.next&&h(i.x,i.y,o.x,o.y,r.x,r.y,d.x,d.y)&&p(d.prev,d,d.next)>=0)return!1;d=d.prevZ}for(;m&&m.z<=v;){if(m!==e.prev&&m!==e.next&&h(i.x,i.y,o.x,o.y,r.x,r.y,m.x,m.y)&&p(m.prev,m,m.next)>=0)return!1;m=m.nextZ}return!0}function c(e,t,n,a){var i=new D(e,t,n);return a?(i.next=a.next,i.prev=a,a.next.prev=i,a.next=i):(i.prev=i,i.next=i),i}function u(e){e.next.prev=e.prev,e.prev.next=e.next,e.prevZ&&(e.prevZ.nextZ=e.nextZ),e.nextZ&&(e.nextZ.prevZ=e.prevZ)}function f(e){var t=e,n=e;do{(t.x<n.x||t.x===n.x&&t.y<n.y)&&(n=t),t=t.next}while(t!==e);return n}function v(e,t,n,a){for(var r=new Array,l=0,s=t.length;l<s;l++){var c=i(e,t[l]*a,l<s-1?t[l+1]*a:e.length,a,!1);c===c.next&&(c.steiner=!0),r.push(f(c))}for(var u of(r.sort(C),r))d(u,n),n=o(n,n.next);return n}function d(e,t){if(t=function(e,t){var n,a=t,i=e.x,o=e.y,r=-1/0;do{if(o<=a.y&&o>=a.next.y&&a.next.y!==a.y){var l=a.x+(o-a.y)*(a.next.x-a.x)/(a.next.y-a.y);if(l<=i&&l>r){if(r=l,l===i){if(o===a.y)return a;if(o===a.next.y)return a.next}n=a.x<a.next.x?a:a.next}}a=a.next}while(a!==t);if(!n)return null;if(i===r)return n.prev;var s,c=n,u=n.x,f=n.y,v=1/0;for(a=n.next;a!==c;)i>=a.x&&a.x>=u&&i!==a.x&&h(o<f?i:r,o,u,f,o<f?r:i,o,a.x,a.y)&&(((s=Math.abs(o-a.y)/(i-a.x))<v||s===v&&a.x>n.x)&&b(a,e)&&(n=a,v=s)),a=a.next;return n}(e,t)){var n=V(t,e);o(n,n.next)}}function m(e,t,n,a){for(var i;i!==e;i=i.next){if(null===(i=i||e).z&&(i.z=y(i.x,i.y,t,n,a)),i.prev.next!==i||i.next.prev!==i)return i.prev.next=i,i.next.prev=i,m(e,t,n,a);i.prevZ=i.prev,i.nextZ=i.next}return e.prevZ.nextZ=null,e.prevZ=null,function(e){for(var t,n=1;;){var a=void 0,i=e;e=null,t=null;for(var o=0;i;){o++,a=i;for(var r=0;r<n&&a;r++)a=a.nextZ;for(var l=n;r>0||l>0&&a;){var s=void 0;0===r?(s=a,a=a.nextZ,l--):0!==l&&a?i.z<=a.z?(s=i,i=i.nextZ,r--):(s=a,a=a.nextZ,l--):(s=i,i=i.nextZ,r--),t?t.nextZ=s:e=s,s.prevZ=t,t=s}i=a}if(t.nextZ=null,n*=2,o<2)return e}}(e)}function _(e,t,n,a){var i=t&&t.length,o=i?t[0]*n:e.length,r=Math.abs(x(e,0,o,n));if(i)for(var l=0,s=t.length;l<s;l++){var c=t[l]*n,u=l<s-1?t[l+1]*n:e.length;r-=Math.abs(x(e,c,u,n))}for(var f=0,v=0;v<a.length;v+=3){var d=a[v]*n,m=a[v+1]*n,_=a[v+2]*n;f+=Math.abs((e[d]-e[_])*(e[m+1]-e[d+1])-(e[d]-e[m])*(e[_+1]-e[d+1]))}return 0===r&&0===f?0:Math.abs((f-r)/r)}function p(e,t,n){return(t.y-e.y)*(n.x-t.x)-(t.x-e.x)*(n.y-t.y)}function g(e,t,n,a){return!!(S(e,t)&&S(n,a)||S(e,a)&&S(n,t))||p(e,t,n)>0!=p(e,t,a)>0&&p(n,a,e)>0!=p(n,a,t)>0}function x(e,t,n,a){for(var i=0,o=t,r=n-a;o<n;o+=a)i+=(e[r]-e[o])*(e[o+1]+e[r+1]),r=o;return i}function h(e,t,n,a,i,o,r,l){return(i-r)*(t-l)-(e-r)*(o-l)>=0&&(e-r)*(a-l)-(n-r)*(t-l)>=0&&(n-r)*(o-l)-(i-r)*(a-l)>=0}function b(e,t){return p(e.prev,e,e.next)<0?p(e,t,e.next)>=0&&p(e,e.prev,t)>=0:p(e,t,e.prev)<0||p(e,e.next,t)<0}function y(e,t,n,a,i){return(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=32767*(e-n)*i)|e<<8))|e<<4))|e<<2))|e<<1))|(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=32767*(t-a)*i)|t<<8))|t<<4))|t<<2))|t<<1))<<1}function S(e,t){return e.x===t.x&&e.y===t.y}function C(e,t){return e.x-t.x}function T(e,t,n){var a=e;do{var i=a.prev,o=a.next.next;!S(i,o)&&g(i,a,a.next,o)&&b(i,o)&&b(o,i)&&(t.push(i.index/n),t.push(a.index/n),t.push(o.index/n),u(a),u(a.next),a=e=o),a=a.next}while(a!==e);return a}function O(e,t,n,a,i,l){var s=e;do{for(var c=s.next.next;c!==s.prev;){if(s.index!==c.index&&z(s,c)){var u=V(s,c);return s=o(s,s.next),u=o(u,u.next),r(s,t,n,a,i,l),void r(u,t,n,a,i,l)}c=c.next}s=s.next}while(s!==e)}function z(e,t){return e.next.index!==t.index&&e.prev.index!==t.index&&!function(e,t){var n=e;do{if(n.index!==e.index&&n.next.index!==e.index&&n.index!==t.index&&n.next.index!==t.index&&g(n,n.next,e,t))return!0;n=n.next}while(n!==e);return!1}(e,t)&&b(e,t)&&b(t,e)&&function(e,t){var n=e,a=!1,i=(e.x+t.x)/2,o=(e.y+t.y)/2;do{n.y>o!=n.next.y>o&&n.next.y!==n.y&&i<(n.next.x-n.x)*(o-n.y)/(n.next.y-n.y)+n.x&&(a=!a),n=n.next}while(n!==e);return a}(e,t)}function V(e,t){var n=new D(e.index,e.x,e.y),a=new D(t.index,t.x,t.y),i=e.next,o=t.prev;return e.next=t,t.prev=e,n.next=i,i.prev=n,a.next=n,n.prev=a,o.next=a,a.prev=o,a}n.d(t,"a",(function(){return _})),n.d(t,"b",(function(){return a}));class D{constructor(e,t,n){this.index=e,this.x=t,this.y=n,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}}},587:function(e,t,n){"use strict";n.d(t,"a",(function(){return o})),n.d(t,"b",(function(){return i}));var a=n(286);function i(e){var t="";for(var n in e){var a=e[n];if("boolean"==typeof a)a&&(t+="#define ".concat(n,"\n"));else if("number"==typeof a)t+="#define ".concat(n," ").concat(a.toFixed(),"\n");else if("object"==typeof a){var i=a.options,o=0;for(var r in i)t+="#define ".concat(i[r]," ").concat((o++).toFixed(),"\n");t+="#define ".concat(n," ").concat(i[a.value],"\n")}}return t}function o(e,t,n,i){n=n||{},i=i||"";var o="function"==typeof t.shaders?t.shaders(n):t.shaders;return new a.a(e,i+o.vertexShader,i+o.fragmentShader,t.attributes)}},588:function(e,t,n){"use strict";n(80),n(110);var a=n(373),i=(n(208),n(325)),o=n(326),r=(n(192),n(587)),l=n(649),s=n(956);class c extends l.a{constructor(){super(...arguments),this._color=Object(a.c)(1,0,0,1),this._initialized=!1}dispose(){this._solidProgram&&(this._solidProgram.dispose(),this._solidProgram=null),this._solidVertexArrayObject&&(this._solidVertexArrayObject.dispose(),this._solidVertexArrayObject=null)}prepareState({context:e},t){e.setDepthWriteEnabled(!1),e.setDepthTestEnabled(!1),e.setStencilTestEnabled(!0),e.setBlendingEnabled(!1),e.setColorMask(!1,!1,!1,!1),e.setStencilOp(7680,7680,7681),e.setStencilWriteMask(255),e.setStencilFunctionSeparate(1032,516,t.stencilRef,255)}draw(e,t){var{context:n}=e;this._initialized||this._initialize(n),n.bindVAO(this._solidVertexArrayObject),n.bindProgram(this._solidProgram),this._solidProgram.setUniformMatrix3fv("u_dvsMat3",t.transforms.dvs),this._solidProgram.setUniform2fv("u_coord_range",t.coordRange),this._solidProgram.setUniform1f("u_depth",0),this._solidProgram.setUniform4fv("u_color",this._color),n.drawArrays(5,0,4),n.bindVAO()}_initialize(e){if(this._initialized)return!0;var t=Object(r.a)(e,s.a);if(!t)return!1;var n=new Int8Array([0,0,1,0,0,1,1,1]),a=i.a.createVertex(e,35044,n),l=new o.a(e,s.a.attributes,{geometry:[{name:"a_pos",count:2,type:5120,offset:0,stride:2,normalized:!1,divisor:0}]},{geometry:a});return this._solidProgram=t,this._solidVertexArrayObject=l,this._initialized=!0,!0}}t.a=c},593:function(e,t,n){"use strict";n(80);var a=n(373),i=(n(208),n(325)),o=n(205),r=n(326),l=(n(192),n(587)),s=n(649),c=n(956),u=n(725),f={shaders:{vertexShader:Object(u.a)("tileInfo/tileInfo.vert"),fragmentShader:Object(u.a)("tileInfo/tileInfo.frag")},attributes:{a_pos:0}},v=300;class d extends s.a{constructor(){super(...arguments),this._color=Object(a.c)(1,0,0,1)}dispose(){this._outlineProgram&&(this._outlineProgram.dispose(),this._outlineProgram=null),this._tileInfoProgram&&(this._tileInfoProgram.dispose(),this._tileInfoProgram=null),this._outlineVertexArrayObject&&(this._outlineVertexArrayObject.dispose(),this._outlineVertexArrayObject=null),this._tileInfoVertexArrayObject&&(this._tileInfoVertexArrayObject.dispose(),this._tileInfoVertexArrayObject=null),this._canvas=null}prepareState({context:e}){e.setBlendingEnabled(!0),e.setBlendFunctionSeparate(1,771,1,771),e.setColorMask(!0,!0,!0,!0),e.setStencilWriteMask(0),e.setStencilTestEnabled(!1)}draw(e,t){var{context:n}=e;if(t.isReady){this._loadWGLResources(n),n.bindVAO(this._outlineVertexArrayObject),n.bindProgram(this._outlineProgram),this._outlineProgram.setUniformMatrix3fv("u_dvsMat3",t.transforms.dvs),this._outlineProgram.setUniform2f("u_coord_range",t.coordRange[0],t.coordRange[1]),this._outlineProgram.setUniform1f("u_depth",0),this._outlineProgram.setUniform4fv("u_color",this._color),n.drawArrays(3,0,4),n.bindVAO();var a=this._getTexture(n,t);a&&(n.bindVAO(this._tileInfoVertexArrayObject),n.bindProgram(this._tileInfoProgram),n.bindTexture(a,0),this._tileInfoProgram.setUniformMatrix3fv("u_dvsMat3",t.transforms.dvs),this._tileInfoProgram.setUniform1f("u_depth",0),this._tileInfoProgram.setUniform2f("u_coord_ratio",t.coordRange[0]/t.size[0],t.coordRange[1]/t.size[1]),this._tileInfoProgram.setUniform2f("u_delta",8,8),this._tileInfoProgram.setUniform2f("u_dimensions",a.descriptor.width,a.descriptor.height),n.drawArrays(5,0,4),n.bindVAO())}}_loadWGLResources(e){if(!this._outlineProgram||!this._tileInfoProgram){var t=Object(l.a)(e,c.a),n=Object(l.a)(e,f),a={geometry:[{name:"a_pos",count:2,type:5120,offset:0,stride:2,normalized:!1,divisor:0}]},o=new Int8Array([0,0,1,0,1,1,0,1]),s=i.a.createVertex(e,35044,o),u=new r.a(e,c.a.attributes,a,{geometry:s}),v=new Int8Array([0,0,1,0,0,1,1,1]),d=i.a.createVertex(e,35044,v),m=new r.a(e,f.attributes,a,{geometry:d});this._outlineProgram=t,this._tileInfoProgram=n,this._outlineVertexArrayObject=u,this._tileInfoVertexArrayObject=m}}_getTexture(e,t){if(t.texture&&t.triangleCountReportedInDebug===t.triangleCount)return t.texture;t.triangleCountReportedInDebug=t.triangleCount,this._canvas||(this._canvas=document.createElement("canvas"),this._canvas.setAttribute("id","canvas2d"),this._canvas.setAttribute("width","".concat(v)),this._canvas.setAttribute("height","".concat(32)),this._canvas.setAttribute("style","display:none"));var n=t.triangleCount,a=t.key.id;t.triangleCount>0&&(a+=", ".concat(n));var i=this._canvas,r=i.getContext("2d");return r.font="24px sans-serif",r.textAlign="left",r.textBaseline="top",r.clearRect(0,0,v,32),n>1e5?(r.fillStyle="red",r.fillRect(0,0,v,32),r.fillStyle="black"):(r.clearRect(0,0,v,32),r.fillStyle="blue"),r.fillText(a,0,0),t.texture=new o.a(e,{target:3553,pixelFormat:6408,dataType:5121,samplingMode:9728,wrapMode:33071},i),t.texture}}t.a=d},636:function(e,t,n){"use strict";n.d(t,"a",(function(){return Z}));var a=n(122),i=n(693),o=n(649),r={nearest:{defines:[],samplingMode:9728,mips:!1},bilinear:{defines:[],samplingMode:9729,mips:!1},bicubic:{defines:["bicubic"],samplingMode:9729,mips:!1},trilinear:{defines:[],samplingMode:9987,mips:!0}};class l extends o.a{constructor(){super(...arguments),this._desc={vsPath:"raster/bitmap",fsPath:"raster/bitmap",attributes:{a_position:0,a_texcoord:1}}}dispose(){this._quad&&this._quad.dispose()}prepareState({context:e},t){e.setBlendingEnabled(!0),"additive"===t.blendFunction?e.setBlendFunctionSeparate(1,1,1,1):e.setBlendFunctionSeparate(1,771,1,771),e.setColorMask(!0,!0,!0,!0),e.setStencilWriteMask(0),e.setStencilTestEnabled(!0),e.setStencilFunction(514,t.stencilRef,255)}draw(e,t){var{context:n,renderingOptions:o,painter:l}=e;if(t.source){e.timeline.begin(this.name),this._quad||(this._quad=new i.a(n,[0,0,1,0,0,1,1,1]));var s=((e,t,n)=>{if("dynamic"===n.samplingMode){var{state:a}=e,i=t.resolution/t.pixelRatio/a.resolution,o=Math.round(e.pixelRatio)!==e.pixelRatio,l=i>1.05||i<.95;return a.rotation||l||o||t.isSourceScaled||t.rotation?r.bilinear:r.nearest}return r[n.samplingMode]})(e,t,o),c=l.materialManager.getProgram(e,this._desc,s.defines),{coordScale:u,computedOpacity:f,transforms:v}=t;t.setSamplingProfile(s),t.bind(e,a.v),n.bindProgram(c),c.setUniformMatrix3fv("u_dvsMat3",v.dvs),c.setUniform1i("u_texture",a.v),c.setUniform2fv("u_coordScale",u),c.setUniform1f("u_opacity",f),this._quad.draw(),e.timeline.end(this.name)}}}var s=l,c=n(373),u=n(587),f=n(151),v=n(956);class d extends o.a{constructor(){super(...arguments),this._color=Object(c.c)(0,1,0,1)}dispose(){this._program&&this._program.dispose()}prepareState({context:e}){e.setStencilTestEnabled(!0),e.setBlendingEnabled(!1),e.setFaceCullingEnabled(!1),e.setColorMask(!1,!1,!1,!1),e.setStencilOp(7680,7680,7681),e.setStencilWriteMask(255),e.setStencilFunction(519,0,255)}draw(e,t){var{context:n,state:a}=e;this._program||(this._program=Object(u.a)(n,v.a));var i=this._program,o=Object(f.f)("clip",{geometry:[{location:0,name:"a_pos",count:2,type:5122}]}),r=t.getVAO(n,a,o.attributes,o.bufferLayouts);n.bindProgram(this._program),i.setUniform2fv("u_coord_range",[1,1]),i.setUniform4fv("u_color",this._color),i.setUniformMatrix3fv("u_dvsMat3",a.displayMat3),n.bindVAO(r),n.drawElements(4,r.indexBuffer.size,5125,0),n.bindVAO()}}var m=d,_=n(593),p=n(588),g=(n(80),n(110),n(395)),x=(n(208),n(325)),h=n(326),b=(n(192),n(164)),y=n(127);class S extends o.a{constructor(){super(...arguments),this._color=Object(c.c)(1,0,0,1),this._patternMatrix=Object(g.b)(),this._programOptions={id:!1,pattern:!1}}dispose(){this._vao&&(this._vao.dispose(),this._vao=null)}drawMany(e,t){var{context:n,painter:i,styleLayerUID:o}=e;this._loadWGLResources(e);var r,l=e.displayLevel,s=e.styleLayer,c=s.backgroundMaterial,u=i.vectorTilesMaterialManager,f=s.getPaintValue("background-color",l),v=s.getPaintValue("background-opacity",l),d=s.getPaintValue("background-pattern",l),m=void 0!==d,_=f[3]*v,p=1|window.devicePixelRatio,g=e.spriteMosaic,x=p>a.F?2:1,h=e.drawPhase===y.c.HITTEST,S=this._programOptions;S.id=h,S.pattern=m;var C=u.getMaterialProgram(n,c,S);if(n.bindVAO(this._vao),n.bindProgram(C),m){if(!(r=g.getMosaicItemPosition(d,!0)))return;C.setUniform1f("u_opacity",v),C.setUniform2f("u_pattern_tl",r.tl[0],r.tl[1]),C.setUniform2f("u_pattern_br",r.br[0],r.br[1]),C.setUniform1i("u_texture",a.H),g.bind(n,9729,r.page,a.H)}else this._color[0]=_*f[0],this._color[1]=_*f[1],this._color[2]=_*f[2],this._color[3]=_,C.setUniform4fv("u_color",this._color);if(C.setUniform1f("u_depth",s.z||0),h){var T=Object(b.c)(o+1);C.setUniform4fv("u_id",T)}for(var O of t){if(C.setUniform1f("u_coord_range",O.coordRange[0]),C.setUniformMatrix3fv("u_dvsMat3",O.transforms.dvs),m){var z=Math.max(Math.pow(2,Math.round(l)-O.key.level),1),V=x*O.size[0]*z,D=V/r.size[0],I=V/r.size[1];this._patternMatrix[0]=D,this._patternMatrix[4]=I,C.setUniformMatrix3fv("u_pattern_matrix",this._patternMatrix)}n.setStencilFunction(514,O.stencilRef,255),n.drawArrays(5,0,4)}}_loadWGLResources(e){if(!this._vao){var{context:t,styleLayer:n}=e,a=n.backgroundMaterial,i=new Int8Array([0,0,1,0,0,1,1,1]),o=x.a.createVertex(t,35044,i),r=new h.a(t,a.getAttributeLocations(),a.getLayoutInfo(),{geometry:o});this._vao=r}}}var C=n(89);class T extends o.a{constructor(){super(...arguments),this._programOptions={id:!1}}dispose(){}drawMany(e,t){var{context:n,displayLevel:a,requiredLevel:i,state:o,drawPhase:r,painter:l,styleLayerUID:s}=e,c=e.styleLayer,u=c.circleMaterial,f=l.vectorTilesMaterialManager,v=c.getPaintValue("circle-translate",a),d=c.getPaintValue("circle-translate-anchor",a),m=r===y.c.HITTEST,_=this._programOptions;_.id=m;var p=f.getMaterialProgram(n,u,_);n.bindProgram(p),p.setUniformMatrix3fv("u_displayMat3",1===d?o.displayMat3:o.displayViewMat3),p.setUniform2fv("u_circleTranslation",v),p.setUniform1f("u_depth",c.z),p.setUniform1f("u_antialiasingWidth",1.2);var g=-1;if(m){var x=Object(b.c)(s+1);p.setUniform4fv("u_id",x)}for(var h of t)if(h.layerData.has(s)){h.key.level!==g&&(g=h.key.level,u.setDataUniforms(p,a,c,g));var S=h.layerData.get(s);S.prepareForRendering(n);var T=S.circleVertexArrayObject;Object(C.j)(T)||(n.bindVAO(T),p.setUniformMatrix3fv("u_dvsMat3",h.transforms.dvs),i!==h.key.level?n.setStencilFunction(514,h.stencilRef,255):n.setStencilFunction(516,255,255),n.drawElements(4,S.circleIndexCount,5125,Uint32Array.BYTES_PER_ELEMENT*S.circleIndexStart),h.triangleCount+=S.circleIndexCount/3)}}}var O=1/65536;class z extends o.a{constructor(){super(...arguments),this._fillProgramOptions={id:!1,pattern:!1},this._outlineProgramOptions={id:!1},this._patternMatrix=Object(g.b)()}dispose(){}drawMany(e,t){var{displayLevel:n,drawPhase:a,renderPass:i,styleLayerUID:o}=e,r=e.styleLayer,l=r.getPaintValue("fill-pattern",n),s=void 0!==l,c=!s&&r.getPaintValue("fill-antialias",n),u=!0,f=1;if(!s){var v=r.getPaintProperty("fill-color"),d=r.getPaintProperty("fill-opacity");if(!(null!=v&&v.isDataDriven||null!=d&&d.isDataDriven)){var m=r.getPaintValue("fill-color",n);(f=r.getPaintValue("fill-opacity",n)*m[3])>=1&&(u=!1)}}if(!u||"opaque"!==i){var _;a===y.c.HITTEST&&(_=Object(b.c)(o+1));var p=r.getPaintValue("fill-translate",n),g=r.getPaintValue("fill-translate-anchor",n);(u||"translucent"!==i)&&this._drawFill(e,o,r,t,p,g,l,_);var x=!r.hasDataDrivenOutlineColor&&r.outlineUsesFillColor&&f<1;c&&"opaque"!==i&&!x&&this._drawOutline(e,o,r,t,p,g,_)}}_drawFill(e,t,n,i,o,r,l,s){var c,{context:u,displayLevel:f,state:v,drawPhase:d,painter:m,pixelRatio:_,spriteMosaic:p}=e,g=n.fillMaterial,x=m.vectorTilesMaterialManager,h=void 0!==l,b=_>a.F?2:1,S=d===y.c.HITTEST,T=this._fillProgramOptions;T.id=S,T.pattern=h;var z=x.getMaterialProgram(u,g,T);if(u.bindProgram(z),h){if(!(c=p.getMosaicItemPosition(l,!0)))return void u.bindProgram();z.setUniform2f("u_pattern_tl",c.tl[0],c.tl[1]),z.setUniform2f("u_pattern_br",c.br[0],c.br[1]),z.setUniform1i("u_texture",a.H),p.bind(u,9729,c.page,a.H)}z.setUniformMatrix3fv("u_displayMat3",1===r?v.displayMat3:v.displayViewMat3),z.setUniform2fv("u_fillTranslation",o),z.setUniform1f("u_depth",n.z+O),S&&z.setUniform4fv("u_id",s);var V=-1;for(var D of i)if(D.layerData.has(t)){D.key.level!==V&&(V=D.key.level,g.setDataUniforms(z,f,n,V));var I=D.layerData.get(t);I.prepareForRendering(u);var P=I.fillVertexArrayObject;if(!Object(C.j)(P)){if(u.bindVAO(P),z.setUniformMatrix3fv("u_dvsMat3",D.transforms.dvs),h){var M=Math.max(Math.pow(2,Math.round(f)-D.key.level),1),A=D.coordRange[0]/(b*D.size[0]*M),w=1/(c.size[0]*A),F=1/(c.size[1]*A);this._patternMatrix[0]=w,this._patternMatrix[4]=F,z.setUniformMatrix3fv("u_pattern_matrix",this._patternMatrix)}u.setStencilFunction(514,D.stencilRef,255),u.drawElements(4,I.fillIndexCount,5125,Uint32Array.BYTES_PER_ELEMENT*I.fillIndexStart),D.triangleCount+=I.fillIndexCount/3}}}_drawOutline(e,t,n,a,i,o,r){var{context:l,displayLevel:s,state:c,drawPhase:u,painter:f,pixelRatio:v}=e,d=n.outlineMaterial,m=f.vectorTilesMaterialManager,_=.75/v,p=u===y.c.HITTEST,g=this._outlineProgramOptions;g.id=p;var x=m.getMaterialProgram(l,d,g);l.bindProgram(x),x.setUniformMatrix3fv("u_displayMat3",1===o?c.displayMat3:c.displayViewMat3),x.setUniform2fv("u_fillTranslation",i),x.setUniform1f("u_depth",n.z+O),x.setUniform1f("u_outline_width",_),p&&x.setUniform4fv("u_id",r);var h=-1;for(var b of a)if(b.layerData.has(t)){b.key.level!==h&&(h=b.key.level,d.setDataUniforms(x,s,n,h));var S=b.layerData.get(t);S.prepareForRendering(l);var T=S.outlineVertexArrayObject;Object(C.j)(T)||(l.bindVAO(T),x.setUniformMatrix3fv("u_dvsMat3",b.transforms.dvs),l.setStencilFunction(514,b.stencilRef,255),l.drawElements(4,S.outlineIndexCount,5125,Uint32Array.BYTES_PER_ELEMENT*S.outlineIndexStart),b.triangleCount+=S.outlineIndexCount/3)}}}var V=n(238);class D extends o.a{constructor(){super(...arguments),this._dashArray=Object(V.a)(),this._programOptions={id:!1,pattern:!1}}dispose(){}drawMany(e,t){var{context:n,displayLevel:i,state:o,drawPhase:r,painter:l,styleLayerUID:s}=e,c=e.styleLayer,u=c.lineMaterial,f=l.vectorTilesMaterialManager,v=c.getPaintValue("line-translate",i),d=c.getPaintValue("line-translate-anchor",i),m=c.getPaintValue("line-pattern",i),_=void 0!==m,p=1/e.pixelRatio,g=r===y.c.HITTEST,x=this._programOptions;x.id=g,x.pattern=_;var h=f.getMaterialProgram(n,u,x);if(n.bindProgram(h),h.setUniformMatrix3fv("u_displayViewMat3",o.displayViewMat3),h.setUniformMatrix3fv("u_displayMat3",1===d?o.displayMat3:o.displayViewMat3),h.setUniform2fv("u_lineTranslation",v),h.setUniform1f("u_depth",c.z),h.setUniform1f("u_antialiasing",p),g){var S=Object(b.c)(s+1);h.setUniform4fv("u_id",S)}if(_){var T=e.spriteMosaic,O=T.getMosaicItemPosition(m,!0);O&&(T.bind(n,9729,O.page,a.H),h.setUniform2f("u_pattern_tl",O.tl[0],O.br[1]),h.setUniform2f("u_pattern_br",O.br[0],O.tl[1]),h.setUniform2f("u_spriteSize",8*O.size[0],O.size[1]),h.setUniform1i("u_texture",a.H))}else{var z=c.getPaintValue("line-dasharray",i);z.length<2&&(z=[1,-1]);this._dashArray[0]=8*z[0],this._dashArray[1]=8*z[1],h.setUniform2fv("u_dasharray",this._dashArray)}var V=-1;for(var D of t)if(D.layerData.has(s)){D.key.level!==V&&(V=D.key.level,u.setDataUniforms(h,i,c,V));var I=D.layerData.get(s);I.prepareForRendering(n);var P=I.lineVertexArrayObject;Object(C.j)(P)||(n.bindVAO(P),h.setUniformMatrix3fv("u_dvsMat3",D.transforms.dvs),n.setStencilFunction(514,D.stencilRef,255),n.drawElements(4,I.lineIndexCount,5125,Uint32Array.BYTES_PER_ELEMENT*I.lineIndexStart),D.triangleCount+=I.lineIndexCount/3)}}}var I=n(683),P=n(399);class M extends o.a{constructor(){super(...arguments),this._iconProgramOptions={id:!1,sdf:!1},this._sdfProgramOptions={id:!1},this._spritesTextureSize=Object(V.a)()}dispose(){}drawMany(e,t){var n,{drawPhase:a,styleLayerUID:i}=e,o=e.styleLayer;a===y.c.HITTEST&&(n=Object(b.c)(i+1)),this._drawIcons(e,o,t,n),this._drawText(e,o,t,n)}_drawIcons(e,t,n,i){var o,{context:r,displayLevel:l,drawPhase:s,painter:c,state:u,styleLayerUID:f}=e,v=t.iconMaterial,d=c.vectorTilesMaterialManager,m=!1;for(var _ of n)if(_.layerData.has(f)&&(o=_.layerData.get(f)).iconPerPageElementsMap.size>0){m=!0;break}if(m){var p=t.getPaintValue("icon-translate",l),g=t.getPaintValue("icon-translate-anchor",l),x=t.getLayoutValue("icon-rotation-alignment",l);2===x&&(x=0===t.getLayoutValue("symbol-placement",l)?1:0);var h=0===x,b=t.getLayoutValue("icon-keep-upright",l)&&h,S=o.isIconSDF,T=s===y.c.HITTEST,O=this._iconProgramOptions;O.id=T,O.sdf=S;var z=d.getMaterialProgram(r,v,O);r.bindProgram(z),z.setUniformMatrix3fv("u_displayViewMat3",0===x?u.displayViewMat3:u.displayMat3),z.setUniformMatrix3fv("u_displayMat3",1===g?u.displayMat3:u.displayViewMat3),z.setUniform2fv("u_iconTranslation",p),z.setUniform1f("u_depth",t.z),z.setUniform1f("u_mapRotation",Object(P.b)(u.rotation)),z.setUniform1f("u_keepUpright",b?1:0),z.setUniform1f("u_level",10*l),z.setUniform1i("u_texture",a.H),z.setUniform1f("u_fadeDuration",I.d/1e3),T&&z.setUniform4fv("u_id",i);var V=-1;for(var D of n)if(D.layerData.has(f)&&(D.key.level!==V&&(V=D.key.level,v.setDataUniforms(z,l,t,V)),0!==(o=D.layerData.get(f)).iconPerPageElementsMap.size)){o.prepareForRendering(r),o.updateOpacityInfo();var M=o.iconVertexArrayObject;if(!Object(C.j)(M))for(var[A,w]of(r.bindVAO(M),z.setUniformMatrix3fv("u_dvsMat3",D.transforms.dvs),z.setUniform1f("u_time",(performance.now()-o.lastOpacityUpdate)/1e3),o.iconPerPageElementsMap))this._renderIconRange(e,z,w,A,D)}}}_renderIconRange(e,t,n,i,o){var{context:r,spriteMosaic:l}=e;this._spritesTextureSize[0]=l.getWidth(i)/4,this._spritesTextureSize[1]=l.getHeight(i)/4,t.setUniform2fv("u_mosaicSize",this._spritesTextureSize),l.bind(r,9729,i,a.H),r.setStencilTestEnabled(!0),r.setStencilFunction(516,255,255),r.setStencilWriteMask(0),r.drawElements(4,n[1],5125,Uint32Array.BYTES_PER_ELEMENT*n[0]),o.triangleCount+=n[1]/3}_drawText(e,t,n,i){var o,r=this,{context:l,displayLevel:s,drawPhase:c,glyphMosaic:u,painter:f,pixelRatio:v,state:d,styleLayerUID:m}=e,_=t.textMaterial,p=f.vectorTilesMaterialManager,g=!1;for(var x of n)if(x.layerData.has(m)&&(o=x.layerData.get(m)).glyphPerPageElementsMap.size>0){g=!0;break}if(g){var h=t.getPaintProperty("text-opacity");if(!h||h.isDataDriven||0!==h.getValue(s)){var b=t.getPaintProperty("text-color"),S=!b||b.isDataDriven||b.getValue(s)[3]>0,T=t.getPaintProperty("text-halo-width"),O=t.getPaintProperty("text-halo-color"),z=(!T||T.isDataDriven||T.getValue(s)>0)&&(!O||O.isDataDriven||O.getValue(s)[3]>0);if(S||z){var D=t.getLayoutValue("text-rotation-alignment",s);2===D&&(D=0===t.getLayoutValue("symbol-placement",s)?1:0);var M=0===D,A=t.getLayoutValue("text-keep-upright",s)&&M,w=c===y.c.HITTEST,F=.8*3/v;this._glyphTextureSize||(this._glyphTextureSize=Object(V.b)(u.width/4,u.height/4));var E=t.getPaintValue("text-translate",s),U=t.getPaintValue("text-translate-anchor",s),L=this._sdfProgramOptions;L.id=w;var R=p.getMaterialProgram(l,_,L);l.bindProgram(R),R.setUniformMatrix3fv("u_displayViewMat3",0===D?d.displayViewMat3:d.displayMat3),R.setUniformMatrix3fv("u_displayMat3",1===U?d.displayMat3:d.displayViewMat3),R.setUniform2fv("u_textTranslation",E),R.setUniform1f("u_depth",t.z+152587890625e-16),R.setUniform2fv("u_mosaicSize",this._glyphTextureSize),R.setUniform1f("u_mapRotation",Object(P.b)(d.rotation)),R.setUniform1f("u_keepUpright",A?1:0),R.setUniform1f("u_level",10*s),R.setUniform1i("u_texture",a.G),R.setUniform1f("u_antialiasingWidth",F),R.setUniform1f("u_fadeDuration",I.d/1e3),w&&R.setUniform4fv("u_id",i);var N=-1,G=function(e){if(!e.layerData.has(m))return"continue";if(e.key.level!==N&&(N=e.key.level,_.setDataUniforms(R,s,t,N)),0===(o=e.layerData.get(m)).glyphPerPageElementsMap.size)return"continue";o.prepareForRendering(l),o.updateOpacityInfo();var n=o.textVertexArrayObject;if(Object(C.j)(n))return"continue";l.bindVAO(n),R.setUniformMatrix3fv("u_dvsMat3",e.transforms.dvs),l.setStencilTestEnabled(!0),l.setStencilFunction(516,255,255),l.setStencilWriteMask(0);var a=(performance.now()-o.lastOpacityUpdate)/1e3;R.setUniform1f("u_time",a),o.glyphPerPageElementsMap.forEach(((t,n)=>{r._renderGlyphRange(l,t,n,u,R,z,S,e)}))};for(var j of n)G(j)}}}}_renderGlyphRange(e,t,n,i,o,r,l,s){i.bind(e,9729,n,a.G),r&&(o.setUniform1f("u_halo",1),e.drawElements(4,t[1],5125,Uint32Array.BYTES_PER_ELEMENT*t[0]),s.triangleCount+=t[1]/3),l&&(o.setUniform1f("u_halo",0),e.drawElements(4,t[1],5125,Uint32Array.BYTES_PER_ELEMENT*t[0]),s.triangleCount+=t[1]/3)}}var A=n(526),w=(n(263),n(205)),F=n(156);class E extends o.a{prepareState({context:e},t,n){var a=n&&-1!==n.indexOf("id");e.setBlendingEnabled(!a),e.setBlendFunctionSeparate(1,771,1,771),e.setColorMask(!0,!0,!0,!0),e.setStencilWriteMask(0),e.setStencilTestEnabled(!0),e.setStencilFunction(514,t.stencilRef,255)}draw(e,t,n){var a=this.getGeometryType();t.commit(e);var i=t.getGeometry(a);Object(C.j)(i)||(e.timeline.begin(this.name),e.attributeView.bindTextures(e.context),i.forEachCommand((a=>this.drawGeometry(e,t,a,n))))}_setSharedUniforms(e,t,n){e.setUniform1f("u_pixelRatio",t.pixelRatio),e.setUniformMatrix3fv("u_dvsMat3",n.transforms.dvs),e.setUniformMatrix3fv("u_displayViewMat3",t.state.displayViewMat3),e.setUniform1i("u_attributeTextureSize",t.attributeView.size),e.setUniform1i("u_attributeData0",a.r),e.setUniform1i("u_attributeData1",a.s),e.setUniform1i("u_attributeData2",a.t),e.setUniform1i("u_attributeData3",a.u)}}var U=E;var L=class extends U{constructor(){super(...arguments),this._dotTextureSize=0,this._dotTextures=null,this._dotSamplers=new Int32Array([a.z,a.A])}dispose(){this._disposeTextures()}getGeometryType(){return y.d.FILL}drawGeometry(e,t,n,i){var{context:o,painter:r,rendererInfo:l,requiredLevel:s}=e,c=F.a.load(n.materialKey),{bufferLayouts:u,attributes:v}=(e=>Object(f.f)(e.data,{geometry:[{location:0,name:"a_pos",count:2,type:5122},{location:1,name:"a_id",count:4,type:5121},...e.dotDensity?[]:[{location:2,name:"a_color",count:4,type:5121,normalized:!0},{location:3,name:"a_tlbr",count:4,type:5123},{location:4,name:"a_aux1",count:4,type:5121},{location:5,name:"a_aux2",count:2,type:5123},{location:6,name:"a_aux3",count:4,type:5121}],...e.dotDensity?[{location:2,name:"a_inverseArea",count:1,type:5126}]:[]]}))(c),d=r.materialManager.getMaterialProgram(e,c,"materials/fill",v,i);if(o.bindProgram(d),this._setSharedUniforms(d,e,t),c.textureBinding){r.textureManager.bindTextures(o,d,c);var m=1/Math.pow(2,s-t.key.level)/e.pixelRatio;d.setUniform1f("u_zoomFactor",m)}if(c.vvColor&&(d.setUniform1fv("u_vvColorValues",l.vvColorValues),d.setUniform4fv("u_vvColors",l.vvColors)),c.vvOpacity&&(d.setUniform1fv("u_vvOpacityValues",l.vvOpacityValues),d.setUniform1fv("u_vvOpacities",l.vvOpacities)),c.dotDensity){var _=a.E/l.ddDotSize,p=_*window.devicePixelRatio*_*window.devicePixelRatio,g=1/Math.pow(2,s-t.key.level),x=1/g*(1/g),h=l.ddDotScale?e.state.scale/l.ddDotScale:1;d.setUniform1f("u_tileZoomFactor",g),d.setUniform1f("u_tileDotsOverArea",p/(a.E*window.devicePixelRatio*a.E*window.devicePixelRatio)),d.setUniformMatrix4fv("u_dotColors",l.ddColors),d.setUniform4fv("u_isActive",l.ddActiveDots),d.setUniform4fv("u_dotBackgroundColor",l.ddBackgroundColor),d.setUniform1f("u_dotValue",Math.max(1,l.ddDotValue*h*x)),this._bindDotDensityTextures(o,d,l,_)}n.draw(o,u,v)}_disposeTextures(){if(this._dotTextures){for(var e=0;e<this._dotTextures.length;e++)this._dotTextures[e].dispose();this._dotTextures=null}}_bindDotDensityTextures(e,t,n,a){var i=this._createDotDensityTextures(e,a,n.ddSeed);t.setUniform1iv("u_dotTextures",this._dotSamplers);for(var o=0;o<i.length;o++)e.bindTexture(i[o],this._dotSamplers[o])}_createDotDensityTextures(e,t,n){if(this._dotTextureSize===t&&this._seed===n||(this._disposeTextures(),this._dotTextureSize=t,this._seed=n),null===this._dotTextures){var a=new A.a(n);this._dotTextures=[this._allocDotDensityTexture(e,t,a),this._allocDotDensityTexture(e,t,a)]}return this._dotTextures}_allocDotDensityTexture(e,t,n){for(var a=new Float32Array(t*t*4),i=0;i<a.length;i++)a[i]=n.getFloat();return new w.a(e,{wrapMode:10497,pixelFormat:6408,dataType:5126,samplingMode:9728,width:t,height:t},a)}};var R=class extends U{dispose(){}getGeometryType(){return y.d.LABEL}drawGeometry(e,t,n,a){var{context:i,painter:o,state:r,rendererInfo:l}=e,s=F.b.load(n.materialKey),c=s.mapAligned?1:0;if(c||!(Math.abs(t.key.level-Math.round(100*e.displayLevel)/100)>=1)){var{bufferLayouts:u,attributes:v}=(e=>Object(f.f)(e.data,{geometry:[{location:0,name:"a_pos",count:2,type:5122},{location:1,name:"a_id",count:4,type:5121},{location:2,name:"a_color",count:4,type:5121,normalized:!0},{location:3,name:"a_haloColor",count:4,type:5121,normalized:!0},{location:4,name:"a_texAndSize",count:4,type:5121},{location:5,name:"a_refSymbolAndPlacementOffset",count:4,type:5121},{location:6,name:"a_glyphData",count:4,type:5121},{location:7,name:"a_vertexOffset",count:2,type:5122},{location:8,name:"a_texCoords",count:2,type:5123}]}))(s),d=o.materialManager.getMaterialProgram(e,s,"materials/label",v,a);e.context.setStencilFunction(514,0,255),i.bindProgram(d),this._setSharedUniforms(d,e,t),o.textureManager.bindTextures(i,d,s);var m=1===c?r.displayViewMat3:r.displayMat3;if(s.vvSizeMinMaxValue&&d.setUniform4fv("u_vvSizeMinMaxValue",l.vvSizeMinMaxValue),s.vvSizeScaleStops&&d.setUniform1f("u_vvSizeScaleStopsValue",l.vvSizeScaleStopsValue),s.vvSizeFieldStops){var _=l.getSizeVVFieldStops(t.key.level);d.setUniform1fv("u_vvSizeFieldStopsValues",_.values),d.setUniform1fv("u_vvSizeFieldStopsSizes",_.sizes)}s.vvSizeUnitValue&&d.setUniform1f("u_vvSizeUnitValueWorldToPixelsRatio",l.vvSizeUnitValueToPixelsRatio),d.setUniform1f("u_mapRotation",Math.floor(r.rotation/360*254)),d.setUniform1f("u_mapAligned",c),d.setUniformMatrix3fv("u_displayMat3",m),d.setUniform1f("u_opacity",1),d.setUniform1f("u_zoomLevel",Math.round(10*e.displayLevel)),d.setUniform2fv("u_screenSize",e.state.size),d.setUniform1f("u_isHalo",1),n.draw(i,u,v),d.setUniform1f("u_isHalo",0),n.draw(i,u,v),i.setStencilTestEnabled(!0),i.setBlendingEnabled(!0)}}};var N=class extends U{dispose(){}getGeometryType(){return y.d.LINE}drawGeometry(e,t,n,a){var{context:i,painter:o,rendererInfo:r,requiredLevel:l}=e,s=F.c.load(n.materialKey),{bufferLayouts:c,attributes:u}=(e=>Object(f.f)(e.data,{geometry:[{location:0,name:"a_pos",count:2,type:5122},{location:1,name:"a_id",count:4,type:5121},{location:2,name:"a_color",count:4,type:5121,normalized:!0},{location:3,name:"a_offsetAndNormal",count:4,type:5120},{location:4,name:"a_accumulatedDistanceAndHalfWidth",count:2,type:5123},{location:5,name:"a_tlbr",count:4,type:5123},{location:6,name:"a_segmentDirection",count:4,type:5120},{location:7,name:"a_aux",count:2,type:5123}]}))(s),v=o.materialManager.getMaterialProgram(e,s,"materials/line",u,a),d=1/e.pixelRatio;i.bindProgram(v),this._setSharedUniforms(v,e,t),s.textureBinding&&o.textureManager.bindTextures(i,v,s);var m=Math.pow(2,l-t.key.level)/e.pixelRatio;if(v.setUniform1f("u_zoomFactor",m),v.setUniform1f("u_blur",0+d),v.setUniform1f("u_antialiasing",d),s.vvSizeMinMaxValue&&v.setUniform4fv("u_vvSizeMinMaxValue",r.vvSizeMinMaxValue),s.vvSizeScaleStops&&v.setUniform1f("u_vvSizeScaleStopsValue",r.vvSizeScaleStopsValue),s.vvSizeFieldStops){var _=r.getSizeVVFieldStops(t.key.level);v.setUniform1fv("u_vvSizeFieldStopsValues",_.values),v.setUniform1fv("u_vvSizeFieldStopsSizes",_.sizes)}s.vvSizeUnitValue&&v.setUniform1f("u_vvSizeUnitValueWorldToPixelsRatio",r.vvSizeUnitValueToPixelsRatio),s.vvColor&&(v.setUniform1fv("u_vvColorValues",r.vvColorValues),v.setUniform4fv("u_vvColors",r.vvColors)),s.vvOpacity&&(v.setUniform1fv("u_vvOpacityValues",r.vvOpacityValues),v.setUniform1fv("u_vvOpacities",r.vvOpacities)),i.setFaceCullingEnabled(!0),i.setFrontFace(2305),i.setCullFace(1029),n.draw(i,c,u),i.setFaceCullingEnabled(!1)}};var G=class extends U{dispose(){}getGeometryType(){return y.d.MARKER}drawGeometry(e,t,n,a){var{context:i,painter:o,rendererInfo:r,state:l}=e,s=F.d.load(n.materialKey),{bufferLayouts:c,attributes:u}=(e=>Object(f.f)(e.data,{geometry:[{location:0,name:"a_pos",count:2,type:5122},{location:1,name:"a_vertexOffset",count:2,type:5122},{location:2,name:"a_texCoords",count:2,type:5123},{location:3,name:"a_bitSetAndDistRatio",count:2,type:5123},{location:4,name:"a_id",count:4,type:5121},{location:5,name:"a_color",count:4,type:5121,normalized:!0},{location:6,name:"a_outlineColor",count:4,type:5121,normalized:!0},{location:7,name:"a_sizeAndOutlineWidth",count:4,type:5121}]}))(s),v=o.materialManager.getMaterialProgram(e,s,"materials/icon",u,a);i.bindProgram(v),s.textureBinding&&o.textureManager.bindTextures(i,v,s,!0),this._setSharedUniforms(v,e,t);var d=s.vvRotation?l.displayViewMat3:l.displayMat3;if(v.setUniformMatrix3fv("u_displayMat3",d),s.vvSizeMinMaxValue&&v.setUniform4fv("u_vvSizeMinMaxValue",r.vvSizeMinMaxValue),s.vvSizeScaleStops&&v.setUniform1f("u_vvSizeScaleStopsValue",r.vvSizeScaleStopsValue),s.vvSizeFieldStops){var m=r.getSizeVVFieldStops(t.key.level);v.setUniform1fv("u_vvSizeFieldStopsValues",m.values),v.setUniform1fv("u_vvSizeFieldStopsSizes",m.sizes)}s.vvSizeUnitValue&&v.setUniform1f("u_vvSizeUnitValueWorldToPixelsRatio",r.vvSizeUnitValueToPixelsRatio),s.vvColor&&(v.setUniform1fv("u_vvColorValues",r.vvColorValues),v.setUniform4fv("u_vvColors",r.vvColors)),s.vvOpacity&&(v.setUniform1fv("u_vvOpacityValues",r.vvOpacityValues),v.setUniform1fv("u_vvOpacities",r.vvOpacities)),s.vvRotation&&v.setUniform1f("u_vvRotationType","geographic"===r.vvMaterialParameters.vvRotationType?0:1),n.draw(i,c,u)}};var j=class extends U{dispose(){}getGeometryType(){return y.d.TEXT}drawGeometry(e,t,n,a){var{context:i,painter:o,rendererInfo:r,state:l}=e,s=F.f.load(n.materialKey),{bufferLayouts:c,attributes:u}=(e=>Object(f.f)(e.data,{geometry:[{location:0,name:"a_pos",count:2,type:5122},{location:1,name:"a_id",count:4,type:5121},{location:2,name:"a_color",count:4,type:5121,normalized:!0},{location:3,name:"a_haloColor",count:4,type:5121,normalized:!0},{location:4,name:"a_texFontSize",count:4,type:5121},{location:5,name:"a_aux",count:4,type:5120},{location:6,name:"a_vertexOffset",count:2,type:5122},{location:7,name:"a_texCoords",count:2,type:5123}]}))(s),v=o.materialManager.getMaterialProgram(e,s,"materials/text",u,a);if(i.bindProgram(v),this._setSharedUniforms(v,e,t),o.textureManager.bindTextures(i,v,s),v.setUniformMatrix3fv("u_displayMat3",l.displayMat3),v.setUniformMatrix3fv("u_displayViewMat3",l.displayViewMat3),s.vvSizeMinMaxValue&&v.setUniform4fv("u_vvSizeMinMaxValue",r.vvSizeMinMaxValue),s.vvSizeScaleStops&&v.setUniform1f("u_vvSizeScaleStopsValue",r.vvSizeScaleStopsValue),s.vvSizeFieldStops){var d=r.getSizeVVFieldStops(t.key.level);v.setUniform1fv("u_vvSizeFieldStopsValues",d.values),v.setUniform1fv("u_vvSizeFieldStopsSizes",d.sizes)}s.vvSizeUnitValue&&v.setUniform1f("u_vvSizeUnitValueWorldToPixelsRatio",r.vvSizeUnitValueToPixelsRatio),s.vvColor&&(v.setUniform1fv("u_vvColorValues",r.vvColorValues),v.setUniform4fv("u_vvColors",r.vvColors)),s.vvOpacity&&(v.setUniform1fv("u_vvOpacityValues",r.vvOpacityValues),v.setUniform1fv("u_vvOpacities",r.vvOpacities)),s.vvRotation&&v.setUniform1f("u_vvRotationType","geographic"===r.vvMaterialParameters.vvRotationType?0:1),v.setUniform1f("u_isHalo",1),n.draw(i,c,u),v.setUniform1f("u_isHalo",0),n.draw(i,c,u)}},B=n(91),H=n(897);class k extends o.a{constructor(){super(...arguments),this._desc={lut:{vsPath:"raster/lut",fsPath:"raster/lut",attributes:{a_position:0,a_texcoord:1}},stretch:{vsPath:"raster/stretch",fsPath:"raster/stretch",attributes:{a_position:0,a_texcoord:1}},hillshade:{vsPath:"raster/hillshade",fsPath:"raster/hillshade",attributes:{a_position:0,a_texcoord:1}}},this._rendererUniformInfos=new Map}dispose(){this._quad&&this._quad.dispose()}prepareState({context:e},t){e.setBlendingEnabled(!0),e.setBlendFunctionSeparate(1,771,1,771),e.setColorMask(!0,!0,!0,!0),e.setStencilWriteMask(0),e.setStencilTestEnabled(!0),e.setStencilFunction(514,t.stencilRef,255)}draw(e,t){var n;if(t.source&&!t.suspended){e.timeline.begin(this.name);var a=!(null!=(n=e.context.capabilities.textureFloat)&&n.textureFloatLinear);t.updateTexture(e);var i=this.getShaderVariations(t,a),o=e.painter.materialManager.getProgram(e,this._desc[t.symbolizerParameters.type],i);this.drawWithProgram(e.context,o,t),e.timeline.end(this.name)}}drawWithProgram(e,t,n,a=1,o=[0,0],r=!1){this._quad||(this._quad=new i.a(e,[0,0,1,0,0,1,1,1]));var{symbolizerParameters:l,transformGrid:s,width:c,height:u,opacity:f}=n,v=l.type;e.bindProgram(t);var d=this.getShaderVariations(n),m=this.getUniformInfos(v,e,t,d),{names:_,textures:p}=n.getTextures();Object(H.j)(e,t,_,p);var g=Object(H.d)(a,o),x=Object(H.f)(s,[c,u],[n.source.width,n.source.height],f,r);if(Object(H.k)(t,m,Object(B.a)(Object(B.a)({u_coordScale:n.coordScale,u_dvsMat3:n.transforms.dvs},g),x)),l.colormap){var{colormap:h,colormapOffset:b}=l,y=Object(H.e)(h,b);Object(H.k)(t,m,y)}if("stretch"===l.type){var S=Object(H.h)(l);Object(H.k)(t,m,S)}else if("hillshade"===l.type){var C=Object(H.g)(l);Object(H.k)(t,m,C)}this._quad.draw()}getUniformInfos(e,t,n,a){var i=a.length>0?e+"-"+a.join("-"):e;if(this._rendererUniformInfos.has(i))return this._rendererUniformInfos.get(i);var o=Object(H.i)(t,n);return this._rendererUniformInfos.set(i,o),o}getShaderVariations(e,t=!1){var n=[];return"cubic"===e.interpolation?n.push("bicubic"):t&&"bilinear"===e.interpolation&&n.push("bilinear"),e.isRendereredSource?n.push("noop"):e.symbolizerParameters.colormap&&n.push("applyColormap"),e.transformGrid&&n.push("applyProjection"),n}}var W=k,Z={marker:G,line:N,fill:L,text:j,label:R,clip:m,stencil:p.a,bitmap:s,raster:W,tileInfo:_.a,vtlBackground:S,vtlFill:z,vtlLine:D,vtlCircle:T,vtlSymbol:M}},649:function(e,t,n){"use strict";t.a=class{constructor(){this.name=this.constructor.name||"UnnamedBrush"}prepareState(e,t,n){}draw(e,t,n){}drawMany(e,t,n){for(var a of t)this.draw(e,a,n)}}},683:function(e,t,n){"use strict";n.d(t,"a",(function(){return i})),n.d(t,"b",(function(){return o})),n.d(t,"c",(function(){return a})),n.d(t,"d",(function(){return r}));var a=!0,i=32,o=1.5,r=200},693:function(e,t,n){"use strict";n(80),n(110),n(208);var a=n(325),i=n(326);n(192);t.a=class{constructor(e,t){this.rctx=e,this._vertexBuffer=a.a.createVertex(e,35044,new Uint16Array(t)),this._vao=new i.a(e,{a_position:0},{geometry:[{name:"a_position",count:2,type:5122,offset:0,stride:4,normalized:!1}]},{geometry:this._vertexBuffer})}bind(){this._vao.bind()}unbind(){this._vao.unbind()}dispose(){this._vao.dispose(!1),this._vertexBuffer.dispose()}draw(){this.rctx.bindVAO(this._vao),this.rctx.drawArrays(5,0,4)}}},725:function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));n(80),n(110),n(208),n(263),n(192);var a=n(833),i={background:{"background.frag":"uniform lowp vec4 u_color;\nvoid main() {\n  gl_FragColor = u_color;\n}","background.vert":"attribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform mediump vec2 u_coord_range;\nuniform mediump float u_depth;\nvoid main() {\n  vec3 v_pos = u_dvsMat3 * vec3(u_coord_range * a_pos, 1.0);\n  gl_Position = vec4(v_pos.xy, 0.0, 1.0);\n}"},bitBlit:{"bitBlit.frag":"uniform lowp sampler2D u_tex;\nuniform lowp float u_opacity;\nvarying mediump vec2 v_uv;\nvoid main() {\n  lowp vec4 color = texture2D(u_tex, v_uv);\n  gl_FragColor = color *  u_opacity;\n}","bitBlit.vert":"attribute vec2 a_pos;\nattribute vec2 a_tex;\nvarying mediump vec2 v_uv;\nvoid main(void) {\n  gl_Position = vec4(a_pos, 0.0, 1.0);\n  v_uv = a_tex;\n}"},blend:{"blend.frag":"precision mediump float;\nuniform sampler2D u_layerTexture;\nuniform lowp float u_opacity;\nuniform lowp float u_inFadeOpacity;\n#ifndef NORMAL\nuniform sampler2D u_backbufferTexture;\n#endif\nvarying mediump vec2 v_uv;\nfloat rgb2v(in vec3 c) {\n  return max(c.x, max(c.y, c.z));\n}\nvec3 rgb2hsv(in vec3 c) {\n  vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n  vec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\n  vec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\n  float d = q.x - min(q.w, q.y);\n  float e = 1.0e-10;\n  return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), min(d / (q.x + e), 1.0), q.x);\n}\nvec3 hsv2rgb(in vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvec3 tint(in vec3 Cb, in vec3 Cs) {\n  float vIn = rgb2v(Cb);\n  vec3 hsvTint = rgb2hsv(Cs);\n  vec3 hsvOut = vec3(hsvTint.x, hsvTint.y, vIn * hsvTint.z);\n  return hsv2rgb(hsvOut);\n}\nfloat overlay(in float Cb, in float Cs) {\n  return (1.0 - step(0.5, Cs)) * (1.0 - 2.0 * (1.0 - Cs ) * (1.0 - Cb)) + step(0.5, Cs) * (2.0 * Cs * Cb);\n}\nfloat colorDodge(in float Cb, in float Cs) {\n  return (Cb == 0.0) ? 0.0 : (Cs == 1.0) ? 1.0 : min(1.0, Cb / (1.0 - Cs));\n}\nfloat colorBurn(in float Cb, in float Cs) {\n return (Cb == 1.0) ? 1.0 : (Cs == 0.0) ? 0.0 : 1.0 - min(1.0, (1.0 - Cb) / Cs);\n}\nfloat hardLight(in float Cb, in float Cs) {\n  return (1.0 - step(0.5, Cs)) * (2.0 * Cs * Cb) + step(0.5, Cs) * (1.0 - 2.0 * (1.0 - Cs) * (1.0 - Cb));\n}\nfloat reflectBlend(in float Cb, in float Cs) {\n\treturn (Cs == 1.0) ? Cs : min(Cb * Cb / (1.0 - Cs), 1.0);\n}\nfloat softLight(in float Cb, in float Cs) {\n  if (Cs <= 0.5) {\n    return Cb - (1.0 - 2.0 * Cs) * Cb * (1.0 - Cb);\n  }\n  if (Cb <= 0.25) {\n    return Cb + (2.0 * Cs - 1.0) * Cb * ((16.0 * Cb - 12.0) * Cb + 3.0);\n  }\n  return Cb + (2.0 * Cs - 1.0) * (sqrt(Cb) - Cb);\n}\nfloat vividLight(in float Cb, in float Cs) {\n  return (1.0 - step(0.5, Cs)) * colorBurn(Cb, 2.0 * Cs) + step(0.5, Cs) * colorDodge(Cb, (2.0 * (Cs - 0.5)));\n}\nfloat minv3(in vec3 c) {\n  return min(min(c.r, c.g), c.b);\n}\nfloat maxv3(in vec3 c) {\n  return max(max(c.r, c.g), c.b);\n}\nfloat lumv3(in vec3 c) {\n  return dot(c, vec3(0.3, 0.59, 0.11));\n}\nfloat satv3(vec3 c) {\n  return maxv3(c) - minv3(c);\n}\nvec3 clipColor(vec3 color) {\n  float lum = lumv3(color);\n  float mincol = minv3(color);\n  float maxcol = maxv3(color);\n  if (mincol < 0.0) {\n    color = lum + ((color - lum) * lum) / (lum - mincol);\n  }\n  if (maxcol > 1.0) {\n    color = lum + ((color - lum) * (1.0 - lum)) / (maxcol - lum);\n  }\n  return color;\n}\nvec3 setLum(vec3 cbase, vec3 clum) {\n  float lbase = lumv3(cbase);\n  float llum = lumv3(clum);\n  float ldiff = llum - lbase;\n  vec3 color = cbase + vec3(ldiff);\n  return clipColor(color);\n}\nvec3 setLumSat(vec3 cbase, vec3 csat, vec3 clum)\n{\n  float minbase = minv3(cbase);\n  float sbase = satv3(cbase);\n  float ssat = satv3(csat);\n  vec3 color;\n  if (sbase > 0.0) {\n    color = (cbase - minbase) * ssat / sbase;\n  } else {\n    color = vec3(0.0);\n  }\n  return setLum(color, clum);\n}\nvoid main() {\n  vec4 src = texture2D(u_layerTexture, v_uv);\n#ifdef NORMAL\n  gl_FragColor = src *  u_opacity;\n#else\n  vec4 dst = texture2D(u_backbufferTexture, v_uv);\n  vec3 Cs = src.a == 0.0 ? src.rgb : vec3(src.rgb / src.a);\n  vec3 Cb = dst.a == 0.0 ? dst.rgb : vec3(dst.rgb / dst.a);\n  float as = u_opacity * src.a;\n  float ab = dst.a;\n  #ifdef DESTINATION_OVER\n    gl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb, as + ab - as * ab);\n  #endif\n  #ifdef SOURCE_IN\n    vec4 color = vec4(as * Cs * ab, as * ab);\n    vec4 fadeColor = (1.0 - u_opacity) * u_inFadeOpacity * vec4(ab * Cb, ab);\n    gl_FragColor = color + fadeColor;\n  #endif\n  #ifdef DESTINATION_IN\n    vec4 color = vec4(ab * Cb * as, ab * as);\n    vec4 fadeColor = (1.0 - u_opacity) * u_inFadeOpacity * vec4(ab * Cb, ab);\n    gl_FragColor = color + fadeColor;\n  #endif\n  #ifdef SOURCE_OUT\n    gl_FragColor = vec4(as * Cs * (1.0 - ab), as * (1.0 - ab));\n  #endif\n  #ifdef DESTINATION_OUT\n    gl_FragColor = vec4(ab * Cb * (1.0 - as), ab * (1.0 - as));\n  #endif\n  #ifdef SOURCE_ATOP\n    gl_FragColor = vec4(as * Cs * ab + ab * Cb * (1.0 - as), ab);\n  #endif\n  #ifdef DESTINATION_ATOP\n    gl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb * as, as);\n  #endif\n  #ifdef XOR\n    gl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb * (1.0 - as),\n                        as * (1.0 - ab) + ab * (1.0 - as));\n  #endif\n  #ifdef MULTIPLY\n    gl_FragColor = vec4(as * Cs * ab * Cb + (1.0 - ab) * as * Cs + (1.0 - as) * ab * Cb,\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef SCREEN\n    gl_FragColor = vec4((Cs + Cb - Cs * Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef OVERLAY\n    vec3 f = vec3(overlay(Cb.r, Cs.r), overlay(Cb.g, Cs.g), overlay(Cb.b, Cs.b));\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef DARKEN\n    gl_FragColor = vec4(min(Cs, Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef LIGHTER\n    gl_FragColor = vec4(as * Cs + ab * Cb, as + ab);\n  #endif\n  #ifdef LIGHTEN\n    gl_FragColor = vec4(max(Cs, Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef COLOR_DODGE\n    vec3 f = vec3(colorDodge(Cb.r, Cs.r), colorDodge(Cb.g, Cs.g), colorDodge(Cb.b, Cs.b));\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef COLOR_BURN\n    vec3 f = vec3(colorBurn(Cb.r, Cs.r), colorBurn(Cb.g, Cs.g), colorBurn(Cb.b, Cs.b));\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef HARD_LIGHT\n    vec3 f = vec3(hardLight(Cb.r, Cs.r), hardLight(Cb.g, Cs.g), hardLight(Cb.b, Cs.b));\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef SOFT_LIGHT\n    vec3 f = vec3(softLight(Cb.r, Cs.r), softLight(Cb.g, Cs.g), softLight(Cb.b, Cs.b));\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef DIFFERENCE\n    gl_FragColor = vec4(abs(Cb - Cs) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef EXCLUSION\n     vec3 f = Cs + Cb - 2.0 * Cs * Cb;\n     gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef INVERT\n    gl_FragColor = vec4((1.0 - Cb) * as * ab + Cb * ab * (1.0 - as), ab);\n  #endif\n  #ifdef VIVID_LIGHT\n    vec3 f = vec3(vividLight(Cb.r, Cs.r),\n                  vividLight(Cb.g, Cs.g),\n                  vividLight(Cb.b, Cs.b));\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef HUE\n    vec3 f = setLumSat(Cs,Cb,Cb);\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef SATURATION\n    vec3 f = setLumSat(Cb,Cs,Cb);\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef COLOR\n    vec3 f = setLum(Cs,Cb);\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef LUMINOSITY\n    vec3 f = setLum(Cb,Cs);\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef PLUS\n    gl_FragColor = clamp(vec4(src.r + Cb.r, src.g + Cb.g, src.b + Cb.b, as + ab), 0.0, 1.0);\n  #endif\n  #ifdef MINUS\n     gl_FragColor = vec4(clamp(vec3(Cb.r - src.r, Cb.g - src.g, Cb.b - src.b), 0.0, 1.0), ab * as);\n  #endif\n  #ifdef AVERAGE\n     vec3 f = (Cb + Cs) / 2.0;\n     gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef REFLECT\n    vec3 f = vec3(reflectBlend(Cb.r, Cs.r),\n                  reflectBlend(Cb.g, Cs.g),\n                  reflectBlend(Cb.b, Cs.b));\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n#endif\n}","blend.vert":"attribute vec2 a_position;\nvarying mediump vec2 v_uv;\nvoid main(void) {\n  gl_Position = vec4(a_position , 0.0, 1.0);\n  v_uv = (a_position + 1.0) / 2.0;\n}"},filtering:{"bicubic.glsl":"vec4 computeWeights(float v) {\n  float b = 1.0 / 6.0;\n  float v2 = v * v;\n  float v3 = v2 * v;\n  float w0 = b * (-v3 + 3.0 * v2 - 3.0 * v + 1.0);\n  float w1 = b * (3.0 * v3  - 6.0 * v2 + 4.0);\n  float w2 = b * (-3.0 * v3 + 3.0 * v2 + 3.0 * v + 1.0);\n  float w3 = b * v3;\n  return vec4(w0, w1, w2, w3);\n}\nvec4 bicubicOffsetsAndWeights(float v) {\n  vec4 w = computeWeights(v);\n  float g0 = w.x + w.y;\n  float g1 = w.z + w.w;\n  float h0 = 1.0 - (w.y / g0) + v;\n  float h1 = 1.0 + (w.w / g1) - v;\n  return vec4(h0, h1, g0, g1);\n}\nvec4 sampleBicubicBSpline(sampler2D sampler, vec2 coords, vec2 texSize) {\n  vec2 eX = vec2(1.0 / texSize.x, 0.0);\n  vec2 eY = vec2(0.0, 1.0 / texSize.y);\n  vec2 texel = coords * texSize - 0.5;\n  vec3 hgX = bicubicOffsetsAndWeights(fract(texel).x).xyz;\n  vec3 hgY = bicubicOffsetsAndWeights(fract(texel).y).xyz;\n  vec2 coords10 = coords + hgX.x * eX;\n  vec2 coords00 = coords - hgX.y * eX;\n  vec2 coords11 = coords10 + hgY.x * eY;\n  vec2 coords01 = coords00 + hgY.x * eY;\n  coords10 = coords10 - hgY.y * eY;\n  coords00 = coords00 - hgY.y * eY;\n  vec4 color00 = texture2D(sampler, coords00);\n  vec4 color10 = texture2D(sampler, coords10);\n  vec4 color01 = texture2D(sampler, coords01);\n  vec4 color11 = texture2D(sampler, coords11);\n  color00 = mix(color00, color01, hgY.z);\n  color10 = mix(color10, color11, hgY.z);\n  color00 = mix(color00, color10, hgX.z);\n  return color00;\n}","bilinear.glsl":"vec4 sampleBilinear(sampler2D sampler, vec2 coords, vec2 texSize) {\n  vec2 texelStart = floor(coords * texSize);\n  vec2 coord0 = texelStart / texSize;\n  vec2 coord1 = (texelStart +  vec2(1.0, 0.0)) / texSize;\n  vec2 coord2 = (texelStart +  vec2(0.0, 1.0)) / texSize;\n  vec2 coord3 = (texelStart +  vec2(1.0, 1.0)) / texSize;\n  vec4 color0 = texture2D(sampler, coord0);\n  vec4 color1 = texture2D(sampler, coord1);\n  vec4 color2 = texture2D(sampler, coord2);\n  vec4 color3 = texture2D(sampler, coord3);\n  vec2 blend = fract(coords * texSize);\n  vec4 color01 = mix(color0, color1, blend.x);\n  vec4 color23 = mix(color2, color3, blend.x);\n  return mix(color01, color23, blend.y);\n}","epx.glsl":"vec4 sampleEPX(sampler2D sampler, float size, vec2 coords, vec2 texSize) {\n  vec2 invSize = 1.0 / texSize;\n  vec2 texel = coords * texSize;\n  vec2 texel_i = floor(texel);\n  vec2 texel_frac = fract(texel);\n  vec4 colorP = texture2D(sampler, texel_i * invSize);\n  vec4 colorP1 = vec4(colorP);\n  vec4 colorP2 = vec4(colorP);\n  vec4 colorP3 = vec4(colorP);\n  vec4 colorP4 = vec4(colorP);\n  vec4 colorA = texture2D(sampler, (texel_i - vec2(0.0, 1.0)) * invSize);\n  vec4 colorB = texture2D(sampler, (texel_i + vec2(1.0, 0.0)) * invSize);\n  vec4 colorC = texture2D(sampler, (texel_i - vec2(1.0, 0.0)) * invSize);\n  vec4 colorD = texture2D(sampler, (texel_i + vec2(0.0, 1.0)) * invSize);\n  if (colorC == colorA && colorC != colorD && colorA != colorB) {\n    colorP1 = colorA;\n  }\n  if (colorA == colorB && colorA != colorC && colorB != colorD) {\n    colorP2 = colorB;\n  }\n  if (colorD == colorC && colorD != colorB && colorC != colorA) {\n    colorP3 = colorC;\n  }\n  if (colorB == colorD && colorB != colorA && colorD != colorC) {\n    colorP4 = colorD;\n  }\n  vec4 colorP12 = mix(colorP1, colorP2, texel_frac.x);\n  vec4 colorP34 = mix(colorP1, colorP2, texel_frac.x);\n  return mix(colorP12, colorP34, texel_frac.y);\n}"},fx:{integrate:{"integrate.frag":"precision mediump float;\nuniform lowp sampler2D u_sourceTexture;\nuniform lowp sampler2D u_maskTexture;\nuniform mediump float u_zoomLevel;\nuniform highp float u_timeDelta;\nuniform highp float u_animationTime;\nvarying highp vec2 v_texcoord;\n#include <materials/utils.glsl>\nvoid main()\n{\n#ifdef DELTA\n  vec4 texel = texture2D(u_sourceTexture, v_texcoord);\n  vec4 data0 = texture2D(u_maskTexture, v_texcoord);\n  float flags = data0.r * 255.0;\n  float groupMinZoom = data0.g * 255.0;\n  float isVisible = getFilterBit(flags, 0);\n  float wouldClip = step(groupMinZoom, u_zoomLevel);\n  float direction = wouldClip * 1.0 + (1.0 - wouldClip) * -1.0;\n  float dt = u_timeDelta / max(u_animationTime, 0.0001);\n  vec4 nextState = vec4(texel + direction * dt);\n  gl_FragColor =  vec4(nextState);\n#elif defined(UPDATE)\n  vec4 texel = texture2D(u_sourceTexture, v_texcoord);\n  gl_FragColor = texel;\n#endif\n}","integrate.vert":"precision mediump float;\nattribute vec2 a_pos;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\n  v_texcoord = a_pos;\n  gl_Position = vec4(a_pos * 2.0 - 1.0, 0.0, 1.0);\n}"}},highlight:{"blur.frag":"varying mediump vec2 v_texcoord;\nuniform mediump vec4 u_direction;\nuniform mediump mat4 u_channelSelector;\nuniform mediump vec4 u_sigmas;\nuniform sampler2D u_texture;\nmediump vec4 gauss4(mediump vec2 dir) {\n  return exp(-dot(dir, dir) / (2.0 * u_sigmas * u_sigmas));\n}\nmediump float gauss1(mediump vec2 dir) {\n  return exp(-dot(dir, dir) / (2.0 * u_sigmas[3] * u_sigmas[3]));\n}\nmediump vec4 selectChannel(mediump vec4 sample) {\n  return u_channelSelector * sample;\n}\nvoid accumGauss4(mediump float i, inout mediump vec4 tot, inout mediump vec4 weight) {\n  mediump vec4 w = gauss4(i * u_direction.xy);\n  tot += selectChannel(texture2D(u_texture, v_texcoord + i * u_direction.zw)) * w;\n  weight += w;\n}\nvoid accumGauss1(mediump float i, inout mediump float tot, inout mediump float weight) {\n  mediump float w = gauss1(i * u_direction.xy);\n  tot += selectChannel(texture2D(u_texture, v_texcoord + i * u_direction.zw))[3] * w;\n  weight += w;\n}\nvoid main(void) {\n  mediump float tot = 0.0;\n  mediump float weight = 0.0;\n  accumGauss1(-4.0, tot, weight);\n  accumGauss1(-3.0, tot, weight);\n  accumGauss1(-2.0, tot, weight);\n  accumGauss1(-1.0, tot, weight);\n  accumGauss1(0.0, tot, weight);\n  accumGauss1(1.0, tot, weight);\n  accumGauss1(2.0, tot, weight);\n  accumGauss1(3.0, tot, weight);\n  accumGauss1(4.0, tot, weight);\n  gl_FragColor = vec4(0.0, 0.0, 0.0, tot / weight);\n}","highlight.frag":"varying mediump vec2 v_texcoord;\nuniform sampler2D u_texture;\nuniform mediump vec4 u_sigmas;\nuniform sampler2D u_shade;\nuniform mediump vec2 u_minMaxDistance;\nmediump float estimateDistance() {\n  mediump float sigma = u_sigmas[3];\n  mediump float y = texture2D(u_texture, v_texcoord)[3];\n  const mediump float y0 = 0.5;\n  mediump float m0 = 1.0 / (sqrt(2.0 * 3.1415) * sigma);\n  mediump float d = (y - y0) / m0;\n  return d;\n}\nmediump vec4 shade(mediump float d) {\n  mediump float mappedDistance = (d - u_minMaxDistance.x) / (u_minMaxDistance.y - u_minMaxDistance.x);\n  mappedDistance = clamp(mappedDistance, 0.0, 1.0);\n  return texture2D(u_shade, vec2(mappedDistance, 0.5));\n}\nvoid main(void) {\n  mediump float d = estimateDistance();\n  gl_FragColor = shade(d);\n}","textured.vert":"attribute mediump vec2 a_position;\nattribute mediump vec2 a_texcoord;\nvarying mediump vec2 v_texcoord;\nvoid main(void) {\n  gl_Position = vec4(a_position, 0.0, 1.0);\n  v_texcoord = a_texcoord;\n}"},magnifier:{"magnifier.frag":"uniform lowp vec4 u_background;\nuniform mediump sampler2D u_readbackTexture;\nuniform mediump sampler2D u_maskTexture;\nuniform mediump sampler2D u_overlayTexture;\nuniform bool u_maskEnabled;\nuniform bool u_overlayEnabled;\nvarying mediump vec2 v_texCoord;\nconst lowp float barrelFactor = 1.1;\nlowp vec2 barrel(lowp vec2 uv) {\n  lowp vec2 uvn = uv * 2.0 - 1.0;\n  if (uvn.x == 0.0 && uvn.y == 0.0) {\n    return vec2(0.5, 0.5);\n  }\n  lowp float theta = atan(uvn.y, uvn.x);\n  lowp float r = pow(length(uvn), barrelFactor);\n  return r * vec2(cos(theta), sin(theta)) * 0.5 + 0.5;\n}\nvoid main(void)\n{\n  lowp vec4 color = texture2D(u_readbackTexture, barrel(v_texCoord));\n  color = (color + (1.0 - color.a) * u_background);\n  lowp float mask = u_maskEnabled ? texture2D(u_maskTexture, v_texCoord).a : 1.0;\n  color *= mask;\n  lowp vec4 overlayColor = u_overlayEnabled ? texture2D(u_overlayTexture, v_texCoord) : vec4(0);\n  gl_FragColor = overlayColor + (1.0 - overlayColor.a) * color;\n}","magnifier.vert":"precision mediump float;\nattribute mediump vec2 a_pos;\nuniform mediump vec4 u_drawPos;\nvarying mediump vec2 v_texCoord;\nvoid main(void)\n{\n  v_texCoord = a_pos;\n  gl_Position = vec4(u_drawPos.xy + vec2(a_pos - 0.5) * u_drawPos.zw, 0.0, 1.0);\n}"},materials:{"attributeData.glsl":"uniform highp sampler2D u_attributeData0;\nuniform highp sampler2D u_attributeData1;\nuniform highp sampler2D u_attributeData2;\nuniform highp sampler2D u_attributeData3;\nuniform highp int u_attributeTextureSize;\nhighp vec2 getAttributeDataCoords(in highp vec4 id) {\n  highp vec4 texel = unpackDisplayIdTexel(id);\n  highp float size = float(u_attributeTextureSize);\n  highp float u32 = float(int(texel.r) + int(texel.g) * 256 + int(texel.b) * 256 * 256 + int(texel.a) * 256 * 256 * 256);\n  highp float col = mod(u32, size);\n  highp float row = (u32 - col) / size;\n  highp float u = col / size;\n  highp float v = row / size;\n  return vec2(u, v);\n}\nhighp vec4 getAttributeData0(in highp vec4 id) {\n  vec2 coords = getAttributeDataCoords(id);\n  return texture2D(u_attributeData0, coords);\n}\nhighp vec4 getAttributeData1(in highp vec4 id) {\n  highp vec2 coords = getAttributeDataCoords(id);\n  return texture2D(u_attributeData1, coords);\n}\nhighp vec4 getAttributeData2(in highp vec4 id) {\n  highp vec2 coords = getAttributeDataCoords(id);\n  return texture2D(u_attributeData2, coords);\n}\nhighp vec4 getAttributeData3(in highp vec4 id) {\n  highp vec2 coords = getAttributeDataCoords(id);\n  return texture2D(u_attributeData3, coords);\n}\nfloat u88VVToFloat(in vec2 v) {\n  bool isMagic = v.x == 255.0 && v.y == 255.0;\n  if (isMagic) {\n    return NAN_MAGIC_NUMBER;\n  }\n  return (v.x + v.y * float(0x100)) - 32768.0;\n}","constants.glsl":"const float C_DEG_TO_RAD = 3.14159265359 / 180.0;\nconst float C_256_TO_RAD = 3.14159265359 / 128.0;\nconst float SIGNED_BYTE_TO_UNSIGNED = 128.0;\nconst float POSITION_PRECISION = 1.0 / 8.0;\nconst float FILL_POSITION_PRECISION = 1.0 / 1.0;\nconst float SOFT_EDGE_RATIO = 1.0;\nconst float THIN_LINE_WIDTH_FACTOR = 1.1;\nconst float THIN_LINE_HALF_WIDTH = 1.0;\nconst float EXTRUDE_SCALE_PLACEMENT_PADDING = 1.0 / 4.0;\nconst float OFFSET_PRECISION = 1.0 / 8.0;\nconst float OUTLINE_SCALE = 1.0 / 5.0;\nconst float SDF_FONT_SIZE = 24.0;\nconst float MAX_SDF_DISTANCE = 8.0;\nconst float PLACEMENT_PADDING = 8.0;\nconst float EPSILON = 0.0000001;\nconst int MAX_FILTER_COUNT = 2;\nconst int ATTR_VV_SIZE = 0;\nconst int ATTR_VV_COLOR = 1;\nconst int ATTR_VV_OPACITY = 2;\nconst int ATTR_VV_ROTATION = 3;\nconst highp float NAN_MAGIC_NUMBER = 1e-30;",fill:{"common.glsl":"#ifdef PATTERN\nuniform mediump vec2 u_mosaicSize;\n#endif\n#ifdef DOT_DENSITY\nuniform lowp vec4 u_isActive[ 2 ];\nuniform highp float u_dotValue;\nuniform highp float u_tileDotsOverArea;\nuniform highp float u_dotTextureDotCount;\nuniform mediump float u_tileZoomFactor;\n#endif\nvarying vec3 v_pos;\nvarying lowp float v_opacity;\nvarying lowp vec4 v_color;\nvarying highp vec4 v_id;\nvarying highp float v_flags;\n#ifdef PATTERN\nvarying mediump vec4 v_tlbr;\nvarying mediump vec2 v_tileTextureCoord;\n#endif\n#ifdef DOT_DENSITY\nvarying highp vec2 v_dotTextureCoords;\nvarying highp vec4 v_dotThresholds[ 2 ];\n#endif","fill.frag":"precision highp float;\n#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <materials/fill/common.glsl>\n#ifdef PATTERN\nuniform lowp sampler2D u_texture;\n#endif\n#ifdef DOT_DENSITY\nuniform mediump mat4 u_dotColors[ 2 ];\nuniform sampler2D u_dotTextures[ 2 ];\nuniform vec4 u_dotBackgroundColor;\n#endif\nvoid main() {\n#ifdef ID\n  gl_FragColor = v_id;\n#elif defined(PATTERN)\n  mediump vec2 normalizedTextureCoord = mod(v_tileTextureCoord, 1.0);\n  mediump vec2 samplePos = mix(v_tlbr.xy, v_tlbr.zw, normalizedTextureCoord);\n  lowp vec4 color = texture2D(u_texture, samplePos);\n  gl_FragColor = v_opacity * v_color * color;\n#elif defined(DOT_DENSITY) && !defined(HIGHLIGHT)\n  vec4 textureThresholds0 = texture2D(u_dotTextures[0], v_dotTextureCoords);\n  vec4 textureThresholds1 = texture2D(u_dotTextures[1], v_dotTextureCoords);\n  vec4 difference0 = v_dotThresholds[0] - textureThresholds0;\n  vec4 difference1 = v_dotThresholds[1] - textureThresholds1;\n#ifdef DD_DOT_BLENDING\n  vec4 isPositive0 = step(0.0, difference0);\n  vec4 isPositive1 = step(0.0, difference1);\n  float weightSum = dot(isPositive0, difference0) + dot(isPositive1, difference1);\n  float lessThanEqZero = step(weightSum, 0.0);\n  float greaterThanZero = 1.0 - lessThanEqZero ;\n  float divisor = (weightSum + lessThanEqZero);\n  vec4 weights0 = difference0 * isPositive0 / divisor;\n  vec4 weights1 = difference1 * isPositive1 / divisor;\n  vec4 dotColor = u_dotColors[0] * weights0 + u_dotColors[1] * weights1;\n  vec4 preEffectColor = greaterThanZero * dotColor + lessThanEqZero * u_dotBackgroundColor;\n#else\n  float diffMax = max(max4(difference0), max4(difference1));\n  float lessThanZero = step(diffMax, 0.0);\n  float greaterOrEqZero = 1.0 - lessThanZero;\n  vec4 isMax0 = step(diffMax, difference0);\n  vec4 isMax1 = step(diffMax, difference1);\n  vec4 dotColor = u_dotColors[0] * isMax0 + u_dotColors[1] * isMax1;\n  vec4 preEffectColor = greaterOrEqZero * dotColor + lessThanZero * u_dotBackgroundColor;\n#endif\n  gl_FragColor = preEffectColor;\n#else\n  gl_FragColor = v_opacity * v_color;\n#endif\n#ifdef HIGHLIGHT\n  gl_FragColor.a = 1.0;\n#endif\n}","fill.vert":"precision highp float;\n#ifdef DOT_DENSITY\nattribute float a_inverseArea;\nvec4 a_color = vec4(0.0, 0.0, 0.0, 1.0);\nvec4 a_aux3 = vec4(0.0);\n#else\nattribute vec4 a_color;\nattribute vec4 a_tlbr;\nattribute vec4 a_aux1;\nattribute vec2 a_aux2;\nattribute vec4 a_aux3;\n#endif\n#include <materials/vcommon.glsl>\n#include <materials/fill/common.glsl>\n#ifdef DOT_DENSITY\nvec4 dotThreshold(vec4 featureAttrOverFeatureArea, float dotValue, float tileDotsOverArea) {\n  return featureAttrOverFeatureArea * (1.0 / dotValue)  * (1.0 / tileDotsOverArea);\n}\n#endif\nvoid main()\n{\n  INIT;\n  float a_bitSet = a_aux3.a;\n  v_color     = getColor(a_color, a_bitSet, 0);\n  v_opacity   = getOpacity();\n  v_id        = norm(a_id);\n  v_pos       = u_dvsMat3 * vec3(a_pos * FILL_POSITION_PRECISION, 1.);\n  v_flags     = getFilterFlags();\n#ifdef PATTERN\n  vec2 aux2 = (1.0 / SIGNED_BYTE_TO_UNSIGNED) * a_aux2;\n  float width = u_zoomFactor * a_aux1.x * aux2.x;\n  float height = u_zoomFactor * a_aux1.y * aux2.y;\n  float angle = C_256_TO_RAD * a_aux3.z;\n  float sinA = sin(angle);\n  float cosA = cos(angle);\n  mat3 patternMatrix = mat3(cosA / width, sinA / height, 0,\n                           -sinA / width, cosA / height, 0,\n                            0,            0,             1);\n  vec2 symbolOffset = (a_aux1.zw - SIGNED_BYTE_TO_UNSIGNED) / vec2(width, height);\n  v_tileTextureCoord = (patternMatrix * vec3(a_pos * FILL_POSITION_PRECISION, 1.0)).xy - symbolOffset;\n  v_tlbr = a_tlbr / u_mosaicSize.xyxy;\n#elif defined(DOT_DENSITY)\n  vec4 ddAttributeData0 = getAttributeData2(a_id) * u_isActive[0] * a_inverseArea;\n  vec4 ddAttributeData1 = getAttributeData3(a_id) * u_isActive[1] * a_inverseArea;\n  float size = u_tileZoomFactor * 512.0 * 1.0 / u_pixelRatio;\n  v_dotThresholds[0] = dotThreshold(ddAttributeData0, u_dotValue, u_tileDotsOverArea);\n  v_dotThresholds[1] = dotThreshold(ddAttributeData1, u_dotValue, u_tileDotsOverArea);\n  v_dotTextureCoords = (a_pos * FILL_POSITION_PRECISION + 0.5) / size;\n#endif\n  gl_Position = vec4(applyFilter(v_color, v_pos, v_flags), 1.0);\n}"},icon:{"common.glsl":"uniform lowp vec2 u_mosaicSize;\nvarying lowp vec4 v_color;\nvarying highp vec4 v_id;\nvarying highp vec4 v_sizeTex;\nvarying mediump vec3 v_pos;\nvarying highp float v_filters;\nvarying lowp float v_opacity;\n#ifdef SDF\nvarying lowp vec4 v_outlineColor;\nvarying mediump float v_outlineWidth;\nvarying mediump float v_distRatio;\nvarying mediump float v_overridingOutlineColor;\nvarying mediump float v_isThin;\n#endif","icon.frag":"precision mediump float;\n#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <util/encoding.glsl>\n#include <materials/constants.glsl>\n#include <materials/icon/common.glsl>\nuniform lowp sampler2D u_texture;\nvoid main()\n{\n  vec2 v_size = v_sizeTex.xy;\n  vec2 v_tex  = v_sizeTex.zw;\n#ifdef SDF\n  lowp vec4 fillPixelColor = v_color;\n  float d = 0.5 - rgba2float(texture2D(u_texture, v_tex));\n  float size = max(v_size.x, v_size.y);\n  float dist = d * size * SOFT_EDGE_RATIO * v_distRatio;\n  fillPixelColor *= clamp(0.5 - dist, 0.0, 1.0);\n  float outlineWidth = v_outlineWidth;\n  #ifdef HIGHLIGHT\n    outlineWidth = max(outlineWidth, 4.0 * v_isThin);\n  #endif\n  if (outlineWidth > 0.25) {\n    lowp vec4 outlinePixelColor = v_overridingOutlineColor * v_color + (1.0 - v_overridingOutlineColor) * v_outlineColor;\n    float clampedOutlineSize = min(outlineWidth, size);\n    outlinePixelColor *= clamp(0.5 - abs(dist) + clampedOutlineSize * 0.5, 0.0, 1.0);\n    gl_FragColor = v_opacity * ((1.0 - outlinePixelColor.a) * fillPixelColor + outlinePixelColor);\n  }\n  else {\n    gl_FragColor = v_opacity * fillPixelColor;\n  }\n#else\n   lowp vec4 texColor = texture2D(u_texture, v_tex);\n   gl_FragColor = v_opacity * texColor;\n#endif\n#ifdef HIGHLIGHT\n  gl_FragColor.a = step(1.0 / 255.0, gl_FragColor.a);\n#endif\n#ifdef ID\n  if (gl_FragColor.a < 1.0 / 255.0) {\n    discard;\n  }\n  gl_FragColor = v_id;\n#endif\n}","icon.vert":"precision highp float;\nattribute vec4 a_color;\nattribute vec4 a_outlineColor;\nattribute vec4 a_sizeAndOutlineWidth;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nattribute vec2 a_bitSetAndDistRatio;\n#include <materials/vcommon.glsl>\n#include <materials/icon/common.glsl>\nvec2 getMarkerSize(inout vec2 offset, inout vec2 baseSize, inout float outlineSize, in float referenceSize, in float bitSet) {\n#ifdef VV_SIZE\n  float r = getSize(baseSize.y) / referenceSize;\n  baseSize.xy *= r;\n  offset.xy *= r;\n  float scaleSymbolProportionally = getBit(bitSet, 3);\n  outlineSize *= scaleSymbolProportionally * (r - 1.0) + 1.0;\n#endif\n  return baseSize;\n}\nvec3 getOffset(in vec2 in_offset, float a_bitSet) {\n  float isMapAligned = getBit(a_bitSet, 0);\n  vec3  offset       = getRotation() * vec3(in_offset, 0.0);\n  return getMatrix(isMapAligned) * offset;\n}\nvoid main()\n{\n  INIT;\n  vec2  a_size   = a_sizeAndOutlineWidth.xy * a_sizeAndOutlineWidth.xy / 128.0;\n  vec2  a_offset = a_vertexOffset / 16.0;\n  float a_outlineSize = a_sizeAndOutlineWidth.z * a_sizeAndOutlineWidth.z / 128.0;\n  float a_bitSet = a_bitSetAndDistRatio.x;\n  vec2 v_size = getMarkerSize(a_offset, a_size, a_outlineSize, a_sizeAndOutlineWidth.w * a_sizeAndOutlineWidth.w / 128.0, a_bitSet);\n  vec2 v_tex      = a_texCoords / u_mosaicSize;\n  v_color    = getColor(a_color, a_bitSet, 1);\n  v_opacity  = getOpacity();\n  v_id       = norm(a_id);\n  v_filters  = getFilterFlags();\n  v_pos      = u_dvsMat3 * vec3(a_pos * POSITION_PRECISION, 1.0) + getOffset(a_offset, a_bitSet);\n  v_sizeTex  = vec4(v_size.xy, v_tex.xy);\n#ifdef SDF\n  v_isThin   = getBit(a_bitSet, 2);\n  #ifdef VV_COLOR\n    v_overridingOutlineColor = v_isThin;\n  #else\n    v_overridingOutlineColor = 0.0;\n  #endif\n  v_outlineWidth = min(a_outlineSize, max(max(v_size.x, v_size.y) - 0.99, 0.0));\n  v_outlineColor = a_outlineColor;\n  v_distRatio = a_bitSetAndDistRatio.y / 126.0;\n#endif\n  gl_Position = vec4(applyFilter(v_color, v_pos, v_filters), 1.0);\n}"},label:{"common.glsl":"uniform mediump float u_zoomLevel;\nuniform mediump float u_mapRotation;\nuniform mediump float u_mapAligned;\nuniform mediump vec2 u_mosaicSize;\nvarying mediump float v_antialiasingWidth;\nvarying mediump float v_edgeDistanceOffset;\nvarying mediump vec2 v_tex;\nvarying mediump vec4 v_color;\nvarying lowp vec4 v_animation;","label.frag":"#include <materials/text/text.frag>","label.vert":"precision highp float;\n#include <materials/vcommon.glsl>\n#include <materials/text/common.glsl>\nattribute vec4 a_color;\nattribute vec4 a_haloColor;\nattribute vec4 a_texAndSize;\nattribute vec4 a_refSymbolAndPlacementOffset;\nattribute vec4 a_glyphData;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nuniform float u_isHalo;\nuniform float u_zoomLevel;\nuniform float u_mapRotation;\nuniform float u_mapAligned;\nfloat getZ(in float minZoom, in float maxZoom, in float angle) {\n  float glyphAngle = angle * 360.0 / 254.0;\n  float mapAngle = u_mapRotation * 360.0 / 254.0;\n  float diffAngle = min(360.0 - abs(mapAngle - glyphAngle), abs(mapAngle - glyphAngle));\n  float z = 0.0;\n  z += u_mapAligned * (2.0 * (1.0 - step(minZoom, u_zoomLevel)));\n  z += u_mapAligned * 2.0 * step(90.0, diffAngle);\n  z += 2.0 * (1.0 - step(u_zoomLevel, maxZoom));\n  return z;\n}\nvoid main()\n{\n  INIT;\n  float groupMinZoom    = getMinZoom();\n  float glyphMinZoom    = a_glyphData.x;\n  float glyphMaxZoom    = a_glyphData.y;\n  float glyphAngle      = a_glyphData.z;\n  float a_minZoom          = max(groupMinZoom, glyphMinZoom);\n  float a_placementPadding = a_refSymbolAndPlacementOffset.x * EXTRUDE_SCALE_PLACEMENT_PADDING;\n  vec2  a_placementDir     = unpack_u8_nf32(a_refSymbolAndPlacementOffset.zw);\n  float a_refSymbolSize    = a_refSymbolAndPlacementOffset.y;\n  float fontSize           = a_texAndSize.z;\n  float haloSize           = a_texAndSize.w * OUTLINE_SCALE;\n  vec2  vertexOffset = a_vertexOffset * OFFSET_PRECISION;\n  vec3  pos          = vec3(a_pos * POSITION_PRECISION, 1.0);\n  float z            = getZ(a_minZoom, glyphMaxZoom, glyphAngle);\n  float fontScale    = fontSize / SDF_FONT_SIZE;\n  float halfSize     = getSize(a_refSymbolSize) / 2.0;\n  float animation    = pow(getAnimationState(), vec4(2.0)).r;\n  v_color     = animation * ((1.0 - u_isHalo) * a_color + (u_isHalo * a_haloColor));\n  v_opacity   = 1.0;\n  v_tex       = a_texCoords / u_mosaicSize;\n  v_edgeDistanceOffset = u_isHalo * haloSize / fontScale / MAX_SDF_DISTANCE;\n  v_antialiasingWidth  = 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\n  vec2 placementOffset = a_placementDir * (halfSize + a_placementPadding);\n  vec3 glyphOffset     = u_displayMat3 * vec3(vertexOffset + placementOffset, 0.0);\n  vec3 v_pos           = vec3((u_dvsMat3 * pos + glyphOffset).xy, z);\n  gl_Position = vec4(applyFilterLabels(v_color, v_pos, getFilterFlags()), 1.0);\n#ifdef DEBUG\n  v_color = vec4(a_color.rgb, z == 0.0 ? 1.0 : 0.645);\n#endif\n}"},line:{"common.glsl":"varying lowp vec4 v_color;\nvarying highp vec4 v_id;\nvarying mediump vec2 v_normal;\nvarying mediump float v_lineHalfWidth;\nvarying lowp float v_opacity;\nvarying highp vec3 v_pos;\n#ifdef PATTERN\nuniform mediump vec2 u_mosaicSize;\nvarying mediump vec4 v_tlbr;\nvarying mediump vec2 v_patternSize;\n#endif\n#if defined(PATTERN) || defined(SDF)\nvarying highp float v_accumulatedDistance;\n#endif","line.frag":"precision lowp float;\n#include <util/encoding.glsl>\n#include <materials/constants.glsl>\n#include <materials/line/common.glsl>\nuniform lowp float u_blur;\nuniform mediump float u_zoomFactor;\n#if defined(PATTERN) || defined(SDF)\nuniform sampler2D u_texture;\n#endif\n#ifdef SDF\nconst float sdfPatternHalfWidth = 15.5;\nconst float widthFactor = 2.0;\n#endif\nvoid main()\n{\n  mediump float thinLineFactor = max(THIN_LINE_WIDTH_FACTOR * step(v_lineHalfWidth, THIN_LINE_HALF_WIDTH), 1.0);\n  mediump float fragDist = length(v_normal) * v_lineHalfWidth;\n  lowp float alpha = clamp(thinLineFactor * (v_lineHalfWidth - fragDist) / (u_blur + thinLineFactor - 1.0), 0.0, 1.0);\n#if defined(SDF) && !defined(HIGHLIGHT)\n  mediump float lineHalfWidth = widthFactor * v_lineHalfWidth;\n  mediump float lineWidthRatio = lineHalfWidth / sdfPatternHalfWidth;\n  mediump float relativeTexX = mod((u_zoomFactor * v_accumulatedDistance + v_normal.x * lineHalfWidth) / (lineWidthRatio * v_patternSize.x), 1.0);\n  mediump float relativeTexY = 0.5 + 0.5 * v_normal.y;\n  mediump vec2 texCoord = mix(v_tlbr.xy, v_tlbr.zw, vec2(relativeTexX, relativeTexY));\n  mediump float d = rgba2float(texture2D(u_texture, texCoord)) - 0.5;\n  float dist = d * lineHalfWidth;\n  lowp vec4 fillPixelColor = v_opacity * alpha * clamp(0.5 - dist, 0.0, 1.0) * v_color;\n  gl_FragColor = fillPixelColor;\n#elif defined(PATTERN) && !defined(HIGHLIGHT)\n  mediump float lineHalfWidth = v_lineHalfWidth;\n  mediump float adjustedPatternWidth = v_patternSize.x * 2.0 * lineHalfWidth / v_patternSize.y;\n  mediump float relativeTexX = mod((u_zoomFactor * v_accumulatedDistance + v_normal.x * lineHalfWidth) / adjustedPatternWidth, 1.0);\n  mediump float relativeTexY = 0.5 + 0.5 * v_normal.y;\n  mediump vec2 texCoord = mix(v_tlbr.xy, v_tlbr.zw, vec2(relativeTexY, relativeTexX));\n  lowp vec4 color = texture2D(u_texture, texCoord);\n  gl_FragColor = v_opacity * alpha * v_color * color;\n#else\n  gl_FragColor = v_opacity * alpha * v_color;\n#endif\n#ifdef HIGHLIGHT\n  gl_FragColor.a = step(1.0 / 255.0, gl_FragColor.a);\n#endif\n#ifdef ID\n  if (gl_FragColor.a < 1.0 / 255.0) {\n    discard;\n  }\n  gl_FragColor = v_id;\n#endif\n}","line.vert":"precision highp float;\nattribute vec4 a_color;\nattribute vec4 a_offsetAndNormal;\nattribute vec2 a_accumulatedDistanceAndHalfWidth;\nattribute vec4 a_tlbr;\nattribute vec4 a_segmentDirection;\nattribute vec2 a_aux;\n#include <materials/vcommon.glsl>\n#include <materials/line/common.glsl>\nconst float SCALE = 1.0 / 31.0;\nconst float WIDTH_SCALE = 1.0 / 1024.0;\nfloat getBaseLineHalfWidth(in float in_lineHalfWidth) {\n#ifdef VV_SIZE\n  float referenceHalfWidth = a_aux.x * WIDTH_SCALE;\n  float lineWidth = 2.0 * in_lineHalfWidth;\n  return 0.5 * (in_lineHalfWidth / referenceHalfWidth) * getSize(lineWidth);\n#else\n  return in_lineHalfWidth;\n#endif\n}\nfloat getLineHalfWidth(in float baseWidth, in float aa) {\n  float halfWidth = max(baseWidth + aa, 0.45) + 0.1 * aa;\n#ifdef HIGHLIGHT\n  halfWidth = max(halfWidth, 2.0);\n#endif\n  return halfWidth;\n}\nvec2 getDist(in vec2 offset, in float halfWidth) {\n  float thinLineFactor = max(THIN_LINE_WIDTH_FACTOR * step(halfWidth, THIN_LINE_HALF_WIDTH), 1.0);\n#if defined(SDF) && !defined(HIGHLIGHT)\n  thinLineFactor *= 2.0;\n#endif\n  return thinLineFactor * halfWidth * offset * SCALE;\n}\nvoid main()\n{\n  INIT;\n  float a_bitSet          = a_segmentDirection.w;\n  float a_accumulatedDist = a_accumulatedDistanceAndHalfWidth.x;\n  float a_lineHalfWidth   = a_accumulatedDistanceAndHalfWidth.y * WIDTH_SCALE;\n  float aa                = 0.5 * u_antialiasing;\n  vec2  a_offset          = a_offsetAndNormal.xy;\n  float baseWidth = getBaseLineHalfWidth(a_lineHalfWidth);\n  float halfWidth = getLineHalfWidth(baseWidth, aa);\n  float z         = 2.0 * step(baseWidth, 0.0);\n  vec2  dist      = getDist(a_offset, halfWidth);\n  vec3  offset    = u_displayViewMat3 * vec3(dist, 0.0);\n  vec3  pos       = u_dvsMat3 * vec3(a_pos * POSITION_PRECISION, 1.0) + offset;\n  v_color         = getColor(a_color, a_bitSet, 0);\n  v_opacity       = getOpacity();\n  v_lineHalfWidth = halfWidth;\n  v_id            = norm(a_id);\n  v_normal        = a_offsetAndNormal.zw * SCALE;\n  v_pos           = vec3(pos.xy, z);\n#ifdef PATTERN\n  v_tlbr          = a_tlbr / u_mosaicSize.xyxy;\n  v_patternSize   = vec2(a_tlbr.z - a_tlbr.x, a_tlbr.w - a_tlbr.y);\n#endif\n#if defined(PATTERN) || defined(SDF)\n  v_accumulatedDistance = a_accumulatedDist + dot(SCALE * a_segmentDirection.xy, dist / u_zoomFactor);\n#endif\n  gl_Position = vec4(applyFilter(v_color, v_pos, getFilterFlags()), 1.0);\n}"},text:{"common.glsl":"uniform highp vec2 u_mosaicSize;\nvarying highp vec4 v_id;\nvarying mediump vec3 v_pos;\nvarying lowp float v_opacity;\nvarying lowp vec4 v_color;\nvarying highp vec2 v_tex;\nvarying mediump float v_antialiasingWidth;\nvarying mediump float v_edgeDistanceOffset;\nvarying lowp float v_transparency;","text.frag":"precision mediump float;\n#include <materials/text/common.glsl>\nuniform lowp sampler2D u_texture;\nvoid main()\n{\n  float SDF_CUTOFF = (2.0 / 8.0);\n  float SDF_BASE_EDGE_DIST = 1.0 - SDF_CUTOFF;\n  lowp float dist = texture2D(u_texture, v_tex).a;\n  mediump float edge = SDF_BASE_EDGE_DIST - v_edgeDistanceOffset;\n#ifdef HIGHLIGHT\n  edge /= 2.0;\n#endif\n  lowp float aa = v_antialiasingWidth;\n  lowp float alpha = smoothstep(edge - aa, edge + aa, dist);\n  gl_FragColor = alpha * v_color * v_opacity;\n#ifdef ID\n  if (gl_FragColor.a < 1.0 / 255.0) {\n    discard;\n  }\n  gl_FragColor = v_id;\n#endif\n}","text.vert":"precision highp float;\n#include <materials/utils.glsl>\n#include <materials/vcommon.glsl>\n#include <materials/text/common.glsl>\nattribute vec4 a_color;\nattribute vec4 a_haloColor;\nattribute vec4 a_texFontSize;\nattribute vec4 a_aux;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nuniform float u_isHalo;\nfloat getTextSize(in float baseSize, in float referenceSize) {\n#ifdef VV_SIZE\n  return getSize(baseSize);\n#endif\n  return baseSize;\n}\nvoid main()\n{\n  INIT;\n  float a_referenceSize = a_aux.z * a_aux.z / 256.0;\n  float a_bitSet        = a_aux.w;\n  float a_fontSize      = a_texFontSize.z;\n  vec2  a_offset        = a_vertexOffset * OFFSET_PRECISION;\n  vec3  in_pos        = vec3(a_pos * POSITION_PRECISION, 1.0);\n  float fontSize      = getTextSize(a_fontSize, a_referenceSize);\n  float scaleFactor   = fontSize / a_fontSize;\n  float fontScale     = fontSize / SDF_FONT_SIZE;\n  vec3  offset        = getRotation() * vec3(scaleFactor * a_offset, 0.0);\n  mat3  extrudeMatrix = getBit(a_bitSet, 0) == 1.0 ? u_displayViewMat3 : u_displayMat3;\n  v_color   = u_isHalo * a_haloColor + (1.0 - u_isHalo) * getColor(a_color, a_bitSet, 1);\n  v_opacity = getOpacity();\n  v_id      = norm(a_id);\n  v_tex     = a_texCoords / u_mosaicSize;\n  v_pos     = u_dvsMat3 * in_pos + extrudeMatrix * offset;\n  v_edgeDistanceOffset = u_isHalo * OUTLINE_SCALE * a_texFontSize.w / fontScale / MAX_SDF_DISTANCE;\n  v_antialiasingWidth  = 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\n  gl_Position =  vec4(applyFilter(v_color, v_pos, getFilterFlags()), 1.0);\n}"},"utils.glsl":"float rshift(in float u32, in int amount) {\n  return floor(u32 / pow(2.0, float(amount)));\n}\nfloat getBit(in float bitset, in int bitIndex) {\n  float offset = pow(2.0, float(bitIndex));\n  return mod(floor(bitset / offset), 2.0);\n}\nfloat getFilterBit(in float bitset, in int bitIndex) {\n  return getBit(bitset, bitIndex + 1);\n}\nfloat getHighlightBit(in float bitset) {\n  return getBit(bitset, 0);\n}\nhighp vec4 unpackDisplayIdTexel(in highp vec4 bitset) {\n  float isAggregate = getBit(bitset.a, 7);\n  return (1.0 - isAggregate) * bitset + isAggregate * (vec4(bitset.rgba) - vec4(0.0, 0.0, 0.0, float(0x80)));\n}\nvec4 unpack(in float u32) {\n  float r = mod(rshift(u32, 0), 255.0);\n  float g = mod(rshift(u32, 8), 255.0);\n  float b = mod(rshift(u32, 16), 255.0);\n  float a = mod(rshift(u32, 24), 255.0);\n  return vec4(r, g, b, a);\n}\nvec4 norm(in vec4 v) {\n  return v /= 255.0;\n}\nfloat max4(vec4 target) {\n  return max(max(max(target.x, target.y), target.z), target.w);\n}\nvec2 unpack_u8_nf32(vec2 bytes) {\n  return (bytes - 127.0) / 127.0;\n}","vcommon.glsl":"#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <materials/attributeData.glsl>\n#include <materials/vv.glsl>\nattribute vec2 a_pos;\nattribute highp vec4 a_id;\nuniform highp mat3 u_dvsMat3;\nuniform highp mat3 u_displayMat3;\nuniform highp mat3 u_displayViewMat3;\nuniform highp float u_pixelRatio;\nuniform mediump float u_zoomFactor;\nuniform mediump float u_antialiasing;\nvec4 VV_ADATA = vec4(0.0);\nvoid loadVisualVariableData(inout vec4 target) {\n#ifdef OES_TEXTURE_FLOAT\n  target.rgba = getAttributeData2(a_id);\n#else\n  vec4 data0 = getAttributeData2(a_id);\n  vec4 data1 = getAttributeData3(a_id);\n  target.r = u88VVToFloat(data0.rg * 255.0);\n  target.g = u88VVToFloat(data0.ba * 255.0);\n  target.b = u88VVToFloat(data1.rg * 255.0);\n  target.a = u88VVToFloat(data1.ba * 255.0);\n#endif\n}\n#ifdef VV\n  #define INIT loadVisualVariableData(VV_ADATA)\n#else\n  #define INIT\n#endif\nvec4 getColor(in vec4 a_color, in float a_bitSet, int index) {\n#ifdef VV_COLOR\n  float isColorLocked   = getBit(a_bitSet, index);\n  return getVVColor(VV_ADATA[ATTR_VV_COLOR], a_color, isColorLocked);\n#else\n  return a_color;\n#endif\n}\nfloat getOpacity() {\n#ifdef VV_OPACITY\n  return getVVOpacity(VV_ADATA[ATTR_VV_OPACITY]);\n#else\n  return 1.0;\n#endif\n}\nfloat getSize(in float in_size) {\n#ifdef VV_SIZE\n  return getVVSize(in_size, VV_ADATA[ATTR_VV_SIZE]);\n#else\n  return in_size;\n#endif\n}\nmat3 getRotation() {\n#ifdef VV_ROTATION\n  return getVVRotationMat3(mod(VV_ADATA[ATTR_VV_ROTATION], 360.0));\n#else\n  return mat3(1.0);\n#endif\n}\nfloat getFilterFlags() {\n#ifdef IGNORES_SAMPLER_PRECISION\n  return ceil(getAttributeData0(a_id).x * 255.0);\n#else\n  return getAttributeData0(a_id).x * 255.0;\n#endif\n}\nvec4 getAnimationState() {\n  return getAttributeData1(a_id);\n}\nfloat getMinZoom() {\n  vec4 data0 = getAttributeData0(a_id) * 255.0;\n  return data0.g;\n}\nmat3 getMatrix(float isMapAligned) {\n  return isMapAligned * u_displayViewMat3 + (1.0 - isMapAligned) * u_displayMat3;\n}\nvec3 applyFilter(inout vec4 color, inout vec3 pos, in float filterFlags) {\n  pos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 0));\n#ifdef INSIDE\n  pos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 1));\n#elif defined(OUTSIDE)\n  pos.z += 2.0 * getFilterBit(filterFlags, 1);\n#elif defined(HIGHLIGHT)\n  #if !defined(HIGHLIGHT_ALL)\n    pos.z += 2.0 * (1.0 - getHighlightBit(filterFlags));\n  #endif\n#endif\n  return pos;\n}\nvec3 applyFilterLabels(inout vec4 color, inout vec3 pos, in float filterFlags) {\n  pos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 0));\n#ifndef OUTSIDE_LABELS_VISIBLE\n  pos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 1));\n#endif\n  return pos;\n}","vv.glsl":"#if defined(VV_SIZE_MIN_MAX_VALUE) || defined(VV_SIZE_SCALE_STOPS) || defined(VV_SIZE_FIELD_STOPS) || defined(VV_SIZE_UNIT_VALUE)\n  #define VV_SIZE\n#endif\n#if defined(VV_COLOR) || defined(VV_SIZE) || defined(VV_OPACITY) || defined(VV_ROTATION)\n  #define VV\n#endif\n#ifdef VV_COLOR\nuniform highp float u_vvColorValues[8];\nuniform vec4 u_vvColors[8];\n#endif\n#ifdef VV_SIZE_MIN_MAX_VALUE\nuniform highp vec4 u_vvSizeMinMaxValue;\n#endif\n#ifdef VV_SIZE_SCALE_STOPS\nuniform highp float u_vvSizeScaleStopsValue;\n#endif\n#ifdef VV_SIZE_FIELD_STOPS\nuniform highp float u_vvSizeFieldStopsValues[6];\nuniform float u_vvSizeFieldStopsSizes[6];\n#endif\n#ifdef VV_SIZE_UNIT_VALUE\nuniform highp float u_vvSizeUnitValueWorldToPixelsRatio;\n#endif\n#ifdef VV_OPACITY\nuniform highp float u_vvOpacityValues[8];\nuniform float u_vvOpacities[8];\n#endif\n#ifdef VV_ROTATION\nuniform lowp float u_vvRotationType;\n#endif\nbool isNan(float val) {\n  return (val == NAN_MAGIC_NUMBER);\n}\n#ifdef VV_SIZE_MIN_MAX_VALUE\nfloat getVVMinMaxSize(float sizeValue, float fallback) {\n  if (isNan(sizeValue)) {\n    return fallback;\n  }\n  float interpolationRatio = (sizeValue  - u_vvSizeMinMaxValue.x) / (u_vvSizeMinMaxValue.y - u_vvSizeMinMaxValue.x);\n  interpolationRatio = clamp(interpolationRatio, 0.0, 1.0);\n  return u_vvSizeMinMaxValue.z + interpolationRatio * (u_vvSizeMinMaxValue.w - u_vvSizeMinMaxValue.z);\n}\n#endif\n#ifdef VV_SIZE_FIELD_STOPS\nconst int VV_SIZE_N = 6;\nfloat getVVStopsSize(float sizeValue, float fallback) {\n  if (isNan(sizeValue)) {\n    return fallback;\n  }\n  if (sizeValue <= u_vvSizeFieldStopsValues[0]) {\n    return u_vvSizeFieldStopsSizes[0];\n  }\n  for (int i = 1; i < VV_SIZE_N; ++i) {\n    if (u_vvSizeFieldStopsValues[i] >= sizeValue) {\n      float f = (sizeValue - u_vvSizeFieldStopsValues[i-1]) / (u_vvSizeFieldStopsValues[i] - u_vvSizeFieldStopsValues[i-1]);\n      return mix(u_vvSizeFieldStopsSizes[i-1], u_vvSizeFieldStopsSizes[i], f);\n    }\n  }\n  return u_vvSizeFieldStopsSizes[VV_SIZE_N - 1];\n}\n#endif\n#ifdef VV_SIZE_UNIT_VALUE\nfloat getVVUnitValue(float sizeValue, float fallback) {\n  if (isNan(sizeValue)) {\n    return fallback;\n  }\n  return u_vvSizeUnitValueWorldToPixelsRatio * sizeValue;\n}\n#endif\n#ifdef VV_OPACITY\nconst int VV_OPACITY_N = 8;\nfloat getVVOpacity(float opacityValue) {\n  if (isNan(opacityValue)) {\n    return 1.0;\n  }\n  if (opacityValue <= u_vvOpacityValues[0]) {\n    return u_vvOpacities[0];\n  }\n  for (int i = 1; i < VV_OPACITY_N; ++i) {\n    if (u_vvOpacityValues[i] >= opacityValue) {\n      float f = (opacityValue - u_vvOpacityValues[i-1]) / (u_vvOpacityValues[i] - u_vvOpacityValues[i-1]);\n      return mix(u_vvOpacities[i-1], u_vvOpacities[i], f);\n    }\n  }\n  return u_vvOpacities[VV_OPACITY_N - 1];\n}\n#endif\n#ifdef VV_ROTATION\nmat4 getVVRotation(float rotationValue) {\n  if (isNan(rotationValue)) {\n    return mat4(1, 0, 0, 0,\n                0, 1, 0, 0,\n                0, 0, 1, 0,\n                0, 0, 0, 1);\n  }\n  float rotation = rotationValue;\n  if (u_vvRotationType == 1.0) {\n    rotation = 90.0 - rotation;\n  }\n  float angle = C_DEG_TO_RAD * rotation;\n  float sinA = sin(angle);\n  float cosA = cos(angle);\n  return mat4(cosA, sinA, 0, 0,\n              -sinA,  cosA, 0, 0,\n              0,     0, 1, 0,\n              0,     0, 0, 1);\n}\nmat3 getVVRotationMat3(float rotationValue) {\n  if (isNan(rotationValue)) {\n    return mat3(1, 0, 0,\n                0, 1, 0,\n                0, 0, 1);\n  }\n  float rotation = rotationValue;\n  if (u_vvRotationType == 1.0) {\n    rotation = 90.0 - rotation;\n  }\n  float angle = C_DEG_TO_RAD * -rotation;\n  float sinA = sin(angle);\n  float cosA = cos(angle);\n  return mat3(cosA, -sinA, 0,\n             sinA, cosA, 0,\n              0,    0,    1);\n}\n#endif\n#ifdef VV_COLOR\nconst int VV_COLOR_N = 8;\nvec4 getVVColor(float colorValue, vec4 fallback, float isColorLocked) {\n  if (isNan(colorValue) || isColorLocked == 1.0) {\n    return fallback;\n  }\n  if (colorValue <= u_vvColorValues[0]) {\n    return u_vvColors[0];\n  }\n  for (int i = 1; i < VV_COLOR_N; ++i) {\n    if (u_vvColorValues[i] >= colorValue) {\n      float f = (colorValue - u_vvColorValues[i-1]) / (u_vvColorValues[i] - u_vvColorValues[i-1]);\n      return mix(u_vvColors[i-1], u_vvColors[i], f);\n    }\n  }\n  return u_vvColors[VV_COLOR_N - 1];\n}\n#endif\nfloat getVVSize(in float size, in float vvSize)  {\n#ifdef VV_SIZE_MIN_MAX_VALUE\n  return getVVMinMaxSize(vvSize, size);\n#elif defined(VV_SIZE_SCALE_STOPS)\n  return u_vvSizeScaleStopsValue;\n#elif defined(VV_SIZE_FIELD_STOPS)\n  float outSize = getVVStopsSize(vvSize, size);\n  return isNan(outSize) ? size : outSize;\n#elif defined(VV_SIZE_UNIT_VALUE)\n  return getVVUnitValue(vvSize, size);\n#else\n  return size;\n#endif\n}"},"post-processing":{blit:{"blit.frag":"precision mediump float;\nuniform sampler2D u_texture;\nvarying vec2 v_uv;\nvoid main() {\n  gl_FragColor = texture2D(u_texture, v_uv);\n}"},bloom:{composite:{"composite.frag":"precision mediump float;\nvarying vec2 v_uv;\nuniform sampler2D u_blurTexture1;\nuniform sampler2D u_blurTexture2;\nuniform sampler2D u_blurTexture3;\nuniform sampler2D u_blurTexture4;\nuniform sampler2D u_blurTexture5;\nuniform float u_bloomStrength;\nuniform float u_bloomRadius;\nuniform float u_bloomFactors[NUMMIPS];\nuniform vec3 u_bloomTintColors[NUMMIPS];\nfloat lerpBloomFactor(const in float factor) {\n  float mirrorFactor = 1.2 - factor;\n  return mix(factor, mirrorFactor, u_bloomRadius);\n}\nvoid main() {\n  gl_FragColor = u_bloomStrength * (\n    lerpBloomFactor(u_bloomFactors[0]) * vec4(u_bloomTintColors[0], 1.0) * texture2D(u_blurTexture1, v_uv) +\n    lerpBloomFactor(u_bloomFactors[1]) * vec4(u_bloomTintColors[1], 1.0) * texture2D(u_blurTexture2, v_uv) +\n    lerpBloomFactor(u_bloomFactors[2]) * vec4(u_bloomTintColors[2], 1.0) * texture2D(u_blurTexture3, v_uv) +\n    lerpBloomFactor(u_bloomFactors[3]) * vec4(u_bloomTintColors[3], 1.0) * texture2D(u_blurTexture4, v_uv) +\n    lerpBloomFactor(u_bloomFactors[4]) * vec4(u_bloomTintColors[4], 1.0) * texture2D(u_blurTexture5, v_uv)\n  );\n}"},gaussianBlur:{"gaussianBlur.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nuniform vec2 u_direction;\nvarying vec2 v_uv;\n#define KERNEL_RADIUS RADIUS\n#define SIGMA RADIUS\nfloat gaussianPdf(in float x, in float sigma) {\n    return 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\n}\nvoid main() {\n  vec2 invSize = 1.0 / u_texSize;\n  float fSigma = float(SIGMA);\n  float weightSum = gaussianPdf(0.0, fSigma);\n  vec4 pixelColorSum = texture2D(u_colorTexture, v_uv) * weightSum;\n  for (int i = 1; i < KERNEL_RADIUS; i ++) {\n    float x = float(i);\n    float w = gaussianPdf(x, fSigma);\n    vec2 uvOffset = u_direction * invSize * x;\n    vec4 sample1 = texture2D(u_colorTexture, v_uv + uvOffset);\n    vec4 sample2 = texture2D(u_colorTexture, v_uv - uvOffset);\n    pixelColorSum += (sample1 + sample2) * w;\n    weightSum += 2.0 * w;\n  }\n  gl_FragColor = pixelColorSum /weightSum;\n}"},luminosityHighPass:{"luminosityHighPass.frag":"precision mediump float;\nuniform sampler2D u_texture;\nuniform vec3 u_defaultColor;\nuniform float u_defaultOpacity;\nuniform float u_luminosityThreshold;\nuniform float u_smoothWidth;\nvarying vec2 v_uv;\nvoid main() {\n  vec4 texel = texture2D(u_texture, v_uv);\n  vec3 luma = vec3(0.299, 0.587, 0.114);\n  float v = dot(texel.xyz, luma);\n  vec4 outputColor = vec4(u_defaultColor.rgb, u_defaultOpacity);\n  float alpha = smoothstep(u_luminosityThreshold, u_luminosityThreshold + u_smoothWidth, v);\n  gl_FragColor = mix(outputColor, texel, alpha);\n}"}},blur:{gaussianBlur:{"gaussianBlur.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nuniform vec2 u_direction;\nuniform float u_sigma;\nvarying vec2 v_uv;\n#define KERNEL_RADIUS RADIUS\nfloat gaussianPdf(in float x, in float sigma) {\n    return 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\n}\nvoid main() {\n  vec2 invSize = 1.0 / u_texSize;\n  float fSigma = u_sigma;\n  float weightSum = gaussianPdf(0.0, fSigma);\n  vec4 pixelColorSum = texture2D(u_colorTexture, v_uv) * weightSum;\n  for (int i = 1; i < KERNEL_RADIUS; i ++) {\n    float x = float(i);\n    float w = gaussianPdf(x, fSigma);\n    vec2 uvOffset = u_direction * invSize * x;\n    vec4 sample1 = texture2D(u_colorTexture, v_uv + uvOffset);\n    vec4 sample2 = texture2D(u_colorTexture, v_uv - uvOffset);\n    pixelColorSum += (sample1 + sample2) * w;\n    weightSum += 2.0 * w;\n  }\n  gl_FragColor = pixelColorSum /weightSum;\n}"},"radial-blur":{"radial-blur.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nconst float sampleDist = 1.0;\nconst float sampleStrength = 2.2;\nvoid main(void) {\n    float samples[10];\n    samples[0] = -0.08;\n    samples[1] = -0.05;\n    samples[2] = -0.03;\n    samples[3] = -0.02;\n    samples[4] = -0.01;\n    samples[5] =  0.01;\n    samples[6] =  0.02;\n    samples[7] =  0.03;\n    samples[8] =  0.05;\n    samples[9] =  0.08;\n    vec2 dir = 0.5 - v_uv;\n    float dist = sqrt(dir.x * dir.x + dir.y * dir.y);\n    dir = dir / dist;\n    vec4 color = texture2D(u_colorTexture,v_uv);\n    vec4 sum = color;\n    for (int i = 0; i < 10; i++) {\n      sum += texture2D(u_colorTexture, v_uv + dir * samples[i] * sampleDist);\n    }\n    sum *= 1.0 / 11.0;\n    float t = dist * sampleStrength;\n    t = clamp(t, 0.0, 1.0);\n    gl_FragColor = mix(color, sum, t);\n}"}},dra:{"dra.frag":"precision mediump float;\nuniform sampler2D u_minColor;\nuniform sampler2D u_maxColor;\nuniform sampler2D u_texture;\nvarying vec2 v_uv;\nvoid main() {\n  vec4 minColor = texture2D(u_minColor, vec2(0.5));\n  vec4 maxColor = texture2D(u_maxColor, vec2(0.5));\n  vec4 color = texture2D(u_texture, v_uv);\n  vec3 minColorUnpremultiply = minColor.rgb / minColor.a;\n  vec3 maxColorUnpremultiply = maxColor.rgb / maxColor.a;\n  vec3 colorUnpremultiply = color.rgb / color.a;\n  vec3 range = maxColorUnpremultiply - minColorUnpremultiply;\n  gl_FragColor = vec4(color.a * (colorUnpremultiply - minColorUnpremultiply) / range, color.a);\n}","min-max":{"min-max.frag":"#extension GL_EXT_draw_buffers : require\nprecision mediump float;\n#define CELL_SIZE 2\nuniform sampler2D u_minTexture;\nuniform sampler2D u_maxTexture;\nuniform vec2 u_srcResolution;\nuniform vec2 u_dstResolution;\nvarying vec2 v_uv;\nvoid main() {\n  vec2 srcPixel = floor(gl_FragCoord.xy) * float(CELL_SIZE);\n  vec2 onePixel = vec2(1.0) / u_srcResolution;\n  vec2 uv = (srcPixel + 0.5) / u_srcResolution;\n  vec4 minColor = vec4(1.0);\n  vec4 maxColor = vec4(0.0);\n  for (int y = 0; y < CELL_SIZE; ++y) {\n    for (int x = 0; x < CELL_SIZE; ++x) {\n      vec2 offset = uv + vec2(x, y) * onePixel;\n      minColor = min(minColor, texture2D(u_minTexture, offset));\n      maxColor = max(maxColor, texture2D(u_maxTexture, offset));\n    }\n  }\n  gl_FragData[0] = minColor;\n  gl_FragData[1] = maxColor;\n}"}},"drop-shadow":{composite:{"composite.frag":"precision mediump float;\nuniform sampler2D u_layerFBOTexture;\nuniform sampler2D u_blurTexture;\nuniform vec4 u_shadowColor;\nvarying vec2 v_uv;\nvoid main() {\n  vec4 layerColor = texture2D(u_layerFBOTexture, v_uv);\n  vec4 blurColor = texture2D(u_blurTexture, v_uv);\n  gl_FragColor = ((1.0 - layerColor.a) * blurColor.a * u_shadowColor + layerColor);\n}"},"drop-shadow.vert":"precision mediump float;\nattribute vec2 a_position;\nuniform highp mat3 u_displayViewMat3;\nuniform highp vec2 u_offset;\nvarying vec2 v_uv;\nvoid main() {\n  vec3 offset = u_displayViewMat3 * vec3(u_offset, 0.0);\n  gl_Position = vec4(a_position, 0.0, 1.0) + vec4(offset, 0.0);\n  v_uv = (a_position + 1.0) / 2.0;\n}"},"edge-detect":{"frei-chen":{"frei-chen.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nvarying vec2 v_uv;\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[9];\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\nvoid main() {\n  G[0] = g0,\n  G[1] = g1,\n  G[2] = g2,\n  G[3] = g3,\n  G[4] = g4,\n  G[5] = g5,\n  G[6] = g6,\n  G[7] = g7,\n  G[8] = g8;\n  mat3 I;\n  float cnv[9];\n  vec3 sample;\n  for (float i = 0.0; i < 3.0; i++) {\n    for (float j = 0.0; j < 3.0; j++) {\n      sample = texture2D(u_colorTexture, v_uv + texel * vec2(i - 1.0,j - 1.0)).rgb;\n      I[int(i)][int(j)] = length(sample);\n    }\n  }\n  for (int i = 0; i < 9; i++) {\n    float dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\n    cnv[i] = dp3 * dp3;\n  }\n  float M = (cnv[0] + cnv[1]) + (cnv[2] + cnv[3]);\n  float S = (cnv[4] + cnv[5]) + (cnv[6] + cnv[7]) + (cnv[8] + M);\n  gl_FragColor = vec4(vec3(sqrt(M / S)), texture2D(u_colorTexture, v_uv).a);\n}"},sobel:{"sobel.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nuniform vec2 u_texSize;\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[2];\nconst mat3 g0 = mat3( 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, -1.0, -2.0, -1.0 );\nconst mat3 g1 = mat3( 1.0, 0.0, -1.0, 2.0, 0.0, -2.0, 1.0, 0.0, -1.0 );\nvoid main() {\n  mat3 I;\n  float cnv[2];\n  vec3 sample;\n  G[0] = g0;\n  G[1] = g1;\n  for (float i = 0.0; i < 3.0; i++) {\n    for (float j = 0.0; j < 3.0; j++) {\n      sample = texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\n      I[int(i)][int(j)] = length(sample);\n    }\n  }\n  for (int i = 0; i < 2; i++) {\n    float dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\n    cnv[i] = dp3 * dp3;\n  }\n  gl_FragColor = vec4(vec3(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1])), texture2D(u_colorTexture, v_uv).a);\n}"}},"edge-enhance":{"edge-enhance.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nuniform vec2 u_texSize;\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[2];\nconst mat3 g0 = mat3( 1.0, 0.0, -1.0, 1.0, 0.0, -1.0, 1.0, 0.0, -1.0 );\nconst mat3 g1 = mat3( 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, -1.0, -1.0, -1.0 );\nvoid main() {\n  mat3 I;\n  float cnv[2];\n  vec3 sample;\n  G[0] = g0;\n  G[1] = g1;\n  for (float i = 0.0; i < 3.0; i++) {\n    for (float j = 0.0; j < 3.0; j++) {\n      sample = texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\n      I[int(i)][int(j)] = length(sample);\n    }\n  }\n  for (int i = 0; i < 2; i++) {\n    float dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\n    cnv[i] = dp3 * dp3;\n  }\n  vec4 color = texture2D(u_colorTexture, v_uv);\n  gl_FragColor = vec4(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1]) * color);\n}"},filterEffect:{"filterEffect.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform mat4 u_coefficients;\nvarying vec2 v_uv;\nvoid main() {\n  vec4 color = texture2D(u_colorTexture, v_uv);\n  vec4 rgbw = u_coefficients * vec4(color.a > 0.0 ? color.rgb / color.a : vec3(0.0), 1.0);\n  float a = color.a;\n  gl_FragColor = vec4(a * rgbw.rgb, a);\n}"},pp:{"pp.vert":"precision mediump float;\nattribute vec2 a_position;\nvarying vec2 v_uv;\nvoid main() {\n  gl_Position = vec4(a_position, 0.0, 1.0);\n  v_uv = (a_position + 1.0) / 2.0;\n}"}},raster:{bitmap:{"bitmap.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\nuniform sampler2D u_texture;\nuniform highp vec2 u_coordScale;\nuniform lowp float u_opacity;\n#include <filtering/bicubic.glsl>\nvoid main() {\n#ifdef BICUBIC\n  vec4 color = sampleBicubicBSpline(u_texture, v_texcoord, u_coordScale);\n#else\n  vec4 color = texture2D(u_texture, v_texcoord);\n#endif\n  float alpha = u_opacity * color.a;\n  gl_FragColor = vec4(alpha * color.rgb, alpha);\n}","bitmap.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\n  v_texcoord = a_pos;\n  gl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"},common:{"common.glsl":"uniform sampler2D u_image;\nuniform int u_bandCount;\nuniform bool u_isFloatTexture;\nuniform bool u_flipY;\nuniform float u_opacity;\nuniform int u_resampling;\nuniform vec2 u_srcImageSize;\n#ifdef APPLY_PROJECTION\n#include <raster/common/projection.glsl>\n#endif\n#ifdef BICUBIC\n#include <filtering/bicubic.glsl>\n#endif\n#ifdef BILINEAR\n#include <filtering/bilinear.glsl>\n#endif\nvec2 getPixelLocation(vec2 coords) {\n  vec2 targetLocation = u_flipY ? vec2(coords.s, 1.0 - coords.t) : coords;\n#ifdef APPLY_PROJECTION\n  targetLocation = projectPixelLocation(targetLocation);\n#endif\n  return targetLocation;\n}\nbool isOutside(vec2 coords){\n   if (coords.t>1.00001 ||coords.t<-0.00001 || coords.s>1.00001 ||coords.s<-0.00001) {\n     return true;\n   } else {\n     return false;\n   }\n}\nvec4 getPixel(vec2 pixelLocation) {\n#ifdef BICUBIC\n  vec4 color = sampleBicubicBSpline(u_image, pixelLocation, u_srcImageSize);\n#elif defined(BILINEAR)\n  vec4 color = sampleBilinear(u_image, pixelLocation, u_srcImageSize);\n#else\n  vec4 color = texture2D(u_image, pixelLocation);\n#endif\n  return color;\n}","contrastBrightness.glsl":"uniform float u_contrastOffset;\nuniform float u_brightnessOffset;\nvec4 adjustContrastBrightness(vec4 currentPixel, bool isFloat) {\n  vec4 pixelValue = isFloat ? currentPixel * 255.0 : currentPixel;\n  float maxI = 255.0;\n  float mid = 128.0;\n  float c = u_contrastOffset;\n  float b = u_brightnessOffset;\n  vec4 v;\n  if (c > 0.0 && c < 100.0) {\n    v = (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) / (2.0 * (100.0 - c)) + mid;\n  } else if (c <= 0.0 && c > -100.0) {\n    v = (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) * (100.0 + c) / 20000.0 + mid;\n  } else if (c == 100.0) {\n    v = (200.0 * pixelValue - 100.0 * maxI + (maxI + 1.0) * (100.0 - c) + 2.0 * maxI * b);\n    v = (sign(v) + 1.0) / 2.0;\n  } else if (c == -100.0) {\n    v = vec4(mid, mid, mid, currentPixel.a);\n  }\n  return vec4(v.r / 255.0, v.g / 255.0, v.b / 255.0, currentPixel.a);\n}","projection.glsl":"uniform sampler2D u_transformGrid;\nuniform vec2 u_transformSpacing;\nuniform vec2 u_transformGridSize;\nuniform vec2 u_targetImageSize;\nvec2 projectPixelLocation(vec2 coords) {\n  vec2 index_image = floor(coords * u_targetImageSize);\n  vec2 oneTransformPixel = vec2(0.25 / u_transformGridSize.s, 1.0 / u_transformGridSize.t);\n  vec2 index_transform = floor(index_image / u_transformSpacing) / u_transformGridSize;\n  vec2 pos = fract((index_image + vec2(0.5, 0.5)) / u_transformSpacing);\n  vec2 srcLocation;\n  vec2 transform_location = index_transform + oneTransformPixel * 0.5;\n  if (pos.s <= pos.t) {\n    vec4 ll_abc = texture2D(u_transformGrid, vec2(transform_location.s, transform_location.t));\n    vec4 ll_def = texture2D(u_transformGrid, vec2(transform_location.s + oneTransformPixel.s, transform_location.t));\n    srcLocation.s = dot(ll_abc.rgb, vec3(pos, 1.0));\n    srcLocation.t = dot(ll_def.rgb, vec3(pos, 1.0));\n  } else {\n    vec4 ur_abc = texture2D(u_transformGrid, vec2(transform_location.s + 2.0 * oneTransformPixel.s, transform_location.t));\n    vec4 ur_def = texture2D(u_transformGrid, vec2(transform_location.s + 3.0 * oneTransformPixel.s, transform_location.t));\n    srcLocation.s = dot(ur_abc.rgb, vec3(pos, 1.0));\n    srcLocation.t = dot(ur_def.rgb, vec3(pos, 1.0));\n  }\n  return srcLocation;\n}"},hillshade:{"hillshade.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\n#include <raster/common/common.glsl>\nuniform int u_hillshadeType;\nuniform float u_sinZcosAs[6];\nuniform float u_sinZsinAs[6];\nuniform float u_cosZs[6];\nuniform float u_weights[6];\nuniform vec2 u_factor;\nuniform float u_minValue;\nuniform float u_maxValue;\n#include <raster/lut/colorize.glsl>\nfloat getNeighborHoodAlpha(float a, float b, float c, float d, float e, float f, float g, float h, float i){\n  if (a == 0.0 || a == 0.0 || a==0.0 || a == 0.0 || a == 0.0 || a==0.0 || a == 0.0 || a == 0.0 || a==0.0) {\n    return 0.0;\n  }\n  else {\n    return e;\n  }\n}\nvec3 rgb2hsv(vec3 c) {\n  vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n  vec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\n  vec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\n  float d = q.x - min(q.w, q.y);\n  float e = 1.0e-10;\n  return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), min(d / (q.x + e), 1.0), q.x);\n}\nvec3 hsv2rgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvec4 overlay(float val, float minValue, float maxValue, float hillshade) {\n  val = clamp((val - minValue) / (maxValue - minValue), 0.0, 1.0);\n  vec4 rgb = colorize(vec4(val, val, val, 1.0), 255.0);\n  vec3 hsv = rgb2hsv(rgb.xyz);\n  hsv.z = hillshade;\n  return vec4(hsv2rgb(hsv), 1.0) * rgb.a;\n}\nvoid main() {\n  vec2 pixelLocation = getPixelLocation(v_texcoord);\n  if (isOutside(pixelLocation)) {\n     gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n     return;\n  }\n  vec4 currentPixel = getPixel(pixelLocation);\n  if (currentPixel.a == 0.0) {\n    gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n  }\n  vec2 axy = vec2(-1.0, -1.0);\n  vec2 bxy = vec2(0.0, -1.0);\n  vec2 cxy = vec2(1.0, -1.0);\n  vec2 dxy = vec2(-1.0, 0.0);\n  vec2 fxy = vec2(1.0, 0.0);\n  vec2 gxy = vec2(-1.0, 1.0);\n  vec2 hxy = vec2(0.0, 1.0);\n  vec2 ixy = vec2(1.0, 1.0);\n  vec2 onePixel = 1.0 / u_srcImageSize;\n  if (pixelLocation.s < onePixel.s) {\n    axy[0] = 1.0;\n    dxy[0] = 1.0;\n    gxy[0] = 1.0;\n  }\n  if (pixelLocation.t < onePixel.t) {\n    axy[1] = 1.0;\n    bxy[1] = 1.0;\n    cxy[1] = 1.0;\n  }\n  if (pixelLocation.s > 1.0 - onePixel.s) {\n    cxy[0] = -1.0;\n    fxy[0] = -1.0;\n    ixy[0] = -1.0;\n  }\n  if (pixelLocation.t > 1.0 - onePixel.t) {\n    gxy[1] = -1.0;\n    hxy[1] = -1.0;\n    ixy[1] = -1.0;\n  }\n  vec4 va = texture2D(u_image, pixelLocation + onePixel * axy);\n  vec4 vb = texture2D(u_image, pixelLocation + onePixel * bxy);\n  vec4 vc = texture2D(u_image, pixelLocation + onePixel * cxy);\n  vec4 vd = texture2D(u_image, pixelLocation + onePixel * dxy);\n  vec4 ve = texture2D(u_image, pixelLocation);\n  vec4 vf = texture2D(u_image, pixelLocation + onePixel * fxy);\n  vec4 vg = texture2D(u_image, pixelLocation + onePixel * gxy);\n  vec4 vh = texture2D(u_image, pixelLocation + onePixel * hxy);\n  vec4 vi = texture2D(u_image, pixelLocation + onePixel * ixy);\n  float dzx = (vc + 2.0 * vf + vi - va - 2.0 * vd - vg).r * u_factor.s;\n  float dzy = (vg + 2.0 * vh + vi - va - 2.0 * vb - vc).r * u_factor.t;\n  float dzd = sqrt(1.0 + dzx * dzx + dzy * dzy);\n  float hillshade = 0.0;\n  if (u_hillshadeType == 0){\n\t   float cosDelta = u_sinZsinAs[0] * dzy - u_sinZcosAs[0] * dzx;\n     float z = (u_cosZs[0] + cosDelta) / dzd;\n     if (z < 0.0)  z = 0.0;\n\t   hillshade = z;\n  } else {\n\t  for (int k = 0; k < 6; k++) {\n\t\t float cosDelta = u_sinZsinAs[k] * dzy - u_sinZcosAs[k] * dzx;\n\t\t float z = (u_cosZs[k] + cosDelta) / dzd;\n\t\t if (z < 0.0) z = 0.0;\n     hillshade = hillshade + z * u_weights[k];\n\t\t if (k == 5) break;\n    }\n  }\n  float alpha = getNeighborHoodAlpha(va.a, vb.a, vc.a, vd.a, ve.a, vf.a, vg.a, vh.a, vi.a);\n#ifdef APPLY_COLORMAP\n  gl_FragColor = overlay(ve.r, u_minValue, u_maxValue, hillshade) * alpha * u_opacity;\n#else\n  gl_FragColor = vec4(hillshade, hillshade, hillshade, 1.0) * alpha * u_opacity;\n#endif\n}","hillshade.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\n  v_texcoord = a_pos;\n  gl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"},lut:{"colorize.glsl":"uniform sampler2D u_colormap;\nuniform float u_colormapOffset;\nuniform float u_colormapMaxIndex;\nvec4 colorize(vec4 currentPixel, float scaleFactor) {\n  float clrIndex = clamp(currentPixel.r * scaleFactor - u_colormapOffset, 0.0, u_colormapMaxIndex);\n  vec2 clrPosition = vec2((clrIndex + 0.5) / (u_colormapMaxIndex + 1.0), 0.0);\n  vec4 color = texture2D(u_colormap, clrPosition);\n  vec4 result = vec4(color.rgb, color.a * currentPixel.a);\n  return result;\n}","lut.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\n#include <raster/common/common.glsl>\n#include <raster/lut/colorize.glsl>\nvoid main() {\n  vec2 pixelLocation = getPixelLocation(v_texcoord);\n  if (isOutside(pixelLocation)) {\n     gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n     return;\n  }\n  vec4 currentPixel = getPixel(pixelLocation);\n  vec4 result = colorize(currentPixel, 1.0);\n  gl_FragColor = vec4(result.xyz, 1.0) * result.a * u_opacity;\n}","lut.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform highp float u_scale;\nuniform highp vec2 u_offset;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\n  v_texcoord = a_pos * u_scale + u_offset;\n  gl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"},stretch:{"stretch.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\n#include <raster/common/common.glsl>\nuniform float u_minCutOff[3];\nuniform float u_maxCutOff[3];\nuniform float u_minOutput;\nuniform float u_maxOutput;\nuniform float u_factor[3];\nuniform bool u_useGamma;\nuniform float u_gamma[3];\nuniform float u_gammaCorrection[3];\n#include <raster/lut/colorize.glsl>\nfloat stretchOneValue(float val, float minCutOff, float maxCutOff, float minOutput, float maxOutput, float factor, bool useGamma, float gamma, float gammaCorrection) {\n  if (val >= maxCutOff) {\n    return maxOutput;\n  } else if (val <= minCutOff) {\n    return minOutput;\n  }\n  float stretchedVal;\n  if (useGamma) {\n  \tfloat tempf = 1.0;\n\t  float outRange = maxOutput - minOutput;\n\t  float relativeVal = (val - minCutOff) / (maxCutOff - minCutOff);\n\t  if (gamma > 1.0) {\n      tempf -= pow(1.0 / outRange, relativeVal * gammaCorrection);\n    }\n    stretchedVal = (tempf * outRange * pow(relativeVal, 1.0 / gamma) + minOutput) / 255.0;\n  } else {\n    stretchedVal = minOutput + (val - minCutOff) * factor;\n  }\n  return stretchedVal;\n}\nvoid main() {\n  vec2 pixelLocation = getPixelLocation(v_texcoord);\n  if (isOutside(pixelLocation)) {\n     gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n     return;\n  }\n  vec4 currentPixel = getPixel(pixelLocation);\n#ifdef NOOP\n  gl_FragColor = vec4(currentPixel.rgb, 1.0) * currentPixel.a * u_opacity;\n  return;\n#endif\n  if (u_bandCount == 1) {\n    float grayVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\n#ifdef APPLY_COLORMAP\n      vec4 result = colorize(vec4(grayVal, grayVal, grayVal, 1.0), u_useGamma ? 255.0 : 1.0);\n      gl_FragColor = vec4(result.xyz, 1.0) * result.a * currentPixel.a * u_opacity;\n#else\n      gl_FragColor = vec4(grayVal, grayVal, grayVal, 1.0) * currentPixel.a * u_opacity;\n#endif\n  } else {\n    float redVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\n    float greenVal = stretchOneValue(currentPixel.g, u_minCutOff[1], u_maxCutOff[1], u_minOutput, u_maxOutput, u_factor[1], u_useGamma, u_gamma[1], u_gammaCorrection[1]);\n    float blueVal = stretchOneValue(currentPixel.b, u_minCutOff[2], u_maxCutOff[2], u_minOutput, u_maxOutput, u_factor[2], u_useGamma, u_gamma[2], u_gammaCorrection[2]);\n    gl_FragColor = vec4(redVal, greenVal, blueVal, 1.0) * currentPixel.a * u_opacity;\n  }\n}","stretch.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform highp float u_scale;\nuniform highp vec2 u_offset;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\n  v_texcoord = a_pos * u_scale + u_offset;\n  gl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"}},stencil:{"stencil.frag":"void main() {\n  gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n}","stencil.vert":"attribute vec2 a_pos;\nvoid main() {\n  gl_Position = vec4(a_pos, 0.0, 1.0);\n}"},tileInfo:{"tileInfo.frag":"uniform mediump sampler2D u_texture;\nvarying mediump vec2 v_tex;\nvoid main(void) {\n  lowp vec4 color = texture2D(u_texture, v_tex);\n  gl_FragColor = 0.75 * color;\n}","tileInfo.vert":"attribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform mediump float u_depth;\nuniform mediump vec2 u_coord_ratio;\nuniform mediump vec2 u_delta;\nuniform mediump vec2 u_dimensions;\nvarying mediump vec2 v_tex;\nvoid main() {\n  mediump vec2 offset = u_coord_ratio * vec2(u_delta + a_pos * u_dimensions);\n  vec3 v_pos = u_dvsMat3 * vec3(offset, 1.0);\n  gl_Position = vec4(v_pos.xy, 0.0, 1.0);\n  v_tex = a_pos;\n}"},util:{"encoding.glsl":"const vec4 rgba2float_factors = vec4(\n    255.0 / (256.0),\n    255.0 / (256.0 * 256.0),\n    255.0 / (256.0 * 256.0 * 256.0),\n    255.0 / (256.0 * 256.0 * 256.0 * 256.0)\n  );\nfloat rgba2float(vec4 rgba) {\n  return dot(rgba, rgba2float_factors);\n}"}};var o=new a.a((function(e){var t=i;return e.split("/").forEach((e=>{t&&(t=t[e])})),t}));function r(e){return o.resolveIncludes(e)}},833:function(e,t,n){"use strict";t.a=class{constructor(e){this.readFile=e}resolveIncludes(e){return this.resolve(e)}resolve(e,t=new Map){if(t.has(e))return t.get(e);var n=this.read(e);if(!n)throw new Error("cannot find shader file ".concat(e));for(var a=/^[^\S\n]*#include\s+<(\S+)>[^\S\n]?/gm,i=a.exec(n),o=[];null!=i;)o.push({path:i[1],start:i.index,length:i[0].length}),i=a.exec(n);var r=0,l="";return o.forEach((e=>{l+=n.slice(r,e.start),l+=t.has(e.path)?"":this.resolve(e.path,t),r=e.start+e.length})),l+=n.slice(r),t.set(e,l),l}read(e){return this.readFile(e)}}},897:function(e,t,n){"use strict";n.d(t,"a",(function(){return r})),n.d(t,"b",(function(){return i})),n.d(t,"c",(function(){return o})),n.d(t,"d",(function(){return c})),n.d(t,"e",(function(){return s})),n.d(t,"f",(function(){return l})),n.d(t,"g",(function(){return f})),n.d(t,"h",(function(){return u})),n.d(t,"i",(function(){return v})),n.d(t,"j",(function(){return m})),n.d(t,"k",(function(){return d}));n(80),n(208),n(263);var a=n(205);n(192);function i(e,t,n="nearest",i=!1){var o,r=!(i&&"u8"===t.pixelType),l=r?5126:5121,s=null==t.pixels||0===t.pixels.length?null:r?t.getAsRGBAFloat():t.getAsRGBA(),c=null==(o=e.capabilities.textureFloat)?void 0:o.textureFloatLinear,u={width:t.width,height:t.height,target:3553,pixelFormat:6408,internalFormat:e.isWebGL2Context()?34836:6408,samplingMode:!c||"bilinear"!==n&&"cubic"!==n?9728:9729,dataType:l,wrapMode:33071,flipped:!1};return new a.a(e,u,s)}function o(e,t){for(var n=4*t.size[0],i=t.size[1],o={width:n,height:i,target:3553,pixelFormat:6408,internalFormat:e.isWebGL2Context()?34836:6408,dataType:5126,samplingMode:9728,wrapMode:33071,flipped:!1},r=new Float32Array(n*i*4),l=0,s=0;s<t.coefficients.length;s++)r[l++]=t.coefficients[s],s%3==2&&(r[l++]=1);return new a.a(e,o,r)}function r(e,t){var n={width:t.length/4,height:1,target:3553,pixelFormat:6408,internalFormat:6408,dataType:5121,samplingMode:9728,wrapMode:33071,flipped:!1};return new a.a(e,n,t)}function l(e,t,n,a=1,i=!0,o=!1){return{u_flipY:i,u_isFloatTexture:o,u_applyTransform:!!e,u_opacity:a,u_transformSpacing:e?e.spacing:null,u_transformGridSize:e?e.size:null,u_targetImageSize:t,u_srcImageSize:n}}function s(e,t){return{u_colormapOffset:t||0,u_colormapMaxIndex:e?e.length/4-1:null}}function c(e,t){return{u_scale:e,u_offset:t}}function u(e){return{u_bandCount:e.bandCount,u_minOutput:e.outMin,u_maxOutput:e.outMax,u_minCutOff:e.minCutOff,u_maxCutOff:e.maxCutOff,u_factor:e.factor,u_useGamma:e.useGamma,u_gamma:e.gamma,u_gammaCorrection:e.gammaCorrection}}function f(e){return{u_hillshadeType:e.hillshadeType,u_sinZcosAs:e.sinZcosAs,u_sinZsinAs:e.sinZsinAs,u_cosZs:e.cosZs,u_weights:e.weights,u_factor:e.factor,u_minValue:e.minValue,u_maxValue:e.maxValue}}function v(e,t){for(var n,a=e.gl,i=t.glName,o=a.getProgramParameter(i,a.ACTIVE_UNIFORMS),r=new Map,l=0;l<o;l++)(n=a.getActiveUniform(i,l))&&r.set(n.name,{location:a.getUniformLocation(i,n.name),info:n});return r}function d(e,t,n){Object.keys(n).forEach((a=>{var i=t.get(a)||t.get(a+"[0]");i&&function(e,t,n,a){if(null===a||null==n)return!1;var{info:i}=a;switch(i.type){case 5126:i.size>1?e.setUniform1fv(t,n):e.setUniform1f(t,n);break;case 35664:e.setUniform2fv(t,n);break;case 35665:e.setUniform3fv(t,n);break;case 35666:e.setUniform4fv(t,n);break;case 35675:e.setUniformMatrix3fv(t,n);break;case 35676:e.setUniformMatrix4fv(t,n);break;case 5124:i.size>1?e.setUniform1iv(t,n):e.setUniform1i(t,n);break;case 35670:e.setUniform1i(t,n?1:0);break;case 35667:case 35671:e.setUniform2iv(t,n);break;case 35668:case 35672:e.setUniform3iv(t,n);break;case 35669:case 35673:e.setUniform4iv(t,n);break;default:return!1}}(e,a,n[a],i)}))}function m(e,t,n,a){n.length===a.length&&(a.some((e=>null==e))||n.some((e=>null==e))||n.forEach(((n,i)=>{t.setUniform1i(n,i),e.bindTexture(a[i],i)})))}},956:function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var a=n(725),i={shaders:{vertexShader:Object(a.a)("background/background.vert"),fragmentShader:Object(a.a)("background/background.frag")},attributes:{a_pos:0}}}}]);
//# sourceMappingURL=8.044e1f06.chunk.js.map