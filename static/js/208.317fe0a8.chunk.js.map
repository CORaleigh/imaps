{"version":3,"sources":["../node_modules/@arcgis/core/layers/support/RasterWorker.js"],"names":["n","e","a","s","data","options","r","toJSON","pixelBlock","fromJSON","extent","o","this","symbolizer","symbolize","Promise","resolve","l","symbolizerJSON","histograms","rendererJSON","type","simpleStretch","srcPixelBlock","stretchParams","t","tileSize","maximumPyramidLevel","forEach","set","srcPixelBlocks","map","i","srcMosaicSize","coefs","m","destDimension","sampleSpacing","interpolation"],"mappings":"0MAI0VA,E,6HAAE,WAAaC,GAAb,eAAAC,EAAA,sEAA8BC,YAAEF,EAAEG,KAAKH,EAAEI,SAAzC,cAAsBC,EAAtB,yBAAyDA,GAAGA,EAAEC,UAA9D,2C,8EAAuE,SAAUJ,GAAGA,EAAEK,WAAWF,IAAEG,SAASN,EAAEK,YAAYL,EAAEO,OAAOP,EAAEO,OAAOT,IAAEQ,SAASN,EAAEO,QAAQ,KAAK,IAAMC,EAAEC,KAAKC,WAAWC,UAAUX,GAAG,OAAOY,QAAQC,QAAQL,GAAGA,EAAEJ,Y,qEAAU,WAAuBN,GAAvB,eAAAC,EAAA,sDAAgCU,KAAKC,WAAWI,IAAER,SAASR,EAAEiB,gBAAgBjB,EAAEkB,YAAY,mBAAmB,OAAOb,EAAEM,KAAKC,iBAAY,EAAOP,EAAEc,aAAaC,QAAQT,KAAKC,WAAWO,aAAaD,WAAWlB,EAAEkB,YAAhN,gD,4EAA4N,SAAQlB,GAAG,IAAME,EAAES,KAAKC,WAAWS,cAAchB,IAAEG,SAASR,EAAEsB,eAAetB,EAAEuB,eAAe,OAAOT,QAAQC,QAAQb,GAAGA,EAAEI,Y,0CAAU,SAA6BN,GAAG,IAAME,EAAEQ,YAAEL,IAAEG,SAASR,EAAEsB,gBAAgB,OAAOR,QAAQC,QAAQb,K,mBAAG,SAAMF,GAAG,IAAME,EAAEsB,YAAEnB,IAAEG,SAASR,EAAEsB,eAAetB,EAAEyB,SAASzB,EAAE0B,qBAAqB,OAAOxB,GAAGA,EAAEyB,SAAS,SAAC3B,EAAEK,GAAKH,EAAE0B,IAAIvB,EAAE,MAAML,OAAE,EAAOA,EAAEM,aAAaQ,QAAQC,QAAQb,K,uEAAG,WAAyBF,GAAzB,mBAAAC,EAAA,yDAAkCC,EAAEF,EAAE6B,eAAeC,KAAK,SAAA9B,GAAC,OAAEA,EAAE,IAAIK,IAAEL,GAAG,QAAOU,EAAEqB,YAAE7B,EAAEF,EAAEgC,eAAmBhC,EAAEiC,MAA5G,yCAAyHvB,GAAGA,EAAEJ,UAA9H,cAA6IkB,EAAEU,YAAExB,EAAEV,EAAEmC,cAAcnC,EAAEiC,MAAMjC,EAAEoC,cAAcpC,EAAEqC,eAA7L,kBAAmNb,GAAGA,EAAElB,UAAxN,2C,8DAAiPP","file":"static/js/208.317fe0a8.chunk.js","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.19/esri/copyright.txt for details.\n*/\nimport e from\"../../geometry/Extent.js\";import\"../../geometry.js\";import r from\"./PixelBlock.js\";import{decode as s}from\"./rasterFormats/RasterCodec.js\";import{estimateStatisticsHistograms as o,split as t,mosaic as i,approximateTransform as m}from\"./rasterFunctions/pixelUtils.js\";import l from\"../../renderers/support/RasterSymbolizer.js\";class n{async decode(e){const r=await s(e.data,e.options);return r&&r.toJSON()}symbolize(s){s.pixelBlock=r.fromJSON(s.pixelBlock),s.extent=s.extent?e.fromJSON(s.extent):null;const o=this.symbolizer.symbolize(s);return Promise.resolve(o&&o.toJSON())}async updateSymbolizer(e){var r;this.symbolizer=l.fromJSON(e.symbolizerJSON),e.histograms&&\"rasterStretch\"===(null==(r=this.symbolizer)?void 0:r.rendererJSON.type)&&(this.symbolizer.rendererJSON.histograms=e.histograms)}stretch(e){const s=this.symbolizer.simpleStretch(r.fromJSON(e.srcPixelBlock),e.stretchParams);return Promise.resolve(s&&s.toJSON())}estimateStatisticsHistograms(e){const s=o(r.fromJSON(e.srcPixelBlock));return Promise.resolve(s)}split(e){const s=t(r.fromJSON(e.srcPixelBlock),e.tileSize,e.maximumPyramidLevel);return s&&s.forEach(((e,r)=>{s.set(r,null==e?void 0:e.toJSON())})),Promise.resolve(s)}async mosaicAndTransform(e){const s=e.srcPixelBlocks.map((e=>e?new r(e):null)),o=i(s,e.srcMosaicSize);if(!e.coefs)return o&&o.toJSON();const t=m(o,e.destDimension,e.coefs,e.sampleSpacing,e.interpolation);return t&&t.toJSON()}}export default n;\n"],"sourceRoot":""}