{"version":3,"file":"static/js/4402.a4178bf6.chunk.js","mappings":"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","sources":["components/Panels/Layers/DevPlanFilter.tsx","components/Panels/Layers/utils/layers.tsx","components/Panels/Layers/utils/tips.ts","components/Panels/Layers/utils/useLayers.ts","components/Panels/Layers/Layers.tsx"],"sourcesContent":["import { CalciteSlider } from '@esri/calcite-components-react';\nimport React from 'react';\nimport { useEffect, useRef, useState } from 'react';\nimport './Layers.css';\ninterface Props {\n  datefield: string;\n  layer: __esri.FeatureLayer;\n}\nexport const DevPlanFilter = (props: Props) => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const loaded = useRef(false);\n  const [maxYear, setMaxYear] = useState<number>(0);\n  const [minYear, setMinYear] = useState<number>(0);\n\n  const getMinMax = async (layer: __esri.FeatureLayer, datefield: string) => {\n    const stats = await (props.layer as __esri.FeatureLayer).queryFeatures({\n      where: `EXTRACT(YEAR,${datefield}) >= 2010`,\n      returnGeometry: false,\n      outStatistics: [\n        {\n          statisticType: 'max',\n          onStatisticField: datefield,\n          outStatisticFieldName: 'MAX_DATE',\n        },\n        {\n          statisticType: 'min',\n          onStatisticField: datefield,\n          outStatisticFieldName: 'MIN_DATE',\n        },\n      ],\n      outFields: ['MAX_DATE', 'MIN_DATE'],\n    });\n\n    if (stats?.features.length) {\n      const max = new Date(stats.features[0].getAttribute('MAX_DATE')).getFullYear();\n      const min = new Date(stats.features[0].getAttribute('MIN_DATE')).getFullYear();\n      layer.definitionExpression = `EXTRACT(YEAR FROM ${props.datefield}) >= ${min}\n            AND EXTRACT(YEAR FROM ${props.datefield}) <= ${max}\n            `;\n      layer.refresh();\n      setMaxYear(max);\n      setMinYear(min);\n    }\n  };\n  useEffect(() => {\n    if (props.layer && props.datefield && !loaded.current) {\n      loaded.current = true;\n      getMinMax(props.layer, props.datefield);\n    }\n  }, []); // only after first render\n\n  return (\n    <div>\n      {/* <CalciteInputDatePicker overlay-positioning=\"fixed\" scale=\"m\" max={`2022-11-11`}\n        onCalciteInputDatePickerChange={e => {\n            console.log(e.detail);\n        }}\n        ></CalciteInputDatePicker> */}\n      <CalciteSlider\n        labelHandles\n        labelTicks\n        min={minYear}\n        max={maxYear}\n        maxValue={maxYear}\n        minValue={maxYear - 1}\n        minLabel={minYear.toString()}\n        maxLabel={maxYear.toString()}\n        onCalciteSliderChange={(e) => {\n          props.layer.definitionExpression = `EXTRACT(YEAR FROM ${props.datefield}) >= ${e.target.minValue}\n            AND EXTRACT(YEAR FROM ${props.datefield}) <= ${e.target.maxValue}\n            `;\n          props.layer.refresh();\n        }}\n      ></CalciteSlider>\n    </div>\n  );\n};\nexport default DevPlanFilter;\n","import MapView from '@arcgis/core/views/MapView';\nimport WebMap from '@arcgis/core/WebMap';\nimport Collection from '@arcgis/core/core/Collection';\nimport ActionToggle from '@arcgis/core/support/actions/ActionToggle';\nimport LayerList from '@arcgis/core/widgets/LayerList';\nimport { lazy, Suspense } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport FeatureLayer from '@arcgis/core/layers/FeatureLayer';\nimport DevPlanFilter from '../DevPlanFilter';\nconst OpacitySlider = lazy(() => import('../OpacitySlider'));\n\nexport const initializeLayers = async (ref: HTMLDivElement, view: MapView): Promise<LayerList> => {\n  try {\n    await addLayersFromWebmap(view);}\n  catch {\n    \n  }\n  const layers = new LayerList({\n    view: view,\n    container: ref,\n    listItemCreatedFunction: layerListItemCreated,\n  });\n  layers.on('trigger-action', (event: __esri.LayerListTriggerActionEvent) => {\n    if (event.item.layer.title === 'Property') {\n      togglePropertyLabels(event);\n    }\n  });\n  return layers;\n};\n\nconst addLayersFromWebmap = async (view: MapView) => {\n  const map = new WebMap({\n    portalItem: {\n      id: '95092428774c4b1fb6a3b6f5fed9fbc4',\n    },\n  });\n\n  map.loadAll().catch(error => {\n    console.log(error);\n  }).then(() => {\n    const groups = view.map.allLayers\n    .filter((layer) => {\n      return layer.type === 'group';\n    })\n    .toArray();\n  groups.forEach((group) => {\n    const match = map.allLayers.find((layer) => {\n      return layer.type === 'group' && layer.title === group.title;\n    }) as __esri.GroupLayer;\n\n    // match.layers.forEach((layer,i) => {\n    //   if ((group as __esri.GroupLayer).findLayerById(layer.id) ===\n    //   undefined) {\n    //     (group as __esri.GroupLayer).add(layer, i);\n    //   }\n    // });\n    const matchlayers = match.layers.slice();\n    const layers = match.layers.filter((layer) => {\n      const found = (group as __esri.GroupLayer).findLayerById(layer.id);\n      //attempting to update stored layer if updated in webmap (popup and renderer)\n      if (found !== undefined) {\n        if (found.type === 'feature') {\n          (found as __esri.FeatureLayer).popupTemplate = (layer as __esri.FeatureLayer).popupTemplate;\n          (found as __esri.FeatureLayer).renderer = (layer as __esri.FeatureLayer).renderer;\n        }\n      }\n\n      return (group as __esri.GroupLayer).findLayerById(layer.id) === undefined;\n    });\n    (group as __esri.GroupLayer).addMany(layers.toArray());\n\n    (group as __esri.GroupLayer).layers.forEach((layer1) => {\n      let index = matchlayers.findIndex((layer2) => {\n        return layer1.id === layer2.id;\n      });\n      (group as __esri.GroupLayer).reorder(layer1, index);\n    });\n    matchlayers.destroy();\n  });\n  return true;\n  });\n  \n};\nconst setPropertyColor = (layer: FeatureLayer, light: boolean) => {\n  const renderer = (layer.renderer as __esri.SimpleRenderer).clone();\n  if (light) {\n    (renderer.symbol as __esri.SimpleFillSymbol).outline.color.r = 0;\n    (renderer.symbol as __esri.SimpleFillSymbol).outline.color.g = 0;\n    (renderer.symbol as __esri.SimpleFillSymbol).outline.color.b = 0;\n  } else {\n    (renderer.symbol as __esri.SimpleFillSymbol).outline.color.r = 255;\n    (renderer.symbol as __esri.SimpleFillSymbol).outline.color.g = 255;\n    (renderer.symbol as __esri.SimpleFillSymbol).outline.color.b = 255;\n  }\n  layer.renderer = renderer;\n};\nconst togglePropertyColor = (layer: FeatureLayer, sections: any) => {\n  if (sections.length > 1) {\n    setPropertyColor(layer, !sections.getItemAt(1).getItemAt(0).value);\n  }\n};\nexport const togglePropertyLabels = (event: __esri.LayerListTriggerActionEvent) => {\n  if (event.item.layer.title === 'Property') {\n    togglePropertyColor(event.item.layer as FeatureLayer, event.item.actionsSections);\n    if (!(event.item.layer as __esri.FeatureLayer).labelsVisible) {\n      (event.item.layer as __esri.FeatureLayer).labelsVisible = true;\n    }\n    const selected = event.item.actionsSections.getItemAt(0).filter((section) => {\n      return (section as ActionToggle).value;\n    });\n\n    const selectedTitles = selected.map((section) => {\n      return (section as ActionToggle).title;\n    });\n\n    const selectedExpressions = propertyLabelExpressions.filter((expression) => {\n      return selectedTitles.includes(expression.title);\n    });\n    const expressions = selectedExpressions.map((expression) => {\n      return expression.expression;\n    });\n    const expression = expressions.join('+ TextFormatting.NewLine+');\n    (event.item.layer as __esri.FeatureLayer).labelingInfo = [];\n\n    //if ((event.action as ActionToggle).value) {\n    (event.item.layer as __esri.FeatureLayer).labelingInfo = [\n      {\n        // autocasts as new LabelClass()\n        symbol: {\n          type: 'text', // autocasts as new TextSymbol()\n          color: 'black',\n          haloColor: 'white',\n          haloSize: 1,\n          font: {\n            family: 'AvenirNext LT Pro Regular',\n            style: 'normal',\n            weight: 'bold',\n          },\n        },\n        labelExpressionInfo: {\n          expression: expression,\n        },\n        maxScale: 0,\n        minScale: 5000,\n      } as any,\n    ];\n    // }\n    // } else {\n    //   (event.item.layer as __esri.FeatureLayer).labelingInfo = (\n    //     event.item.layer as __esri.FeatureLayer\n    //   ).labelingInfo.filter((info) => {\n    //     return info.labelExpressionInfo.expression != expression.expression;\n    //   });\n    // }\n  }\n};\nconst propertyLabelExpressions: any[] = [\n  {\n    expression: `First(Split($feature['SITE_ADDRESS'], ' '))`,\n    title: 'Address',\n  },\n  {\n    expression: `$feature['PIN_NUM']`,\n    title: 'PIN',\n  },\n  {\n    expression: `$feature['REID']`,\n    title: 'REID',\n  },\n  {\n    expression: `When(IsEmpty($feature[\"SALE_DATE\"]),null, Concatenate(Month($feature[\"SALE_DATE\"])+1, '/',Day($feature[\"SALE_DATE\"]), '/',Year($feature[\"SALE_DATE\"])))`,\n    title: 'Sale Date',\n  },\n  {\n    expression: `Text($feature.TOTSALPRICE,'$#,###')`,\n    title: 'Sale Price',\n  },\n];\n\nconst addPropertyLabelToggles = (item: any) => {\n  if (item.layer.title === 'Property' && item.layer.type !== 'group' && item.actionsSections.length === 0) {\n    let toggles: Collection = new Collection();\n    toggles.addMany(\n      propertyLabelExpressions.map((expression) => {\n        return new ActionToggle({\n          value: item.layer.labelingInfo?.find((info: any) => {\n            return info.labelExpressionInfo?.expression.includes(expression.expression) && item.layer.labelsVisible;\n          }),\n          title: expression.title,\n          visible: true,\n        });\n      }),\n    );\n    (item as __esri.ListItem).actionsSections.push(toggles);\n\n    toggles = new Collection();\n    toggles.add(\n      new ActionToggle({\n        value: item.layer.renderer.symbol.outline.color.isBright,\n        title: 'Light Outline',\n        visible: true,\n      }) as any,\n    );\n    (item as __esri.ListItem).actionsSections.push(toggles);\n\n    (item as __esri.ListItem).actionsOpen = true;\n    setTimeout(() => {\n      const title = document.createElement('h4');\n      title.id = 'labels-actions-title';\n      title.textContent = 'Labels';\n      title.setAttribute('style', 'padding: 0.5em;margin: 0;');\n      const actions = document.querySelector('.esri-layer-list__item-actions');\n      if (actions?.parentElement && !document.getElementById('labels-actions-title')) {\n        actions.prepend(title);\n      }\n    }, 500);\n  }\n};\n\nconst addDevPlanFilters = (item: any) => {\n  if (\n    item.layer.title.includes('Development Plans') &&\n    item.layer.type !== 'group' &&\n    item.actionsSections.length === 0\n  ) {\n    const filter = document.createElement('filter-container');\n    const root = createRoot(filter as HTMLDivElement);\n    root.render(\n      <Suspense fallback={''}>\n        <DevPlanFilter datefield={'apply_date'} layer={item.layer} />\n      </Suspense>,\n    );\n    ((item as __esri.ListItem).panel.content as any[]).push(filter);\n  }\n};\n\nconst createPanel = (item: __esri.ListItem) => {\n  if (item.visible && !item.panel && item.layer.type !== 'group' && item.layer.type !== undefined) {\n    const slider = document.createElement('slider-container');\n    const root = createRoot(slider as HTMLDivElement);\n    root.render(\n      <Suspense fallback={''}>\n        <OpacitySlider value={item.layer.opacity} layer={item.layer} />\n      </Suspense>,\n    );\n\n    item.panel = {\n      content: [slider, 'legend'],\n      open: false,\n    } as __esri.ListItemPanel;\n    addDevPlanFilters(item);\n  }\n};\n\nconst layerListItemCreated = (event: any): void => {\n  const item = event.item;\n  createPanel(item);\n  item.open = item.layer.visible;\n  item.layer.watch('visible', (visible: boolean) => {\n    // if (item.panel) {\n    //   item.panel.open = visible;\n    // }\n    item.open = visible;\n    createPanel(item);\n\n    if (visible) {\n      if (item.layer.parent) {\n        if (item.layer.parent.type === 'group') {\n          item.layer.parent.visible = true;\n        }\n      }\n      if (item.layer.parent.parent) {\n        if (item.layer.parent.parent.type === 'group') {\n          item.layer.parent.parent.visible = true;\n        }\n      }\n    }\n  });\n  addPropertyLabelToggles(item);\n};\n\nexport const filterLayers = (value: string, layerList: __esri.LayerList): void => {\n  if (!value) {\n    value = '';\n  }\n  layerList.operationalItems.forEach((item: __esri.ListItem) => {\n    if (item.layer.type === 'group') {\n      let open = false;\n      (item.layer as __esri.GroupLayer).layers.forEach((layer) => {\n        if (layer.title.toLowerCase().includes(value.toLowerCase())) {\n          layer.listMode = 'show';\n          open = true;\n        } else {\n          layer.listMode = 'hide';\n        }\n        //handle second level group layers\n        if (layer.type === 'group') {\n          (layer as __esri.GroupLayer).layers.forEach((sublayer) => {\n            if (sublayer.title.toLowerCase().includes(value.toLowerCase())) {\n              layer.listMode = 'show';\n              sublayer.listMode = 'show';\n              open = true;\n            } else {\n              sublayer.listMode = 'hide';\n            }\n          });\n        }\n      });\n      item.open = value.length > 0 && open;\n      if (!value.length || open) {\n        document\n          .getElementById(`${(layerList as any).id}_${(item as any).uid}__title`)\n          ?.parentElement?.parentElement?.parentElement?.removeAttribute('hidden');\n      }\n      if (!open) {\n        document\n          .getElementById(`${(layerList as any).id}_${(item as any).uid}__title`)\n          ?.parentElement?.parentElement?.parentElement?.setAttribute('hidden', '');\n      }\n    }\n  });\n};\n\nexport const resetLayers = (list: __esri.LayerList) => {\n  const groups: Collection<__esri.GroupLayer> = list?.view.map.allLayers.filter((layer) => {\n    return layer.type === 'group';\n  }) as Collection<__esri.GroupLayer>;\n  groups.forEach((group) => {\n    group.visible = group.title === 'Property';\n    group.layers.forEach((layer) => {\n      layer.visible = layer.title === 'Property';\n    });\n  });\n};\n","export const tips = {\n  title: \"Layer List Tips\",\n  tips: [\n    {\n      title: \"Group Layers\",\n      text: \"Layers in the layer list are now grouped based on category, making it easier to find layers.\",\n    },\n  ],\n};\n","import { useCallback, useEffect, useRef, useState } from \"react\";\nimport { PanelProps } from \"../../utils/PanelProps\";\nimport { initializeLayers } from \"./layers\";\nimport { tips } from \"./tips\";\n\nconst useLayers = (props: PanelProps) => {\n  const ref = useRef() as any;\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const loaded = useRef(false);\n  const [layerList, setLayerList] = useState<__esri.LayerList>();\n  const [isLoading, setIsLoading] = useState(true);\n  const [isActive, setIsActive] = useState(false);\n\n  useEffect(() => {\n    if (!loaded.current) {\n      loaded.current = true;\n      initializeLayers(ref.current, props.view).then(\n        (layerList: __esri.LayerList) => {\n          setLayerList(layerList);\n          layerList.when(() => {\n            setIsLoading(false);\n          });\n        }\n      );\n    }\n    return () => {\n      layerList && layerList?.destroy();\n    };\n  }, []); // only after first render\n\n  useEffect(() => {\n    setIsActive(props.isActive);\n  }, [props.isActive]);\n  const panelDismissed = useCallback((e: any) => {\n    props.panelDismissed();\n  }, []);\n  const tipsClicked = useCallback((e: any) => {\n    props.showTips(tips);\n  }, []);\n  return {\n    ref,\n    layerList,\n    isLoading,\n    isActive,\n    panelDismissed,\n    tipsClicked,\n  };\n};\nexport default useLayers;\n","import {\n  CalciteAction,\n  CalciteInput,\n  CalciteScrim,\n  CalcitePanel,\n  CalciteTooltip,\n} from \"@esri/calcite-components-react\";\nimport React from \"react\";\nimport { filterLayers, resetLayers } from \"./utils/layers\";\nimport \"./Layers.css\";\nimport useLayers from \"./utils/useLayers\";\nimport { PanelProps } from \"../utils/PanelProps\";\nexport const Layers = (props: PanelProps) => {\n  const { ref, layerList, isLoading, isActive, panelDismissed, tipsClicked } =\n    useLayers(props);\n\n  return (\n    <CalcitePanel\n      id=\"layers-panel\"\n      heading=\"Layers\"\n      hidden={!isActive}\n      closed={!isActive ? true : undefined}\n      closable\n      onCalcitePanelClose={panelDismissed}\n    >\n      <CalciteAction\n        id=\"tip\"\n        icon=\"lightbulb\"\n        text=\"Tips\"\n        slot=\"header-actions-end\"\n        onClick={tipsClicked}\n      ></CalciteAction>\n      <CalciteTooltip label=\"Show Tip\" referenceElement=\"tip\" closeOnClick>\n        Show Tip\n      </CalciteTooltip>\n      <div className=\"layers\">\n        {layerList && (\n          <div className=\"row sticky\">\n            <CalciteInput\n              clearable\n              placeholder=\"Filter by layer name\"\n              scale=\"m\"\n              onCalciteInputInput={(e) => {\n                if (layerList) {\n                  filterLayers(e.target.value, layerList);\n                }\n              }}\n            ></CalciteInput>\n            <CalciteAction\n              text=\"clear\"\n              icon=\"viewHide\"\n              scale=\"s\"\n              onClick={() => resetLayers(layerList)}\n            ></CalciteAction>\n          </div>\n        )}\n        <div ref={ref}></div>\n        <CalciteScrim\n          loading\n          hidden={isLoading ? undefined : true}\n        ></CalciteScrim>\n      </div>\n    </CalcitePanel>\n  );\n};\nexport default Layers;\n"],"names":["props","loaded","useRef","maxYear","setMaxYear","useState","minYear","setMinYear","useEffect","layer","datefield","current","async","stats","queryFeatures","where","returnGeometry","outStatistics","statisticType","onStatisticField","outStatisticFieldName","outFields","features","length","max","Date","getAttribute","getFullYear","min","definitionExpression","refresh","getMinMax","labelHandles","labelTicks","maxValue","minValue","minLabel","toString","maxLabel","onCalciteSliderChange","e","target","OpacitySlider","lazy","addLayersFromWebmap","map","WebMap","portalItem","id","loadAll","catch","error","console","log","then","view","allLayers","filter","type","toArray","forEach","group","match","find","title","matchlayers","layers","slice","found","findLayerById","undefined","popupTemplate","renderer","addMany","layer1","index","findIndex","layer2","reorder","destroy","togglePropertyLabels","event","item","sections","actionsSections","light","clone","symbol","outline","color","r","g","b","setPropertyColor","getItemAt","value","labelsVisible","selectedTitles","section","selectedExpressions","propertyLabelExpressions","expression","includes","expressions","join","labelingInfo","haloColor","haloSize","font","family","style","weight","labelExpressionInfo","maxScale","minScale","createPanel","visible","panel","slider","document","createElement","createRoot","render","Suspense","fallback","opacity","content","open","push","addDevPlanFilters","layerListItemCreated","watch","parent","toggles","Collection","ActionToggle","info","add","isBright","actionsOpen","setTimeout","textContent","setAttribute","actions","querySelector","parentElement","getElementById","prepend","addPropertyLabelToggles","tips","text","ref","layerList","setLayerList","isLoading","setIsLoading","isActive","setIsActive","LayerList","container","listItemCreatedFunction","on","initializeLayers","when","panelDismissed","useCallback","tipsClicked","showTips","Layers","useLayers","heading","hidden","closed","closable","onCalcitePanelClose","icon","slot","onClick","label","referenceElement","closeOnClick","className","clearable","placeholder","scale","onCalciteInputInput","operationalItems","toLowerCase","listMode","sublayer","uid","removeAttribute","filterLayers","list","loading"],"sourceRoot":""}