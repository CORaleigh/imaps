{"version":3,"sources":["Components/PropertyPanel/AddressTable/AddressTable.tsx"],"names":["AddressTable","props","tableRef","useRef","useEffect","layer","definitionExpression","pin","table","FeatureTable","container","current","visibleElements","header","selectionColumn","fieldConfigs","label","name","width","setTimeout","grid","querySelector","addEventListener","e","target","nodeName","clearSelection","feature","getEventContext","item","selectRows","setAttribute","symbol","CIMSymbol","pinSymbol","view","graphics","removeMany","filter","graphic","getAttribute","add","goTo","zoom","duration","easing","id","ref"],"mappings":"0HAAA,0GAOO,MAAMA,EAAgBC,IAC3B,MAAMC,EAAWC,iBAAuB,MAgDxC,OA9CAC,qBAAU,KACPH,EAAMI,MAA8BC,qBAAwB,YAAWL,EAAMM,OAC9E,MAAMC,EAAQ,IAAIC,IAAa,CAC7BJ,MAAOJ,EAAMI,MACbK,UAAWR,EAASS,QACpBC,gBAAiB,CACfC,QAAQ,EACRC,iBAAiB,GAEnBC,aAAc,CACZ,CACEC,MAAO,UACPC,KAAM,UACNC,MAAO,SAET,CACEF,MAAO,OACPC,KAAM,kBAIZE,YAAW,KACT,MAAMC,EAAQZ,EAAME,UAA0BW,cAAc,eAExD,OAAJD,QAAI,IAAJA,KAAME,iBAAiB,SAAUC,IAC/B,GAA2C,6BAAtCA,EAAEC,OAAuBC,SAAyC,CAAC,IAAD,EAErEjB,EAAMkB,iBACN,MACMC,GADI,UAAIP,EAAKQ,gBAAgBL,UAAzB,aAAG,EAAkCM,MAC1BF,QACrBnB,EAAMsB,WAAWH,GAEjBA,EAAQI,aAAa,OAAQ,WAC7BJ,EAAQK,OAAS,IAAIC,IAAUC,KAC9BjC,EAAMkC,KAAwBC,SAASC,WACrCpC,EAAMkC,KAAwBC,SAASE,QAAQC,GACN,YAAjCA,EAAQC,aAAa,WAG/BvC,EAAMkC,KAAwBC,SAASK,IAAId,GAC3C1B,EAAMkC,KAAwBO,KAAK,CAAElB,OAAQG,EAASgB,KAAM,IAAM,CAAEC,SAAU,IAAMC,OAAQ,eAGhG,OACF,IAEI,qBAAKC,GAAG,eAAeC,IAAK7C,KAGtBF","file":"static/js/175.db19fbd5.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport React, { useEffect, useRef } from 'react';\nimport FeatureTable from '@arcgis/core/widgets/FeatureTable';\nimport './AddressTable.scss';\nimport CIMSymbol from '@arcgis/core/symbols/CIMSymbol';\nimport { pinSymbol } from '../../../config/config';\nexport const AddressTable = (props: any) => {\n  const tableRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    (props.layer as __esri.FeatureLayer).definitionExpression = `NCPIN = '${props.pin}'`;\n    const table = new FeatureTable({\n      layer: props.layer,\n      container: tableRef.current as HTMLDivElement,\n      visibleElements: {\n        header: false,\n        selectionColumn: false,\n      },\n      fieldConfigs: [\n        {\n          label: 'Address',\n          name: 'ADDRESS',\n          width: '200px',\n        } as any,\n        {\n          label: 'Type',\n          name: 'FEATURETYPE',\n        } as any,\n      ],\n    });\n    setTimeout(() => {\n      const grid = (table.container as HTMLElement).querySelector('vaadin-grid');\n\n      grid?.addEventListener('click', (e) => {\n        if ((e.target as HTMLElement).nodeName === 'VAADIN-GRID-CELL-CONTENT') {\n          //grid.selectItem((grid.getEventContext(e) as any)?.item);\n          table.clearSelection();\n          const item = (grid.getEventContext(e) as any)?.item;\n          const feature = item.feature as __esri.Graphic;\n          table.selectRows(feature);\n          //grid.scrollToIndex(item.index);\n          feature.setAttribute('type', 'address');\n          feature.symbol = new CIMSymbol(pinSymbol as any);\n          (props.view as __esri.MapView).graphics.removeMany(\n            (props.view as __esri.MapView).graphics.filter((graphic) => {\n              return graphic.getAttribute('type') === 'address';\n            }),\n          );\n          (props.view as __esri.MapView).graphics.add(feature);\n          (props.view as __esri.MapView).goTo({ target: feature, zoom: 17 }, { duration: 1000, easing: 'ease' });\n        }\n      });\n    }, 2000);\n  }, []); // only after initial render\n\n  return <div id=\"addressTable\" ref={tableRef}></div>;\n};\n\nexport default AddressTable;\n"],"sourceRoot":""}