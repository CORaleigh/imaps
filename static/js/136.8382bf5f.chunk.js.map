{"version":3,"sources":["Components/PropertyPanel/utils/property.ts","Components/PropertyPanel/PropertyPanel.tsx","Components/Shell/utils/shell.ts","Components/Shell/Shell.tsx"],"names":["setSearchParams","features","pins","map","feature","getAttribute","searchParams","URLSearchParams","set","toString","state","history","pushState","location","pathname","PropertySearch","lazy","PropertyInfo","PropertyTable","PropertyPanel","props","useRef","loaded","setLoaded","useState","view","setView","setFeature","filter","setFilter","where","setWhere","table","setTable","selectedTab","setSelectedTab","addressTable","setAddressTable","properties","layer","setLayer","loading","setLoading","toggleTabs","tab","document","querySelector","dispatchEvent","MouseEvent","useEffect","mapView","allTables","find","title","includes","type","allLayers","mapViewLoaded","querySelectorAll","forEach","addEventListener","event","detail","window","e","current","back","decodeURIComponent","split","join","URL","get","console","log","geometry","promiseUtils","resolve","queryFeatures","outFields","returnGeometry","outSpatialReference","spatialReference","then","featureSet","goTo","oids","getObjectId","queryRelatedFeatures","relationshipId","objectIds","result","reloids","oid","push","length","reject","geometryChanged","data","propertiesSelected","f","popupTemplate","prop","className","fallback","condosTable","propertyLayer","searchComplete","setAttribute","position","layout","slot","active","featureSelected","match","panelDismissedChange","target","parentElement","collapsed","dismissed","actionClicked","action","actions","isTool","innerWidth","a","isActive","deactivateActions","shellPanel","panel","removeAttribute","MapView","Header","TipManager","Shell","tips","setTips","tipsTitle","setTipsTitle","width","setWidth","viewCreated","setViewCreated","selectedProperties","setSelectedProperties","theme","setTheme","useContext","ThemeContext","setActions","ActionContext","search","windowResize","setWidget","container","getElementById","hasChildNodes","ReactDOM","render","LocationSearch","Layers","Basemaps","Legend","PropertySelect","geometrySet","g","Measure","Sketch","Bookmarks","Print","setDarkTheme","body","classList","remove","add","require","setLigthTheme","matchMedia","matches","updateTheme","localStorage","getItem","removeEventListener","width-scale","name","text","icon","onClick","dismissible","label","text-enabled","id","hidden","async","appearance","scale","calcite-hydrated","showTips","links","zoom","initialized","point","closed","tipsDismissed"],"mappings":"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","file":"static/js/136.8382bf5f.chunk.js","sourcesContent":["import * as promiseUtils from '@arcgis/core/core/promiseUtils';\nimport { reject } from '@arcgis/core/core/promiseUtils';\nexport const geometryChanged = (\n    view: __esri.MapView,\n    layer: __esri.FeatureLayer,\n    geometry: __esri.Geometry,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n): Promise<any> => {\n    return promiseUtils.create((resolve) => {\n        layer\n            ?.queryFeatures({\n                geometry: geometry,\n                outFields: ['OBJECTID', 'REID', 'PIN_NUM'],\n                returnGeometry: true,\n                outSpatialReference: view?.spatialReference,\n            })\n            .then((featureSet) => {\n                view?.goTo(featureSet.features);\n                const oids = featureSet.features.map((feature) => {\n                    return feature.getObjectId();\n                });\n                layer.queryRelatedFeatures({ relationshipId: 0, objectIds: oids, outFields: ['*'] }).then((result) => {\n                    const reloids: number[] = [];\n                    const features: __esri.Graphic[] = [];\n                    oids.forEach((oid) => {\n                        result[oid]?.features.forEach((feature: __esri.Graphic) => {\n                            reloids.push(feature.getAttribute('OBJECTID'));\n                            features.push(feature);\n                        });\n                    });\n                    if (reloids.length) {\n                        resolve({\n                            where: `OBJECTID in (${reloids.toString()})`,\n                            features: features,\n                            properties: featureSet.features,\n                        });\n                    } else {\n                        reject();\n                    }\n                });\n            });\n    });\n};\n\nexport const setSearchParams = (features: __esri.Graphic[]): void => {\n    const pins: string[] = features.map((feature: __esri.Graphic) => {\n        return feature.getAttribute('PIN_NUM');\n    });\n    //\tconst url = new URL(document.URL);\n    const searchParams = new URLSearchParams();\n    if (pins) {\n        searchParams.set('pins', pins.toString());\n\n        const state = { pins: pins.toString() };\n        if (history.state) {\n            if (history.state.pins != state.pins) {\n                history.pushState({ pins: pins.toString() }, '', `${location.pathname}?${searchParams.toString()}`);\n            }\n        } else {\n            history.pushState({ pins: pins.toString() }, '', `${location.pathname}?${searchParams.toString()}`);\n        }\n\n        //url.searchParams\n    }\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport React, { lazy, Suspense, useEffect, useRef, useState } from 'react';\nconst PropertySearch = lazy(() => import('./PropertySearch/PropertySearch'));\nconst PropertyInfo = lazy(() => import('./PropertyInfo/PropertyInfo'));\nconst PropertyTable = lazy(() => import('./PropertyTable/PropertyTable'));\n// const PropertyList = lazy(() => import('./PropertyList/PropertyList'));\nimport { geometryChanged, setSearchParams } from './utils/property';\nimport './PropertyPanel.scss';\nexport const PropertyPanel = (props: any) => {\n  const state = useRef({ pins: '' });\n  const [loaded, setLoaded] = useState(false);\n  const [view, setView] = useState<__esri.MapView>();\n  const [feature, setFeature] = useState<__esri.Graphic>();\n  //const featureRef = useRef<__esri.Graphic>();\n  const [filter, setFilter] = useState('OBJECTID IS NULL');\n  const [where, setWhere] = useState('OBJECTID IS NULL');\n\n  const [table, setTable] = useState<__esri.FeatureLayer>();\n  const [selectedTab, setSelectedTab] = useState('list');\n  const [addressTable, setAddressTable] = useState<__esri.FeatureLayer>();\n  let properties: __esri.Graphic[] = [];\n\n  const [layer, setLayer] = useState<__esri.FeatureLayer>();\n  const [loading, setLoading] = useState(false);\n\n  const mapViewLoaded = (mapView: __esri.MapView) => {\n    setTable(\n      mapView.map.allTables.find((layer) => {\n        return layer.title.includes('Condo') && layer.type === 'feature';\n      }) as __esri.FeatureLayer,\n    );\n\n    setAddressTable(\n      mapView.map.allTables.find((layer) => {\n        return layer.title.includes('Address') && layer.type === 'feature';\n      }) as __esri.FeatureLayer,\n    );\n    setLayer(\n      mapView.map.allLayers.find((layer) => {\n        return layer.title.includes('Property') && layer.type === 'feature';\n      }) as __esri.FeatureLayer,\n    );\n    setLoaded(true);\n    setView(mapView);\n    //new FeatureTable({ container: panelRef.current as HTMLDivElement, layer: layer, view: mapView });\n  };\n  const toggleTabs = (tab: string) => {\n    (document.querySelector(\n      `calcite-tab-title:${tab === 'list' ? 'first' : 'last'}-child`,\n    ) as HTMLElement).dispatchEvent(new MouseEvent('click'));\n    setSelectedTab(tab);\n  };\n  const searchComplete = (result: any) => {\n    if (result.feature) {\n      setFeature(result.features[0]);\n      //featureRef.current = result.features[0];\n      setSearchParams([result.features[0]]);\n      toggleTabs('info');\n    } else {\n      toggleTabs('list');\n    }\n    const oids = result?.features.map((feature: __esri.Graphic) => {\n      return feature.getAttribute('OBJECTID');\n    });\n    setFilter(`OBJECTID in (${oids.toString()})`);\n    properties = result.properties;\n    properties.forEach((prop) => {\n      prop.setAttribute('selected', 0);\n    });\n    props.propertiesSelected(properties);\n  };\n  const tableFeatureSelected = (feature: __esri.Graphic) => {\n    if (feature) {\n      properties.forEach((prop) => {\n        if (prop.getAttribute('PIN_NUM') != feature?.getAttribute('PIN_NUM')) {\n          prop.setAttribute('selected', 0);\n        }\n      });\n      const match = properties.find((prop) => {\n        return prop.getAttribute('PIN_NUM') === feature?.getAttribute('PIN_NUM');\n      });\n      match?.setAttribute('selected', 1);\n      feature.geometry = match?.geometry as __esri.Geometry;\n      view?.goTo(feature.geometry);\n      setFeature(feature);\n      //featureRef.current = feature;\n      setSearchParams([feature]);\n\n      toggleTabs('info');\n      props.propertiesSelected(properties);\n    }\n  };\n\n  useEffect(() => {\n    if (!loaded) {\n      const mapView = props.view as __esri.MapView;\n      mapViewLoaded(mapView);\n      document.querySelectorAll('calcite-tab-nav').forEach((tab) => {\n        tab.addEventListener('calciteTabChange', (event) => {\n          setSelectedTab((event as any).detail.tab === 0 ? 'list' : 'info');\n        });\n      });\n      window.addEventListener('popstate', (e) => {\n        if (e.state?.pins === state.current?.pins) {\n          history.back();\n        } else {\n          if (e.state?.pins) {\n            setWhere(`PIN_NUM in ('${decodeURIComponent(history.state?.pins.split(',').join(`','`))}')`);\n          }\n        }\n        state.current = e.state;\n      });\n      const url = new URL(document.URL);\n      const pins = url.searchParams.get('pins');\n      if (pins) {\n        setWhere(`PIN_NUM in ('${decodeURIComponent(pins.split(',').join(`','`))}')`);\n      }\n    }\n    return () => {\n      console.log('cleanup');\n    };\n  }, []); // only after initial render\n  useEffect(() => {\n    geometryChanged(view as __esri.MapView, layer as __esri.FeatureLayer, props.geometry).then((data) => {\n      setLoading(true);\n      setFilter(data.where);\n      props.propertiesSelected(data.properties);\n      if (data.features.length === 1) {\n        const f = data.features[0] as __esri.Graphic;\n        f.layer = table as __esri.FeatureLayer;\n        f.popupTemplate = table?.popupTemplate as __esri.PopupTemplate;\n        const feature = data.features[0] as __esri.Graphic;\n        feature.geometry = data.properties.find((prop: __esri.Graphic) => {\n          return prop.getAttribute('PIN_NUM') === feature.getAttribute('PIN_NUM');\n        })?.geometry;\n        setFeature(feature);\n\n        //featureRef.current = feature;\n        setSearchParams([feature]);\n\n        toggleTabs('info');\n      } else {\n        toggleTabs('list');\n      }\n    });\n  }, [props.geometry, props.propertiesSelected]);\n  return (\n    <div className=\"panel\">\n      {loaded && (\n        <Suspense fallback={''}>\n          <PropertySearch\n            view={view}\n            condosTable={table}\n            addressTable={addressTable}\n            propertyLayer={layer}\n            where={where}\n            searchComplete={searchComplete}\n          ></PropertySearch>\n        </Suspense>\n      )}\n\n      <calcite-tabs position=\"below\" layout=\"center\">\n        <calcite-tab-nav slot=\"tab-nav\">\n          <calcite-tab-title active={selectedTab === 'list'}>List</calcite-tab-title>\n          <calcite-tab-title active={selectedTab === 'info'}>Info</calcite-tab-title>\n        </calcite-tab-nav>\n\n        <calcite-tab active={selectedTab === 'list' ? '' : null}>\n          {loaded && (\n            // <Suspense fallback={''}>\n            //   <PropertyList\n            //     layer={table}\n            //     view={view}\n            //     filter={filter}\n            //     featureSelected={tableFeatureSelected}\n            //   ></PropertyList>\n            // </Suspense>\n            <Suspense fallback={''}>\n              <PropertyTable\n                view={view}\n                layer={table}\n                filter={filter}\n                loading={loading}\n                featureSelected={tableFeatureSelected}\n              ></PropertyTable>\n            </Suspense>\n          )}\n        </calcite-tab>\n\n        <calcite-tab active={selectedTab === 'info' ? '' : null}>\n          {loaded && (\n            <Suspense fallback={''}>\n              <PropertyInfo view={view} feature={feature} />\n            </Suspense>\n          )}\n        </calcite-tab>\n      </calcite-tabs>\n    </div>\n  );\n};\n\nexport default PropertyPanel;\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst panelDismissedChange = (e: Event) => {\n    const shellPanel = (e.target as HTMLElement)?.parentElement;\n    (shellPanel as HTMLCalciteShellPanelElement).collapsed = (e.target as HTMLCalcitePanelElement)?.dismissed;\n};\n\nexport const initialized = (): void => {\n    const panels = document.querySelectorAll('calcite-panel');\n    panels.forEach((panel) => {\n        panel?.addEventListener('calcitePanelDismissedChange', panelDismissedChange);\n    });\n};\n\nexport const deactivate = (): void => {\n    const panels = document.querySelectorAll('calcite-panel');\n    panels.forEach((panel) => {\n        panel?.removeEventListener('calcitePanelDismissedChange', panelDismissedChange);\n    });\n};\nconst deactivateActions = (actions: any[], isTool: boolean): void => {\n    if (innerWidth < 1000) {\n        actions.forEach((a) => {\n            a.isActive = false;\n        });\n    } else {\n        if (isTool) {\n            actions.forEach((a) => {\n                a.isActive = a.isActive && !a.isTool;\n            });\n        } else {\n            actions.forEach((a) => {\n                a.isActive = a.isActive && a.isTool;\n            });\n        }\n    }\n};\nexport const actionClicked = (e: any, action: any, actions: any[]): any[] => {\n    deactivateActions(actions, action.isTool);\n    action.isActive = true;\n    const shellPanel = (e.target as HTMLElement)?.parentElement?.parentElement;\n    const panel = shellPanel?.querySelector('calcite-panel');\n    debugger;\n    if (!action.isActive) {\n        shellPanel?.setAttribute('collapsed', '');\n        panel?.setAttribute('dismissed', '');\n    } else {\n        shellPanel?.removeAttribute('collapsed');\n        panel?.removeAttribute('dismissed');\n    }\n\n    return actions;\n};\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useContext, useEffect, useState, lazy, Suspense } from 'react';\n//import { MapView } from '../MapView/MapView';\n\nconst MapView = lazy(() => {\n  return import('../MapView/MapView');\n});\nconst Header = lazy(() => {\n  return import('../Header/Header');\n});\nconst TipManager = lazy(() => {\n  return import('../TipManager/TipManager');\n});\n\nimport { PropertyPanel } from '../PropertyPanel/PropertyPanel';\n\nimport './Shell.scss';\nimport { actionClicked, deactivate, initialized } from './utils/shell';\n\nimport ReactDOM from 'react-dom';\nimport ThemeContext from '../ThemeContext';\n\nimport { links } from '../../config/config';\nimport ActionContext from '../ActionContext';\n\nexport const Shell = (props: any) => {\n  //const [actions, setActions] = useState(props.actions);\n  const [tips, setTips] = useState<any>([]);\n  const [tipsTitle, setTipsTitle] = useState<string>();\n\n  const [width, setWidth] = useState(window.innerWidth);\n  const [view, setView] = useState<__esri.MapView | null>(null);\n  const [viewCreated, setViewCreated] = useState(false);\n  const [selectedProperties, setSelectedProperties] = useState<__esri.Graphic[]>([]);\n\n  const { theme, setTheme } = useContext(ThemeContext);\n  const { actions, setActions } = useContext(ActionContext);\n  const propertiesSelected = (properties: __esri.Graphic[]) => {\n    setSelectedProperties([...[], ...properties]);\n    const active = actions.find((action) => {\n      return action.isActive;\n    });\n    if (active) {\n      active.isActive = false;\n    }\n    const search = actions.find((action) => {\n      return action.title === 'Property Search';\n    });\n    if (search) {\n      search.isActive = true;\n    }\n    setActions([...[], ...actions]);\n  };\n  const windowResize = () => {\n    setWidth(window.innerWidth);\n  };\n  const setWidget = (action: any) => {\n    if (action) {\n      const container = document.getElementById(action.container);\n      if (!container?.hasChildNodes()) {\n        if (action.title === 'Property Search') {\n          const PropertyPanel = lazy(() => import('../PropertyPanel/PropertyPanel'));\n          ReactDOM.render(\n            <Suspense fallback={''}>\n              <PropertyPanel view={view} propertiesSelected={propertiesSelected} />\n            </Suspense>,\n            container,\n          );\n        }\n        if (action.title === 'Location Search') {\n          const LocationSearch = lazy(() => import('../LocationSearch/LocationSearch'));\n          ReactDOM.render(\n            <Suspense fallback={''}>\n              <LocationSearch view={view} />\n            </Suspense>,\n            container,\n          );\n        }\n        if (action.title === 'Layers') {\n          const Layers = lazy(() => import('../Layers/Layers'));\n          ReactDOM.render(\n            <Suspense fallback={''}>\n              <Layers view={view} />\n            </Suspense>,\n            container,\n          );\n        }\n        if (action.title === 'Basemaps') {\n          const Basemaps = lazy(() => import('../Basemaps/Basemaps'));\n          ReactDOM.render(\n            <Suspense fallback={''}>\n              <Basemaps view={view} />\n            </Suspense>,\n            container,\n          );\n        }\n        if (action.title === 'Legend') {\n          const Legend = lazy(() => import('../Legend/Legend'));\n          ReactDOM.render(\n            <Suspense fallback={''}>\n              <Legend view={view} />\n            </Suspense>,\n            container,\n          );\n        }\n        if (action.title === 'Property Select') {\n          const PropertySelect = lazy(() => import('../PropertySelect/PropertySelect'));\n          ReactDOM.render(\n            <Suspense fallback={''}>\n              <PropertySelect\n                view={view}\n                geometrySet={(g: any) => {\n                  const container = document.getElementById('propertySearch');\n\n                  ReactDOM.render(<PropertyPanel geometry={g} propertiesSelected={propertiesSelected} />, container);\n                }}\n              />\n            </Suspense>,\n            container,\n          );\n        }\n        if (action.title === 'Measure') {\n          const Measure = lazy(() => import('../Measure/Measure'));\n          ReactDOM.render(\n            <Suspense fallback={''}>\n              <Measure view={view} />{' '}\n            </Suspense>,\n            container,\n          );\n        }\n        if (action.title === 'Sketch') {\n          const Sketch = lazy(() => import('../Sketch/Sketch'));\n          ReactDOM.render(\n            <Suspense fallback={''}>\n              <Sketch view={view} />{' '}\n            </Suspense>,\n            container,\n          );\n        }\n        if (action.title === 'Bookmarks') {\n          const Bookmarks = lazy(() => import('../Bookmarks/Bookmarks'));\n          ReactDOM.render(\n            <Suspense fallback={''}>\n              <Bookmarks view={view} />{' '}\n            </Suspense>,\n            container,\n          );\n        }\n        if (action.title === 'Print') {\n          const Print = lazy(() => import('../Print/Print'));\n          ReactDOM.render(\n            <Suspense fallback={''}>\n              <Print view={view} />{' '}\n            </Suspense>,\n            container,\n          );\n        }\n      }\n    }\n  };\n  const tipsDismissed = () => {\n    setTips([]);\n    setTipsTitle('');\n  };\n  const showTips = () => {\n    const action = actions.find((action: any) => {\n      return action.isActive;\n    });\n    return action?.tips?.length ? (\n      <calcite-action\n        text=\"Action\"\n        label=\"Action\"\n        slot=\"header-actions-end\"\n        icon=\"lightbulb\"\n        appearance=\"solid\"\n        scale=\"m\"\n        calcite-hydrated=\"\"\n        onClick={() => {\n          setTips([...tips, ...action.tips]);\n          setTipsTitle(action.title);\n        }}\n      ></calcite-action>\n    ) : (\n      ''\n    );\n  };\n\n  const mapInitialized = async (mapView: __esri.MapView) => {\n    if (!viewCreated) {\n      setView(mapView);\n      setViewCreated(true);\n\n      const container = document.getElementById('propertySearch');\n      if (mapView.map) {\n        ReactDOM.render(<PropertyPanel view={mapView} propertiesSelected={propertiesSelected} />, container);\n      }\n    }\n  };\n\n  const geometryChanged = (point: __esri.Point) => {\n    const container = document.getElementById('propertySearch');\n\n    ReactDOM.render(<PropertyPanel geometry={point} propertiesSelected={propertiesSelected} />, container);\n  };\n  const setDarkTheme = () => {\n    setTheme('dark');\n    document.body.classList.remove('light');\n    document.body.classList.add('dark');\n\n    // require(`@arcgis/core/assets/esri/themes/light/main.css`);\n\n    require(`@arcgis/core/assets/esri/themes/dark/main.css`);\n  };\n  const setLigthTheme = () => {\n    setTheme('light');\n    // require(`@arcgis/core/assets/esri/themes/dark/main.css`);\n\n    require(`@arcgis/core/assets/esri/themes/light/main.css`);\n    document.body.classList.remove('dark');\n    document.body.classList.add('light');\n  };\n  const updateTheme = (theme: string) => {\n    if (theme) {\n      if (theme === 'dark') {\n        setDarkTheme();\n      }\n      if (theme === 'light') {\n        setLigthTheme();\n      }\n    } else {\n      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n        setDarkTheme();\n      } else {\n        setLigthTheme();\n      }\n    }\n\n    // if (window.matchMedia != undefined) {\n    //     window.matchMedia('(prefers-color-scheme: dark)')?.addEventListener('change', (e) => {\n    //         const newTheme = e.matches ? 'dark' : 'light';\n    //         setTheme(newTheme);\n    //         const styles = document.querySelectorAll('style');\n    //         const styleArray = Array.from(styles);\n    //         styleArray.forEach((style: any) => {\n    //             if (style.innerHTML.includes(`--esri-calcite-theme-name: \"${newTheme}\"`)) {\n    //                 document.head.appendChild(style);\n    //             }\n    //         });\n    //     });\n    // }\n  };\n\n  useEffect(() => {\n    initialized();\n\n    const theme = window.localStorage.getItem('imaps_theme') as string;\n\n    updateTheme(theme);\n\n    window.addEventListener('resize', windowResize);\n\n    return () => {\n      window.removeEventListener('resize', windowResize);\n      deactivate();\n    };\n  }, [props.actions]);\n  return (\n    <div>\n      <calcite-shell theme={theme} className=\"shell\">\n        {width >= 1000 ? (\n          <calcite-shell-panel slot=\"primary-panel\" position=\"start\" width-scale=\"l\" collapsed>\n            <calcite-action-bar slot=\"action-bar\">\n              {actions.map((action: any) => {\n                if (action.isTool) {\n                  return (\n                    <calcite-action\n                      key={action.icon}\n                      name={action.container}\n                      text={action.title}\n                      icon={action.icon}\n                      onClick={(e: any) => {\n                        setActions([...actionClicked(e, action, props.actions)]);\n                        setWidget(action);\n                      }}\n                      active={action.isActive === true ? '' : null}\n                    ></calcite-action>\n                  );\n                }\n              })}\n            </calcite-action-bar>\n            <calcite-panel dismissible dismissed>\n              <div slot=\"header-content\">\n                {\n                  actions.find((action: any) => {\n                    return action.isActive && action.isTool;\n                  })?.title\n                }\n              </div>\n              <div slot=\"header-trailing-content\">\n                <calcite-action\n                  label=\"Performs another custom action\"\n                  text=\"Perform Another Action!\"\n                  text-enabled\n                  icon=\"blog\"\n                ></calcite-action>\n              </div>\n              {actions.map((action: any) => {\n                if (action.isTool) {\n                  return <div id={action.container} key={action.container} hidden={!action.isActive}></div>;\n                }\n              })}\n            </calcite-panel>\n          </calcite-shell-panel>\n        ) : (\n          ''\n        )}\n\n        <calcite-shell-panel slot=\"contextual-panel\" position=\"end\" width-scale=\"l\">\n          <calcite-action-bar slot=\"action-bar\">\n            {actions.map((action: any) => {\n              if (!action.isTool || width < 1000) {\n                return (\n                  <calcite-action\n                    key={action.icon}\n                    text={action.title}\n                    name={action.container}\n                    icon={action.icon}\n                    onClick={async (e: any) => {\n                      setActions([...actionClicked(e, action, props.actions)]);\n                      setWidget(action);\n                    }}\n                    active={action.isActive === true ? '' : null}\n                  ></calcite-action>\n                );\n              }\n            })}\n          </calcite-action-bar>\n          <calcite-panel dismissible>\n            <div slot=\"header-content\">\n              {\n                actions.find((action: any) => {\n                  return action.isActive;\n                })?.title\n              }\n            </div>\n            {showTips()}\n\n            {actions.map((action: any) => {\n              if (!action.isTool || width < 1000) {\n                return <div id={action.container} key={action.container} hidden={!action.isActive}></div>;\n              }\n            })}\n          </calcite-panel>\n        </calcite-shell-panel>\n\n        <div slot=\"shell-header\">\n          <Suspense fallback={''}>\n            <Header links={links} />\n          </Suspense>\n        </div>\n        <Suspense fallback={''}>\n          <MapView\n            id=\"95092428774c4b1fb6a3b6f5fed9fbc4\"\n            zoom=\"10\"\n            initialized={mapInitialized}\n            geometryChanged={geometryChanged}\n            selectedProperties={selectedProperties}\n          />\n        </Suspense>\n      </calcite-shell>\n      <Suspense fallback={''}>\n        <TipManager tips={tips} title={tipsTitle} closed tipsDismissed={tipsDismissed} />\n      </Suspense>\n    </div>\n  );\n};\nexport default Shell;\n"],"sourceRoot":""}