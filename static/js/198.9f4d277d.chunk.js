(this.webpackJsonpimaps=this.webpackJsonpimaps||[]).push([[198,265,280],{1146:function(e,t,n){"use strict";n.r(t),n.d(t,"createCircle",(function(){return O})),n.d(t,"createEllipse",(function(){return G})),n.d(t,"createMultipoint",(function(){return g})),n.d(t,"createPoint",(function(){return b})),n.d(t,"createPolygon",(function(){return j})),n.d(t,"createPolyline",(function(){return m})),n.d(t,"createRectangle",(function(){return A})),n.d(t,"createSquare",(function(){return M})),n.d(t,"makeMapPoint",(function(){return x}));n(94);var r=n(171),a=n(85),c=n(82),i=n(110),o=n(877),u=n(508),s=n(258),f=n(101),d=n(673),l=n(104),p=n(192),h=n(126),y=n(118);function x(e,t,n=null){return Object(c.k)(n)?[e,t,n]:[e,t]}function b(e,t){const n=new l.a({x:e[0],y:e[1],spatialReference:t});return e.length>2&&(n.z=e[2]),n}function g(e,t){return new p.a({points:e,spatialReference:t})}function m(e,t,n){const r=new h.a({paths:e,spatialReference:t});return n&&Object(s.i)(r),r}function j(e,t,n,c=!0){const i=Object(a.a)(e);i.forEach((e=>{const t=e[0],n=e[e.length-1];Object(r.c)(t,n)&&1!==e.length||e.push(e[0])}));let o=new y.a({rings:i,spatialReference:t});return o.rings.forEach((e=>{Object(s.g)(e,!1,!1)||e.reverse()})),n&&Object(s.i)(o),c&&o.isSelfIntersecting&&Object(f.j)(t)&&(o=Object(u.simplify)(o)),o}function M(e,t,n){const r=t.mapToLocalMultiple(e),a=[],i={x:r[0].x,y:r[0].y},o=r[1].x,u=r[1].y,s=Math.round(o-i.x),f=Math.round(u-i.y),l=Math.max(Math.abs(s),Math.abs(f));if(n){const e={x:i.x+l,y:i.y+l},t={x:i.x-l,y:i.y-l};a.push(Object(d.b)(e.x,t.y),Object(d.b)(t.x,t.y),Object(d.b)(t.x,e.y),Object(d.b)(e.x,e.y))}else{const e={x:s>0?i.x+l:i.x-l,y:f>0?i.y+l:i.y-l};a.push(Object(d.b)(i.x,i.y),Object(d.b)(e.x,i.y),Object(d.b)(e.x,e.y),Object(d.b)(i.x,e.y))}return j([Object(c.g)(a.map((e=>t.localToMap(e))))],t.spatialReference,t.doUnnormalization,!0)}function A(e,t,n){let r=t.mapToLocalMultiple(e);if(1===r.length){const e=48,t=r[0];r=[Object(d.b)(t.x-e,t.y+e),Object(d.b)(t.x+e,t.y-e),Object(d.b)(t.x+e,t.y-e),Object(d.b)(t.x-e,t.y+e)]}const a=[],i={x:r[0].x,y:r[0].y},o={x:r[1].x,y:r[1].y};if(n){const e=Math.round(o.x-i.x),t=Math.round(o.y-i.y);a.push(Object(d.b)(i.x-e,i.y-t),Object(d.b)(o.x,i.y-t),Object(d.b)(o.x,o.y),Object(d.b)(i.x-e,o.y))}else a.push(Object(d.b)(i.x,i.y),Object(d.b)(o.x,i.y),Object(d.b)(o.x,o.y),Object(d.b)(i.x,o.y));return j([Object(c.g)(a.map((e=>t.localToMap(e))))],t.spatialReference,t.doUnnormalization,!0)}function O(e,t,n,r){const a=t.mapToLocalMultiple(e);let l=null,p=null;if(n)l=a[0],p=a[1];else{const e=a[0],t=a[1],n=Math.round(t.x-e.x),r=Math.round(t.y-e.y),c=Math.max(Math.abs(n),Math.abs(r));l=Object(d.b)(n>0?e.x+c/2:e.x-c/2,r>0?e.y+c/2:e.y-c/2),p=Object(d.b)(Math.abs(n)>Math.abs(r)?l.x-c/2:l.x,Math.abs(n)>Math.abs(r)?l.y:l.y-c/2)}const h=t.localToMap(l),y=t.localToMap(p);if(Object(c.j)(h)||Object(c.j)(y))return null;t.doUnnormalization&&Object(s.j)([[h,y]],t.spatialReference);const x=b(h,t.spatialReference),g=b(y,t.spatialReference),m=Object(i.f)(t.spatialReference);let M=0;if(Object(f.j)(t.spatialReference))M=m*Object(u.distance)(x,g,null);else{const e=l.x-p.x,t=l.y-p.y;M=m*Math.sqrt(e*e+t*t)*(r||1)}const A=new o.a({center:x,radius:M,radiusUnit:"meters",spatialReference:t.spatialReference});return j(A.rings,A.spatialReference,!1)}function G(e,t,n){const r=t.mapToLocalMultiple(e),a=r[0],i=r[1],o=Math.round(i.x-a.x),u=Math.round(i.y-a.y),s=Object(d.b)(n?a.x:a.x+o/2,n?a.y:a.y+u/2),f=n?o:o/2,l=n?u:u/2,p=[],h=2*Math.PI/60;for(let c=0;c<60;c++){const e=Math.cos(c*h),t=Math.sin(c*h),n=Object(d.b)(f*e+s.x,l*t+s.y);p.push(n)}return p.push(p[0]),j([Object(c.g)(p.map((e=>t.localToMap(e))))],t.spatialReference,t.doUnnormalization,!1)}},498:function(e,t,n){"use strict";n.r(t),n.d(t,"hydratedAdapter",(function(){return u}));var r=n(95),a=n(192),c=n(104),i=n(118),o=n(126);const u={convertToGEGeometry:function(e,t){if(null==t)return null;let n="cache"in t?t.cache._geVersion:void 0;return null==n&&(n=e.convertJSONToGeometry(t),"cache"in t&&(t.cache._geVersion=n)),n},exportPoint:function(e,t,n){const r=e.hasZ(t),a=e.hasM(t),i=new c.a({x:e.getPointX(t),y:e.getPointY(t),spatialReference:n});return r&&(i.z=e.getPointZ(t)),a&&(i.m=e.getPointM(t)),i.cache._geVersion=t,i},exportPolygon:function(e,t,n){const r=new i.a({rings:e.exportPaths(t),hasZ:e.hasZ(t),hasM:e.hasM(t),spatialReference:n});return r.cache._geVersion=t,r},exportPolyline:function(e,t,n){const r=new o.a({paths:e.exportPaths(t),hasZ:e.hasZ(t),hasM:e.hasM(t),spatialReference:n});return r.cache._geVersion=t,r},exportMultipoint:function(e,t,n){const r=new a.a({hasZ:e.hasZ(t),hasM:e.hasM(t),points:e.exportPoints(t),spatialReference:n});return r.cache._geVersion=t,r},exportExtent:function(e,t,n){const a=e.hasZ(t),c=e.hasM(t),i=new r.a({xmin:e.getXMin(t),ymin:e.getYMin(t),xmax:e.getXMax(t),ymax:e.getYMax(t),spatialReference:n});if(a){const n=e.getZExtent(t);i.zmin=n.vmin,i.zmax=n.vmax}if(c){const n=e.getMExtent(t);i.mmin=n.vmin,i.mmax=n.vmax}return i.cache._geVersion=t,i}}},508:function(e,t,n){"use strict";n.r(t),n.d(t,"buffer",(function(){return E})),n.d(t,"clip",(function(){return o})),n.d(t,"contains",(function(){return s})),n.d(t,"convexHull",(function(){return M})),n.d(t,"crosses",(function(){return f})),n.d(t,"cut",(function(){return u})),n.d(t,"densify",(function(){return _})),n.d(t,"difference",(function(){return A})),n.d(t,"disjoint",(function(){return x})),n.d(t,"distance",(function(){return d})),n.d(t,"equals",(function(){return l})),n.d(t,"extendedSpatialReferenceInfo",(function(){return i})),n.d(t,"flipHorizontal",(function(){return S})),n.d(t,"flipVertical",(function(){return Z})),n.d(t,"generalize",(function(){return L})),n.d(t,"geodesicArea",(function(){return q})),n.d(t,"geodesicBuffer",(function(){return v})),n.d(t,"geodesicDensify",(function(){return J})),n.d(t,"geodesicLength",(function(){return D})),n.d(t,"intersect",(function(){return G})),n.d(t,"intersects",(function(){return p})),n.d(t,"isSimple",(function(){return m})),n.d(t,"nearestCoordinate",(function(){return P})),n.d(t,"nearestVertex",(function(){return V})),n.d(t,"nearestVertices",(function(){return z})),n.d(t,"offset",(function(){return w})),n.d(t,"overlaps",(function(){return b})),n.d(t,"planarArea",(function(){return U})),n.d(t,"planarLength",(function(){return k})),n.d(t,"relate",(function(){return g})),n.d(t,"rotate",(function(){return I})),n.d(t,"simplify",(function(){return j})),n.d(t,"symmetricDifference",(function(){return O})),n.d(t,"touches",(function(){return h})),n.d(t,"union",(function(){return R})),n.d(t,"within",(function(){return y}));var r=n(528),a=n(498);function c(e){return Array.isArray(e)?e[0].spatialReference:e&&e.spatialReference}function i(e){return r.G.extendedSpatialReferenceInfo(e)}function o(e,t){return r.G.clip(a.hydratedAdapter,c(e),e,t)}function u(e,t){return r.G.cut(a.hydratedAdapter,c(e),e,t)}function s(e,t){return r.G.contains(a.hydratedAdapter,c(e),e,t)}function f(e,t){return r.G.crosses(a.hydratedAdapter,c(e),e,t)}function d(e,t,n){return r.G.distance(a.hydratedAdapter,c(e),e,t,n)}function l(e,t){return r.G.equals(a.hydratedAdapter,c(e),e,t)}function p(e,t){return r.G.intersects(a.hydratedAdapter,c(e),e,t)}function h(e,t){return r.G.touches(a.hydratedAdapter,c(e),e,t)}function y(e,t){return r.G.within(a.hydratedAdapter,c(e),e,t)}function x(e,t){return r.G.disjoint(a.hydratedAdapter,c(e),e,t)}function b(e,t){return r.G.overlaps(a.hydratedAdapter,c(e),e,t)}function g(e,t,n){return r.G.relate(a.hydratedAdapter,c(e),e,t,n)}function m(e){return r.G.isSimple(a.hydratedAdapter,c(e),e)}function j(e){return r.G.simplify(a.hydratedAdapter,c(e),e)}function M(e,t=!1){return r.G.convexHull(a.hydratedAdapter,c(e),e,t)}function A(e,t){return r.G.difference(a.hydratedAdapter,c(e),e,t)}function O(e,t){return r.G.symmetricDifference(a.hydratedAdapter,c(e),e,t)}function G(e,t){return r.G.intersect(a.hydratedAdapter,c(e),e,t)}function R(e,t=null){return r.G.union(a.hydratedAdapter,c(e),e,t)}function w(e,t,n,i,o,u){return r.G.offset(a.hydratedAdapter,c(e),e,t,n,i,o,u)}function E(e,t,n,i=!1){return r.G.buffer(a.hydratedAdapter,c(e),e,t,n,i)}function v(e,t,n,i,o,u){return r.G.geodesicBuffer(a.hydratedAdapter,c(e),e,t,n,i,o,u)}function P(e,t,n=!0){return r.G.nearestCoordinate(a.hydratedAdapter,c(e),e,t,n)}function V(e,t){return r.G.nearestVertex(a.hydratedAdapter,c(e),e,t)}function z(e,t,n,i){return r.G.nearestVertices(a.hydratedAdapter,c(e),e,t,n,i)}function T(e){return"xmin"in e?"center"in e?e.center:null:"x"in e?e:"extent"in e?e.extent.center:null}function I(e,t,n){var a;if(null==e)throw new Error("Illegal Argument Exception");const c=e.spatialReference;if(null==(n=null!=(a=n)?a:T(e)))throw new Error("Illegal Argument Exception");const i=e.constructor.fromJSON(r.G.rotate(e,t,n));return i.spatialReference=c,i}function S(e,t){var n;if(null==e)throw new Error("Illegal Argument Exception");const a=e.spatialReference;if(null==(t=null!=(n=t)?n:T(e)))throw new Error("Illegal Argument Exception");const c=e.constructor.fromJSON(r.G.flipHorizontal(e,t));return c.spatialReference=a,c}function Z(e,t){var n;if(null==e)throw new Error("Illegal Argument Exception");const a=e.spatialReference;if(null==(t=null!=(n=t)?n:T(e)))throw new Error("Illegal Argument Exception");const c=e.constructor.fromJSON(r.G.flipVertical(e,t));return c.spatialReference=a,c}function L(e,t,n,i){return r.G.generalize(a.hydratedAdapter,c(e),e,t,n,i)}function _(e,t,n){return r.G.densify(a.hydratedAdapter,c(e),e,t,n)}function J(e,t,n,i=0){return r.G.geodesicDensify(a.hydratedAdapter,c(e),e,t,n,i)}function U(e,t){return r.G.planarArea(a.hydratedAdapter,c(e),e,t)}function k(e,t){return r.G.planarLength(a.hydratedAdapter,c(e),e,t)}function q(e,t,n){return r.G.geodesicArea(a.hydratedAdapter,c(e),e,t,n)}function D(e,t,n){return r.G.geodesicLength(a.hydratedAdapter,c(e),e,t,n)}}}]);
//# sourceMappingURL=198.9f4d277d.chunk.js.map