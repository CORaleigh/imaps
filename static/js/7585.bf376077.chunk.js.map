{"version":3,"file":"static/js/7585.bf376077.chunk.js","mappings":"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","sources":["components/Panels/Property/utils/addresses.ts","components/Panels/Property/AddressTable/AddressTable.tsx"],"sourcesContent":["import MapView from '@arcgis/core/views/MapView';\nimport FeatureTable from '@arcgis/core/widgets/FeatureTable';\nimport FeatureLayer from '@arcgis/core/layers/FeatureLayer';\nimport FieldColumnTemplate from '@arcgis/core/widgets/FeatureTable/support/FieldColumnTemplate';\nimport TableTemplate from '@arcgis/core/widgets/FeatureTable/support/TableTemplate';\nimport FeatureSet from '@arcgis/core/rest/support/FeatureSet';\nimport Graphic from '@arcgis/core/Graphic';\nimport ButtonMenuItem from '@arcgis/core/widgets/FeatureTable/Grid/support/ButtonMenuItem';\n\nimport PictureMarkerSymbol from '@arcgis/core/symbols/PictureMarkerSymbol';\nimport { clearAddressPoints } from './property';\nlet featureTable: FeatureTable;\nexport const initializeFeatureTable = async (ref: HTMLDivElement, view: MapView): Promise<FeatureTable> => {\n  const table: any = await getTableLayer(view);\n  featureTable = new FeatureTable({\n    container: ref,\n    view: view,\n    editingEnabled: false,\n    multiSortEnabled: true,\n    visibleElements: {\n      selectionColumn: false,\n      menuItems: {\n        refreshData: false,\n        toggleColumns: false,\n      },\n    },\n    menuConfig: {\n      items: [\n        new ButtonMenuItem({\n          label: 'Export',\n          iconClass: 'esri-icon-download',\n          clickFunction: () => {\n            exportTable(featureTable);\n          },\n        }),\n      ],\n    },\n    tableTemplate: getTableTemplate(),\n    layer: table,\n  });\n  await featureTable?.when();\n  featureTable.on('selection-change', selectionChanged);\n  initializeGrid(featureTable);\n  return featureTable;\n};\n\nconst selectionChanged = async (e: any) => {\n  if (e.added.length) {\n    const featureSet: FeatureSet = await (featureTable.layer as __esri.FeatureLayer)\n      .queryFeatures({\n        objectIds: [e.added[0].feature.getObjectId()],\n        returnGeometry: true,\n      });\n\n        if (featureSet.features.length) {\n          const feature = featureSet.features[0];\n          feature.setAttribute('type', 'address');\n          feature.symbol = new PictureMarkerSymbol({\n            url: 'assets/pin.svg',\n            height: 24,\n            width: 24,\n          });\n          clearAddressPoints(featureTable.view as __esri.MapView); \n\n          featureTable.view.graphics.add(feature);\n\n          featureTable.view.goTo({ target: feature, zoom: 18 }, { easing: 'ease-in-out' as any, duration: 1000 });\n        }\n\n  }\n}\nconst initializeGrid = (featureTable: FeatureTable) => {\n  (featureTable.findColumn('ADDRESS') as any).width = 150;\n  (featureTable.findColumn('FEATURETYPE') as any).width = 150;\n\n  setTimeout(() => {\n    const grid = (featureTable.container as HTMLElement).querySelector('vaadin-grid') as any;\n    grid?.addEventListener('click', (e: any) => {\n      if ((e.target as HTMLElement).nodeName === 'VAADIN-GRID-CELL-CONTENT') {\n        featureTable.highlightIds.removeAll();\n        const item = (grid.getEventContext(e) as any)?.item;\n        const feature = item.feature;\n        //            featureTable.view.goTo(feature);\n        featureTable.highlightIds.add(feature.getAttribute('OBJECTID'));\n      }\n    });\n  }, 2000);\n}\nlet addressLayer: FeatureLayer;\n\nconst getTableLayer = async (view: MapView) => {\n\n    const layer = new FeatureLayer({\n      portalItem: {\n        id: '318be24592ea4dcba042511b3125fd53',\n      },\n      layerId: 2,\n    });\n    addressLayer = layer;\n    const table = await layer.load();\n      const copyTable = new FeatureLayer({\n        source: [],\n        fields: table.fields,\n        geometryType: 'point',\n        spatialReference: view.spatialReference,\n        popupTemplate: table.popupTemplate,\n        objectIdField: table.objectIdField,\n        displayField: table.displayField,\n        id: 'feature-table',\n      });\n      copyTable.fields.forEach((field) => {\n        field.nullable = true;\n        if (field.name === 'DEED_DATE') {\n          field.type = 'string';\n        }\n      });\n      view.map.allTables.add(copyTable);\n      try {\n        await copyTable.load();\n        return copyTable;\n      } catch (error) {\n        console.log(error);\n      }\n}\nconst getTableTemplate = (): TableTemplate => {\n  const tableTemplate: TableTemplate = new TableTemplate({\n    columnTemplates: [\n      new FieldColumnTemplate({\n        label: 'Address',\n        fieldName: 'ADDRESS',\n        editable: false,\n        initialSortPriority: 0,\n        direction: 'asc',\n      }),\n      new FieldColumnTemplate({\n        label: 'Type',\n        fieldName: 'FEATURETYPE',\n        editable: false,\n        initialSortPriority: 1,\n        direction: 'asc',\n      }),\n    ],\n  });\n  return tableTemplate;\n}\n\nexport const updateTable = async (property: Graphic, featureTable: FeatureTable) => {\n  if (featureTable) {\n    try {\n      clearAddressPoints(featureTable.view as __esri.MapView);\n      const featureSet: FeatureSet = await addressLayer?.queryFeatures({\n        geometry: property.geometry,\n        outFields: ['ADDRESS', 'FEATURETYPE'],\n        returnGeometry: true,\n        where: '1=1',\n      });\n      const result: FeatureSet = await (featureTable.layer as __esri.FeatureLayer).queryFeatures({\n        where: '1=1',\n        returnGeometry: true,\n      });\n\n      await (featureTable.layer as __esri.FeatureLayer).applyEdits({ deleteFeatures: result.features });\n      await (featureTable.layer as __esri.FeatureLayer).applyEdits({ addFeatures: featureSet.features });\n\n      featureTable.refresh();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n};\n\nconst exportTable = async (table: FeatureTable) => {\n  const result = await (table.layer as FeatureLayer).queryFeatures({\n    where: '1=1',\n    outFields: ['*'],\n    orderByFields: ['ADDRESS', 'FEATURETYPE'],\n  });\n\n  let csv = '';\n  (table.tableTemplate.columnTemplates as __esri.FieldColumnTemplate[]).forEach((field: __esri.FieldColumnTemplate) => {\n    csv += `${field.label},`;\n  });\n  csv += '\\r\\n';\n  result.features.forEach((feature) => {\n    (table.tableTemplate.columnTemplates as __esri.FieldColumnTemplate[]).forEach(\n      (field: __esri.FieldColumnTemplate) => {\n        if (feature.attributes[field.fieldName]) {\n          csv += `\"${feature.attributes[field.fieldName]}\",`;\n        } else {\n          csv += `\"\",`;\n        }\n      },\n    );\n    csv += '\\r\\n';\n  });\n  let datestr = new Date().toISOString();\n  datestr = datestr.replaceAll(':', '').replaceAll('-', '');\n  const exportedFilename = `imaps_addresses_export_${datestr}.csv`;\n\n  const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n  const link = document.createElement('a');\n  if (link.download !== undefined) {\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', exportedFilename);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n};\n","import React, { useEffect, useRef } from \"react\";\nimport { initializeFeatureTable, updateTable } from \"../utils/addresses\";\nimport \"./AddressTable.css\";\ninterface Props {\n  view: __esri.MapView;\n  property: __esri.Graphic;\n}\nfunction AddressTable(props: Props) {\n  const ref = useRef() as any;\n  const loaded = useRef(false);\n\n  useEffect(() => {\n    if (!loaded.current) {\n      loaded.current = true;\n\n      initializeFeatureTable(ref.current, props.view).then(\n        (table: __esri.FeatureTable) => {\n          updateTable(props.property, table);\n        }\n      );\n    }\n    return () => {\n      //featureTable && featureTable?.destroy();\n    };\n  }, []);\n\n  return <div id=\"address-table\" ref={ref}></div>;\n}\n\nexport default React.memo(AddressTable);\n"],"names":["featureTable","selectionChanged","async","e","added","length","featureSet","layer","queryFeatures","objectIds","feature","getObjectId","returnGeometry","features","setAttribute","symbol","PictureMarkerSymbol","url","height","width","clearAddressPoints","view","graphics","add","goTo","target","zoom","easing","duration","initializeGrid","findColumn","setTimeout","grid","container","querySelector","addEventListener","nodeName","highlightIds","removeAll","getEventContext","item","getAttribute","addressLayer","getTableLayer","FeatureLayer","portalItem","id","layerId","table","load","copyTable","source","fields","geometryType","spatialReference","popupTemplate","objectIdField","displayField","forEach","field","nullable","name","type","map","allTables","error","console","log","getTableTemplate","TableTemplate","columnTemplates","FieldColumnTemplate","label","fieldName","editable","initialSortPriority","direction","exportTable","result","where","outFields","orderByFields","csv","tableTemplate","attributes","datestr","Date","toISOString","replaceAll","exportedFilename","blob","Blob","link","document","createElement","undefined","download","URL","createObjectURL","style","visibility","body","appendChild","click","removeChild","AddressTable","props","ref","useRef","loaded","useEffect","current","FeatureTable","editingEnabled","multiSortEnabled","visibleElements","selectionColumn","menuItems","refreshData","toggleColumns","menuConfig","items","ButtonMenuItem","iconClass","clickFunction","when","on","initializeFeatureTable","then","property","geometry","applyEdits","deleteFeatures","addFeatures","refresh","updateTable","React"],"sourceRoot":""}