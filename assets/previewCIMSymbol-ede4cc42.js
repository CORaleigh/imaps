import{bJ as w,ia as b,qx as V,bV as I,i4 as q}from"./index-3baec1e8.js";import{s as D,d as P}from"./cimAnalyzer-90e30a1b.js";import{GeometryStyle as G,CIMSymbolRasterizer as E}from"./CIMSymbolRasterizer-a2f39d9b.js";import"./fontUtils-900716a0.js";import"./BidiEngine-836b7ef6.js";import"./GeometryUtils-53652037.js";import"./enums-55085e26.js";import"./alignmentUtils-ae955d28.js";import"./definitions-19bfb61c.js";import"./number-b10bd8f5.js";import"./Rect-ea14f53a.js";import"./callExpressionWithFeature-995a07d3.js";import"./floatRGBA-8334d045.js";import"./CIMResourceManager-517ebe5f.js";import"./Rasterizer-9230c73a.js";import"./_commonjsHelpers-2f3e7994.js";import"./rasterizingUtils-8f4f0f66.js";import"./imageutils-713c87d5.js";const g=new E(null,!0),m=w(b.size),F=w(b.maxSize),L=w(b.lineWidth),k=1;function A(e){const t=e==null?void 0:e.size;return typeof t=="number"?{width:t,height:t}:{width:t!=null&&typeof t=="object"&&"width"in t?t.width:null,height:t!=null&&typeof t=="object"&&"height"in t?t.height:null}}async function rt(e,t={}){var z;const{node:M,opacity:v,symbolConfig:h}=t,j=typeof h=="object"&&"isSquareFill"in h&&h.isSquareFill,S=t.cimOptions||t,o=S.geometryType||V((z=e==null?void 0:e.data)==null?void 0:z.symbol),i=A(t),{feature:C,fieldMap:x}=S;if(i.width==null||i.height==null){const r=await D.resolveSymbolOverrides(e.data,C,null,x,o);if(!r)return null;(e=e.clone()).data={type:"CIMSymbolReference",symbol:r},e.data.primitiveOverrides=void 0;const y=[];P.fetchResources(r,g.resourceManager,y),y.length>0&&await Promise.all(y);const n=P.getEnvelope(r,null,g.resourceManager),d=n==null?void 0:n.width,f=n==null?void 0:n.height;i.width=o==="esriGeometryPolygon"?m:o==="esriGeometryPolyline"?L:d!=null&&isFinite(d)?Math.min(d,F):m,i.height=o==="esriGeometryPolygon"?m:f!=null&&isFinite(f)?Math.max(Math.min(f,F),k):m}const p=await g.rasterizeCIMSymbolAsync(e,C,i,j||o!=="esriGeometryPolygon"?G.Preview:G.Legend,x,o);if(!p)return null;const{width:O,height:R}=p,l=document.createElement("canvas");l.width=O,l.height=R,l.getContext("2d").putImageData(p,0,0);const c=I(i.width),u=I(i.height),s=new Image(c,u);s.src=l.toDataURL(),v!=null&&(s.style.opacity=`${v}`);let a=s;if(t.effectView!=null){const r={shape:{type:"image",x:0,y:0,width:c,height:u,src:s.src},fill:null,stroke:null,offset:[0,0]};a=q([[r]],[c,u],{effectView:t.effectView})}return M&&a&&M.appendChild(a),a}export{rt as previewCIMSymbol};
