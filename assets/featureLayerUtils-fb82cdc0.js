import{aS as K,g_ as m,h5 as w,h6 as R,ae as n,h7 as p,h8 as d,h9 as F,H as D,fE as _,at as q,bN as z,aR as M,ha as U,J as $,hb as Y,hc as g,hd as j}from"./index-53e0d3f6.js";import{r as B}from"./fetchService-8a736717.js";import{o as h}from"./jsonContext-97caea6c.js";const C=K.getLogger("esri.layers.FeatureLayer"),c="Feature Service";function y(a,e){return`Layer (title: ${a.title}, id: ${a.id}) of type '${a.declaredClass}' ${e}`}function A(a,e){if(e.type!==c)throw new n("feature-layer:portal-item-wrong-type",y(a,`should have portal item of type "${c}"`))}async function E(a){if(await a.load(),R(a))throw new n("feature-layer:save",y(a,"using an in-memory source cannot be saved to a portal item"))}function G(a,e){let r=(a.messages??[]).filter(({type:t})=>t==="error").map(({name:t,message:o,details:s})=>new n(t,o,s));if(e!=null&&e.ignoreUnsupported&&(r=r.filter(({name:t})=>t!=="layer:unsupported"&&t!=="symbol:unsupported"&&t!=="symbol-layer:unsupported"&&t!=="property:unsupported"&&t!=="url:unsupported")),r.length>0)throw new n("feature-layer:save","Failed to save feature layer due to unsupported or invalid content. See 'details.errors' for more detailed information",{errors:r})}async function v(a,e,r){"beforeSave"in a&&typeof a.beforeSave=="function"&&await a.beforeSave();const t=a.write({},e);return G(e,r),t}function O(a){const{layer:e,layerJSON:r}=a;return e.isTable?{layers:[],tables:[r]}:{layers:[r],tables:[]}}function b(a){p(a,d.JSAPI),a.typeKeywords&&(a.typeKeywords=a.typeKeywords.filter((e,r,t)=>t.indexOf(e)===r))}function H(a){const e=a.portalItem;if(!e)throw C.error("save: requires the portalItem property to be set"),new n("feature-layer:portal-item-not-set",y(a,"requires the portalItem property to be set"));if(!e.loaded)throw new n("feature-layer:portal-item-not-loaded",y(a,"cannot be saved to a portal item that does not exist or is inaccessible"));A(a,e)}async function x(a,e){return/\/\d+\/?$/.test(a.url??"")?O(e[0]):k(a,e)}async function k(a,e){const{layer:{url:r,customParameters:t,apiKey:o}}=e[0];let s=await a.fetchData("json");s&&s.layers!=null&&s.tables!=null||(s=await Q(s,{url:r??"",customParameters:t,apiKey:o},e.map(l=>l.layer.layerId)));for(const l of e)P(l.layer,l.layerJSON,s);return s}async function Q(a,e,r){var t,o;a||(a={}),(t=a).layers||(t.layers=[]),(o=a).tables||(o.tables=[]);const{url:s,customParameters:l,apiKey:i}=e,{serviceJSON:u,layersJSON:f}=await B(s,{customParameters:l,apiKey:i}),S=J(a.layers,u.layers,r),I=J(a.tables,u.tables,r);a.layers=S.itemResources,a.tables=I.itemResources;const T=[...S.added,...I.added],L=f?[...f.layers,...f.tables]:[];return await V(a,T,s,L),a}function J(a,e,r){const t=F(a,e,(s,l)=>s.id===l.id);a=a.filter(s=>!t.removed.some(l=>l.id===s.id));const o=t.added.map(({id:s})=>({id:s}));return o.forEach(({id:s})=>{a.push({id:s})}),{itemResources:a,added:o.filter(({id:s})=>!r.includes(s))}}async function V(a,e,r,t){const o=e.map(({id:s})=>new D({url:r,layerId:s,sourceJSON:t.find(({id:l})=>l===s)}));await _(o.map(s=>s.load())),o.forEach(s=>{const{layerId:l,loaded:i,defaultPopupTemplate:u}=s;!i||q(u)||P(s,{id:l,popupInfo:u.toJSON()},a)})}function P(a,e,r){a.isTable?N(r.tables,e):N(r.layers,e)}function N(a,e){if(!a)return;const r=a.findIndex(({id:t})=>t===e.id);r===-1?a.push(e):a[r]=e}function W(a){const{portalItem:e}=a;return j(a)&&!a.dynamicDataSource&&!!(e!=null&&e.loaded)&&e.type===c}async function X(a){if(!(a!=null&&a.length))throw new n("feature-layer-utils-saveall:missing-parameters","'layers' array should contain at least one feature layer");await Promise.all(a.map(t=>t.load()));for(const t of a)if(!W(t))throw new n("feature-layer-utils-saveall:invalid-parameters",`'layers' array should only contain layers or tables in a feature service loaded from 'Feature Service' item. ${y(t,"does not conform")}`,{layer:t});const e=a.map(t=>t.portalItem.id);if(new Set(e).size>1)throw new n("feature-layer-utils-saveall:invalid-parameters","All layers in the 'layers' array should be loaded from the same portal item");const r=a.map(t=>t.layerId);if(new Set(r).size!==r.length)throw new n("feature-layer-utils-saveall:invalid-parameters","'layers' array should contain only one instance each of layer or table in a feature service")}function Z(a,e){var r,t;let o=z.from(e);return o.id&&(o=o.clone(),o.id=null),(r=o).type??(r.type=c),(t=o).portal??(t.portal=M.getDefault()),A(a,o),o}async function aa(a,e){const{url:r,layerId:t,title:o,fullExtent:s,isTable:l}=a,i=U(r),u=$(i)&&i.serverType==="FeatureServer";e.url=u?r:`${r}/${t}`,e.title||(e.title=o),e.extent=null,!l&&$(s)&&(e.extent=await Y(s)),g(e,d.METADATA),g(e,d.MULTI_LAYER),p(e,d.SINGLE_LAYER),l&&p(e,d.TABLE),b(e)}async function ea(a,e,r){var o;const t=a.portal;await(t==null?void 0:t.signIn()),await((o=t==null?void 0:t.user)==null?void 0:o.addItem({item:a,data:e,folder:r==null?void 0:r.folder}))}const na=m(ta);async function ta(a,e){await E(a),H(a);const r=a.portalItem,t=h(r),o=await v(a,t,e),s=await x(r,[{layer:a,layerJSON:o}]);return b(r),await r.update({data:s}),w(t),r}const ia=m(async(a,e)=>{await X(a);const r=a[0].portalItem,t=h(r),o=await Promise.all(a.map(l=>v(l,t,e))),s=await x(r,a.map((l,i)=>({layer:l,layerJSON:o[i]})));return b(r),await r.update({data:s}),await Promise.all(a.slice(1).map(l=>l.portalItem.reload())),w(t),r.clone()}),ua=m(ra);async function ra(a,e,r){await E(a);const t=Z(a,e),o=h(t),s=O({layer:a,layerJSON:await v(a,o,r)});return await aa(a,t),await ea(t,s,r),a.portalItem=t,w(o),t}export{na as save,ia as saveAll,ua as saveAs};
